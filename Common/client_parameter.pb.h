// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_parameter.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_client_5fparameter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_client_5fparameter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "vector_math.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_client_5fparameter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_client_5fparameter_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_5fparameter_2eproto;
namespace proto {
class ClientParameter;
struct ClientParameterDefaultTypeInternal;
extern ClientParameterDefaultTypeInternal _ClientParameter_default_instance_;
class ElementImage;
struct ElementImageDefaultTypeInternal;
extern ElementImageDefaultTypeInternal _ElementImage_default_instance_;
class ElementText;
struct ElementTextDefaultTypeInternal;
extern ElementTextDefaultTypeInternal _ElementText_default_instance_;
class PageDescription;
struct PageDescriptionDefaultTypeInternal;
extern PageDescriptionDefaultTypeInternal _PageDescription_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::ClientParameter* Arena::CreateMaybeMessage<::proto::ClientParameter>(Arena*);
template<> ::proto::ElementImage* Arena::CreateMaybeMessage<::proto::ElementImage>(Arena*);
template<> ::proto::ElementText* Arena::CreateMaybeMessage<::proto::ElementText>(Arena*);
template<> ::proto::PageDescription* Arena::CreateMaybeMessage<::proto::PageDescription>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class ClientParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ClientParameter) */ {
 public:
  inline ClientParameter() : ClientParameter(nullptr) {}
  ~ClientParameter() override;
  explicit PROTOBUF_CONSTEXPR ClientParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientParameter(const ClientParameter& from);
  ClientParameter(ClientParameter&& from) noexcept
    : ClientParameter() {
    *this = ::std::move(from);
  }

  inline ClientParameter& operator=(const ClientParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientParameter& operator=(ClientParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientParameter* internal_default_instance() {
    return reinterpret_cast<const ClientParameter*>(
               &_ClientParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClientParameter& a, ClientParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientParameter& from) {
    ClientParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ClientParameter";
  }
  protected:
  explicit ClientParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerNameFieldNumber = 1,
  };
  // string server_name = 1;
  void clear_server_name();
  const std::string& server_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server_name();
  PROTOBUF_NODISCARD std::string* release_server_name();
  void set_allocated_server_name(std::string* server_name);
  private:
  const std::string& _internal_server_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_name(const std::string& value);
  std::string* _internal_mutable_server_name();
  public:

  // @@protoc_insertion_point(class_scope:proto.ClientParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_client_5fparameter_2eproto;
};
// -------------------------------------------------------------------

class ElementText final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ElementText) */ {
 public:
  inline ElementText() : ElementText(nullptr) {}
  ~ElementText() override;
  explicit PROTOBUF_CONSTEXPR ElementText(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ElementText(const ElementText& from);
  ElementText(ElementText&& from) noexcept
    : ElementText() {
    *this = ::std::move(from);
  }

  inline ElementText& operator=(const ElementText& from) {
    CopyFrom(from);
    return *this;
  }
  inline ElementText& operator=(ElementText&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ElementText& default_instance() {
    return *internal_default_instance();
  }
  static inline const ElementText* internal_default_instance() {
    return reinterpret_cast<const ElementText*>(
               &_ElementText_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ElementText& a, ElementText& b) {
    a.Swap(&b);
  }
  inline void Swap(ElementText* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ElementText* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ElementText* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ElementText>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ElementText& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ElementText& from) {
    ElementText::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElementText* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ElementText";
  }
  protected:
  explicit ElementText(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTextFieldNumber = 2,
    kPlaceFieldNumber = 4,
    kSizeFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string text = 2;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // .proto.Vector2 place = 4;
  bool has_place() const;
  private:
  bool _internal_has_place() const;
  public:
  void clear_place();
  const ::proto::Vector2& place() const;
  PROTOBUF_NODISCARD ::proto::Vector2* release_place();
  ::proto::Vector2* mutable_place();
  void set_allocated_place(::proto::Vector2* place);
  private:
  const ::proto::Vector2& _internal_place() const;
  ::proto::Vector2* _internal_mutable_place();
  public:
  void unsafe_arena_set_allocated_place(
      ::proto::Vector2* place);
  ::proto::Vector2* unsafe_arena_release_place();

  // double size = 3;
  void clear_size();
  double size() const;
  void set_size(double value);
  private:
  double _internal_size() const;
  void _internal_set_size(double value);
  public:

  // @@protoc_insertion_point(class_scope:proto.ElementText)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    ::proto::Vector2* place_;
    double size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_client_5fparameter_2eproto;
};
// -------------------------------------------------------------------

class ElementImage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ElementImage) */ {
 public:
  inline ElementImage() : ElementImage(nullptr) {}
  ~ElementImage() override;
  explicit PROTOBUF_CONSTEXPR ElementImage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ElementImage(const ElementImage& from);
  ElementImage(ElementImage&& from) noexcept
    : ElementImage() {
    *this = ::std::move(from);
  }

  inline ElementImage& operator=(const ElementImage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ElementImage& operator=(ElementImage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ElementImage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ElementImage* internal_default_instance() {
    return reinterpret_cast<const ElementImage*>(
               &_ElementImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ElementImage& a, ElementImage& b) {
    a.Swap(&b);
  }
  inline void Swap(ElementImage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ElementImage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ElementImage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ElementImage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ElementImage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ElementImage& from) {
    ElementImage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElementImage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ElementImage";
  }
  protected:
  explicit ElementImage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kFileFieldNumber = 2,
    kPlaceFieldNumber = 3,
    kSizeFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string file = 2;
  void clear_file();
  const std::string& file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file();
  PROTOBUF_NODISCARD std::string* release_file();
  void set_allocated_file(std::string* file);
  private:
  const std::string& _internal_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file(const std::string& value);
  std::string* _internal_mutable_file();
  public:

  // .proto.Vector2 place = 3;
  bool has_place() const;
  private:
  bool _internal_has_place() const;
  public:
  void clear_place();
  const ::proto::Vector2& place() const;
  PROTOBUF_NODISCARD ::proto::Vector2* release_place();
  ::proto::Vector2* mutable_place();
  void set_allocated_place(::proto::Vector2* place);
  private:
  const ::proto::Vector2& _internal_place() const;
  ::proto::Vector2* _internal_mutable_place();
  public:
  void unsafe_arena_set_allocated_place(
      ::proto::Vector2* place);
  ::proto::Vector2* unsafe_arena_release_place();

  // .proto.Vector2 size = 4;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::proto::Vector2& size() const;
  PROTOBUF_NODISCARD ::proto::Vector2* release_size();
  ::proto::Vector2* mutable_size();
  void set_allocated_size(::proto::Vector2* size);
  private:
  const ::proto::Vector2& _internal_size() const;
  ::proto::Vector2* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::proto::Vector2* size);
  ::proto::Vector2* unsafe_arena_release_size();

  // @@protoc_insertion_point(class_scope:proto.ElementImage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_;
    ::proto::Vector2* place_;
    ::proto::Vector2* size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_client_5fparameter_2eproto;
};
// -------------------------------------------------------------------

class PageDescription final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.PageDescription) */ {
 public:
  inline PageDescription() : PageDescription(nullptr) {}
  ~PageDescription() override;
  explicit PROTOBUF_CONSTEXPR PageDescription(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PageDescription(const PageDescription& from);
  PageDescription(PageDescription&& from) noexcept
    : PageDescription() {
    *this = ::std::move(from);
  }

  inline PageDescription& operator=(const PageDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline PageDescription& operator=(PageDescription&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PageDescription& default_instance() {
    return *internal_default_instance();
  }
  static inline const PageDescription* internal_default_instance() {
    return reinterpret_cast<const PageDescription*>(
               &_PageDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PageDescription& a, PageDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(PageDescription* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PageDescription* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PageDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PageDescription>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PageDescription& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PageDescription& from) {
    PageDescription::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PageDescription* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.PageDescription";
  }
  protected:
  explicit PageDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 3,
    kImageFieldNumber = 4,
    kNameFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // repeated .proto.ElementText text = 3;
  int text_size() const;
  private:
  int _internal_text_size() const;
  public:
  void clear_text();
  ::proto::ElementText* mutable_text(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::ElementText >*
      mutable_text();
  private:
  const ::proto::ElementText& _internal_text(int index) const;
  ::proto::ElementText* _internal_add_text();
  public:
  const ::proto::ElementText& text(int index) const;
  ::proto::ElementText* add_text();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::ElementText >&
      text() const;

  // repeated .proto.ElementImage image = 4;
  int image_size() const;
  private:
  int _internal_image_size() const;
  public:
  void clear_image();
  ::proto::ElementImage* mutable_image(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::ElementImage >*
      mutable_image();
  private:
  const ::proto::ElementImage& _internal_image(int index) const;
  ::proto::ElementImage* _internal_add_image();
  public:
  const ::proto::ElementImage& image(int index) const;
  ::proto::ElementImage* add_image();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::ElementImage >&
      image() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .proto.Vector2 size = 2;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::proto::Vector2& size() const;
  PROTOBUF_NODISCARD ::proto::Vector2* release_size();
  ::proto::Vector2* mutable_size();
  void set_allocated_size(::proto::Vector2* size);
  private:
  const ::proto::Vector2& _internal_size() const;
  ::proto::Vector2* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::proto::Vector2* size);
  ::proto::Vector2* unsafe_arena_release_size();

  // @@protoc_insertion_point(class_scope:proto.PageDescription)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::ElementText > text_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::ElementImage > image_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::proto::Vector2* size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_client_5fparameter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientParameter

// string server_name = 1;
inline void ClientParameter::clear_server_name() {
  _impl_.server_name_.ClearToEmpty();
}
inline const std::string& ClientParameter::server_name() const {
  // @@protoc_insertion_point(field_get:proto.ClientParameter.server_name)
  return _internal_server_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientParameter::set_server_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.server_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ClientParameter.server_name)
}
inline std::string* ClientParameter::mutable_server_name() {
  std::string* _s = _internal_mutable_server_name();
  // @@protoc_insertion_point(field_mutable:proto.ClientParameter.server_name)
  return _s;
}
inline const std::string& ClientParameter::_internal_server_name() const {
  return _impl_.server_name_.Get();
}
inline void ClientParameter::_internal_set_server_name(const std::string& value) {
  
  _impl_.server_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientParameter::_internal_mutable_server_name() {
  
  return _impl_.server_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientParameter::release_server_name() {
  // @@protoc_insertion_point(field_release:proto.ClientParameter.server_name)
  return _impl_.server_name_.Release();
}
inline void ClientParameter::set_allocated_server_name(std::string* server_name) {
  if (server_name != nullptr) {
    
  } else {
    
  }
  _impl_.server_name_.SetAllocated(server_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.server_name_.IsDefault()) {
    _impl_.server_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.ClientParameter.server_name)
}

// -------------------------------------------------------------------

// ElementText

// string name = 1;
inline void ElementText::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ElementText::name() const {
  // @@protoc_insertion_point(field_get:proto.ElementText.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ElementText::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ElementText.name)
}
inline std::string* ElementText::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto.ElementText.name)
  return _s;
}
inline const std::string& ElementText::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ElementText::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ElementText::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ElementText::release_name() {
  // @@protoc_insertion_point(field_release:proto.ElementText.name)
  return _impl_.name_.Release();
}
inline void ElementText::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.ElementText.name)
}

// string text = 2;
inline void ElementText::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& ElementText::text() const {
  // @@protoc_insertion_point(field_get:proto.ElementText.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ElementText::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ElementText.text)
}
inline std::string* ElementText::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:proto.ElementText.text)
  return _s;
}
inline const std::string& ElementText::_internal_text() const {
  return _impl_.text_.Get();
}
inline void ElementText::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* ElementText::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* ElementText::release_text() {
  // @@protoc_insertion_point(field_release:proto.ElementText.text)
  return _impl_.text_.Release();
}
inline void ElementText::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.ElementText.text)
}

// double size = 3;
inline void ElementText::clear_size() {
  _impl_.size_ = 0;
}
inline double ElementText::_internal_size() const {
  return _impl_.size_;
}
inline double ElementText::size() const {
  // @@protoc_insertion_point(field_get:proto.ElementText.size)
  return _internal_size();
}
inline void ElementText::_internal_set_size(double value) {
  
  _impl_.size_ = value;
}
inline void ElementText::set_size(double value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:proto.ElementText.size)
}

// .proto.Vector2 place = 4;
inline bool ElementText::_internal_has_place() const {
  return this != internal_default_instance() && _impl_.place_ != nullptr;
}
inline bool ElementText::has_place() const {
  return _internal_has_place();
}
inline const ::proto::Vector2& ElementText::_internal_place() const {
  const ::proto::Vector2* p = _impl_.place_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Vector2&>(
      ::proto::_Vector2_default_instance_);
}
inline const ::proto::Vector2& ElementText::place() const {
  // @@protoc_insertion_point(field_get:proto.ElementText.place)
  return _internal_place();
}
inline void ElementText::unsafe_arena_set_allocated_place(
    ::proto::Vector2* place) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.place_);
  }
  _impl_.place_ = place;
  if (place) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ElementText.place)
}
inline ::proto::Vector2* ElementText::release_place() {
  
  ::proto::Vector2* temp = _impl_.place_;
  _impl_.place_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Vector2* ElementText::unsafe_arena_release_place() {
  // @@protoc_insertion_point(field_release:proto.ElementText.place)
  
  ::proto::Vector2* temp = _impl_.place_;
  _impl_.place_ = nullptr;
  return temp;
}
inline ::proto::Vector2* ElementText::_internal_mutable_place() {
  
  if (_impl_.place_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Vector2>(GetArenaForAllocation());
    _impl_.place_ = p;
  }
  return _impl_.place_;
}
inline ::proto::Vector2* ElementText::mutable_place() {
  ::proto::Vector2* _msg = _internal_mutable_place();
  // @@protoc_insertion_point(field_mutable:proto.ElementText.place)
  return _msg;
}
inline void ElementText::set_allocated_place(::proto::Vector2* place) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.place_);
  }
  if (place) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(place));
    if (message_arena != submessage_arena) {
      place = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, place, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.place_ = place;
  // @@protoc_insertion_point(field_set_allocated:proto.ElementText.place)
}

// -------------------------------------------------------------------

// ElementImage

// string name = 1;
inline void ElementImage::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ElementImage::name() const {
  // @@protoc_insertion_point(field_get:proto.ElementImage.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ElementImage::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ElementImage.name)
}
inline std::string* ElementImage::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto.ElementImage.name)
  return _s;
}
inline const std::string& ElementImage::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ElementImage::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ElementImage::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ElementImage::release_name() {
  // @@protoc_insertion_point(field_release:proto.ElementImage.name)
  return _impl_.name_.Release();
}
inline void ElementImage::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.ElementImage.name)
}

// string file = 2;
inline void ElementImage::clear_file() {
  _impl_.file_.ClearToEmpty();
}
inline const std::string& ElementImage::file() const {
  // @@protoc_insertion_point(field_get:proto.ElementImage.file)
  return _internal_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ElementImage::set_file(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ElementImage.file)
}
inline std::string* ElementImage::mutable_file() {
  std::string* _s = _internal_mutable_file();
  // @@protoc_insertion_point(field_mutable:proto.ElementImage.file)
  return _s;
}
inline const std::string& ElementImage::_internal_file() const {
  return _impl_.file_.Get();
}
inline void ElementImage::_internal_set_file(const std::string& value) {
  
  _impl_.file_.Set(value, GetArenaForAllocation());
}
inline std::string* ElementImage::_internal_mutable_file() {
  
  return _impl_.file_.Mutable(GetArenaForAllocation());
}
inline std::string* ElementImage::release_file() {
  // @@protoc_insertion_point(field_release:proto.ElementImage.file)
  return _impl_.file_.Release();
}
inline void ElementImage::set_allocated_file(std::string* file) {
  if (file != nullptr) {
    
  } else {
    
  }
  _impl_.file_.SetAllocated(file, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_.IsDefault()) {
    _impl_.file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.ElementImage.file)
}

// .proto.Vector2 place = 3;
inline bool ElementImage::_internal_has_place() const {
  return this != internal_default_instance() && _impl_.place_ != nullptr;
}
inline bool ElementImage::has_place() const {
  return _internal_has_place();
}
inline const ::proto::Vector2& ElementImage::_internal_place() const {
  const ::proto::Vector2* p = _impl_.place_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Vector2&>(
      ::proto::_Vector2_default_instance_);
}
inline const ::proto::Vector2& ElementImage::place() const {
  // @@protoc_insertion_point(field_get:proto.ElementImage.place)
  return _internal_place();
}
inline void ElementImage::unsafe_arena_set_allocated_place(
    ::proto::Vector2* place) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.place_);
  }
  _impl_.place_ = place;
  if (place) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ElementImage.place)
}
inline ::proto::Vector2* ElementImage::release_place() {
  
  ::proto::Vector2* temp = _impl_.place_;
  _impl_.place_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Vector2* ElementImage::unsafe_arena_release_place() {
  // @@protoc_insertion_point(field_release:proto.ElementImage.place)
  
  ::proto::Vector2* temp = _impl_.place_;
  _impl_.place_ = nullptr;
  return temp;
}
inline ::proto::Vector2* ElementImage::_internal_mutable_place() {
  
  if (_impl_.place_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Vector2>(GetArenaForAllocation());
    _impl_.place_ = p;
  }
  return _impl_.place_;
}
inline ::proto::Vector2* ElementImage::mutable_place() {
  ::proto::Vector2* _msg = _internal_mutable_place();
  // @@protoc_insertion_point(field_mutable:proto.ElementImage.place)
  return _msg;
}
inline void ElementImage::set_allocated_place(::proto::Vector2* place) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.place_);
  }
  if (place) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(place));
    if (message_arena != submessage_arena) {
      place = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, place, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.place_ = place;
  // @@protoc_insertion_point(field_set_allocated:proto.ElementImage.place)
}

// .proto.Vector2 size = 4;
inline bool ElementImage::_internal_has_size() const {
  return this != internal_default_instance() && _impl_.size_ != nullptr;
}
inline bool ElementImage::has_size() const {
  return _internal_has_size();
}
inline const ::proto::Vector2& ElementImage::_internal_size() const {
  const ::proto::Vector2* p = _impl_.size_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Vector2&>(
      ::proto::_Vector2_default_instance_);
}
inline const ::proto::Vector2& ElementImage::size() const {
  // @@protoc_insertion_point(field_get:proto.ElementImage.size)
  return _internal_size();
}
inline void ElementImage::unsafe_arena_set_allocated_size(
    ::proto::Vector2* size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  _impl_.size_ = size;
  if (size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ElementImage.size)
}
inline ::proto::Vector2* ElementImage::release_size() {
  
  ::proto::Vector2* temp = _impl_.size_;
  _impl_.size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Vector2* ElementImage::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:proto.ElementImage.size)
  
  ::proto::Vector2* temp = _impl_.size_;
  _impl_.size_ = nullptr;
  return temp;
}
inline ::proto::Vector2* ElementImage::_internal_mutable_size() {
  
  if (_impl_.size_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Vector2>(GetArenaForAllocation());
    _impl_.size_ = p;
  }
  return _impl_.size_;
}
inline ::proto::Vector2* ElementImage::mutable_size() {
  ::proto::Vector2* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:proto.ElementImage.size)
  return _msg;
}
inline void ElementImage::set_allocated_size(::proto::Vector2* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size));
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.size_ = size;
  // @@protoc_insertion_point(field_set_allocated:proto.ElementImage.size)
}

// -------------------------------------------------------------------

// PageDescription

// string name = 1;
inline void PageDescription::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& PageDescription::name() const {
  // @@protoc_insertion_point(field_get:proto.PageDescription.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PageDescription::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.PageDescription.name)
}
inline std::string* PageDescription::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto.PageDescription.name)
  return _s;
}
inline const std::string& PageDescription::_internal_name() const {
  return _impl_.name_.Get();
}
inline void PageDescription::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* PageDescription::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* PageDescription::release_name() {
  // @@protoc_insertion_point(field_release:proto.PageDescription.name)
  return _impl_.name_.Release();
}
inline void PageDescription::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.PageDescription.name)
}

// .proto.Vector2 size = 2;
inline bool PageDescription::_internal_has_size() const {
  return this != internal_default_instance() && _impl_.size_ != nullptr;
}
inline bool PageDescription::has_size() const {
  return _internal_has_size();
}
inline const ::proto::Vector2& PageDescription::_internal_size() const {
  const ::proto::Vector2* p = _impl_.size_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Vector2&>(
      ::proto::_Vector2_default_instance_);
}
inline const ::proto::Vector2& PageDescription::size() const {
  // @@protoc_insertion_point(field_get:proto.PageDescription.size)
  return _internal_size();
}
inline void PageDescription::unsafe_arena_set_allocated_size(
    ::proto::Vector2* size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  _impl_.size_ = size;
  if (size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.PageDescription.size)
}
inline ::proto::Vector2* PageDescription::release_size() {
  
  ::proto::Vector2* temp = _impl_.size_;
  _impl_.size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Vector2* PageDescription::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:proto.PageDescription.size)
  
  ::proto::Vector2* temp = _impl_.size_;
  _impl_.size_ = nullptr;
  return temp;
}
inline ::proto::Vector2* PageDescription::_internal_mutable_size() {
  
  if (_impl_.size_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Vector2>(GetArenaForAllocation());
    _impl_.size_ = p;
  }
  return _impl_.size_;
}
inline ::proto::Vector2* PageDescription::mutable_size() {
  ::proto::Vector2* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:proto.PageDescription.size)
  return _msg;
}
inline void PageDescription::set_allocated_size(::proto::Vector2* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size));
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.size_ = size;
  // @@protoc_insertion_point(field_set_allocated:proto.PageDescription.size)
}

// repeated .proto.ElementText text = 3;
inline int PageDescription::_internal_text_size() const {
  return _impl_.text_.size();
}
inline int PageDescription::text_size() const {
  return _internal_text_size();
}
inline void PageDescription::clear_text() {
  _impl_.text_.Clear();
}
inline ::proto::ElementText* PageDescription::mutable_text(int index) {
  // @@protoc_insertion_point(field_mutable:proto.PageDescription.text)
  return _impl_.text_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::ElementText >*
PageDescription::mutable_text() {
  // @@protoc_insertion_point(field_mutable_list:proto.PageDescription.text)
  return &_impl_.text_;
}
inline const ::proto::ElementText& PageDescription::_internal_text(int index) const {
  return _impl_.text_.Get(index);
}
inline const ::proto::ElementText& PageDescription::text(int index) const {
  // @@protoc_insertion_point(field_get:proto.PageDescription.text)
  return _internal_text(index);
}
inline ::proto::ElementText* PageDescription::_internal_add_text() {
  return _impl_.text_.Add();
}
inline ::proto::ElementText* PageDescription::add_text() {
  ::proto::ElementText* _add = _internal_add_text();
  // @@protoc_insertion_point(field_add:proto.PageDescription.text)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::ElementText >&
PageDescription::text() const {
  // @@protoc_insertion_point(field_list:proto.PageDescription.text)
  return _impl_.text_;
}

// repeated .proto.ElementImage image = 4;
inline int PageDescription::_internal_image_size() const {
  return _impl_.image_.size();
}
inline int PageDescription::image_size() const {
  return _internal_image_size();
}
inline void PageDescription::clear_image() {
  _impl_.image_.Clear();
}
inline ::proto::ElementImage* PageDescription::mutable_image(int index) {
  // @@protoc_insertion_point(field_mutable:proto.PageDescription.image)
  return _impl_.image_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::ElementImage >*
PageDescription::mutable_image() {
  // @@protoc_insertion_point(field_mutable_list:proto.PageDescription.image)
  return &_impl_.image_;
}
inline const ::proto::ElementImage& PageDescription::_internal_image(int index) const {
  return _impl_.image_.Get(index);
}
inline const ::proto::ElementImage& PageDescription::image(int index) const {
  // @@protoc_insertion_point(field_get:proto.PageDescription.image)
  return _internal_image(index);
}
inline ::proto::ElementImage* PageDescription::_internal_add_image() {
  return _impl_.image_.Add();
}
inline ::proto::ElementImage* PageDescription::add_image() {
  ::proto::ElementImage* _add = _internal_add_image();
  // @@protoc_insertion_point(field_add:proto.PageDescription.image)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::ElementImage >&
PageDescription::image() const {
  // @@protoc_insertion_point(field_list:proto.PageDescription.image)
  return _impl_.image_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_client_5fparameter_2eproto
