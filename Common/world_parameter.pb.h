// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: world_parameter.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_world_5fparameter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_world_5fparameter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "vector_math.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_world_5fparameter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_world_5fparameter_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_world_5fparameter_2eproto;
namespace proto {
class Character;
struct CharacterDefaultTypeInternal;
extern CharacterDefaultTypeInternal _Character_default_instance_;
class ColorParameter;
struct ColorParameterDefaultTypeInternal;
extern ColorParameterDefaultTypeInternal _ColorParameter_default_instance_;
class Element;
struct ElementDefaultTypeInternal;
extern ElementDefaultTypeInternal _Element_default_instance_;
class Physic;
struct PhysicDefaultTypeInternal;
extern PhysicDefaultTypeInternal _Physic_default_instance_;
class PlayerParameter;
struct PlayerParameterDefaultTypeInternal;
extern PlayerParameterDefaultTypeInternal _PlayerParameter_default_instance_;
class SpecialEffectParameter;
struct SpecialEffectParameterDefaultTypeInternal;
extern SpecialEffectParameterDefaultTypeInternal _SpecialEffectParameter_default_instance_;
class WorldDatabase;
struct WorldDatabaseDefaultTypeInternal;
extern WorldDatabaseDefaultTypeInternal _WorldDatabase_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::Character* Arena::CreateMaybeMessage<::proto::Character>(Arena*);
template<> ::proto::ColorParameter* Arena::CreateMaybeMessage<::proto::ColorParameter>(Arena*);
template<> ::proto::Element* Arena::CreateMaybeMessage<::proto::Element>(Arena*);
template<> ::proto::Physic* Arena::CreateMaybeMessage<::proto::Physic>(Arena*);
template<> ::proto::PlayerParameter* Arena::CreateMaybeMessage<::proto::PlayerParameter>(Arena*);
template<> ::proto::SpecialEffectParameter* Arena::CreateMaybeMessage<::proto::SpecialEffectParameter>(Arena*);
template<> ::proto::WorldDatabase* Arena::CreateMaybeMessage<::proto::WorldDatabase>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

enum ReturnEnum : int {
  RETURN_ERROR = 0,
  RETURN_OK = 1,
  RETURN_REJECTED = 2,
  ReturnEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ReturnEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ReturnEnum_IsValid(int value);
constexpr ReturnEnum ReturnEnum_MIN = RETURN_ERROR;
constexpr ReturnEnum ReturnEnum_MAX = RETURN_REJECTED;
constexpr int ReturnEnum_ARRAYSIZE = ReturnEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReturnEnum_descriptor();
template<typename T>
inline const std::string& ReturnEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReturnEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReturnEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReturnEnum_descriptor(), enum_t_value);
}
inline bool ReturnEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ReturnEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReturnEnum>(
    ReturnEnum_descriptor(), name, value);
}
enum VitalEnum : int {
  VITAL_NONE = 0,
  VITAL_ALIVE = 1,
  VITAL_DEAD = 2,
  VITAL_LOADING = 3,
  VitalEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  VitalEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool VitalEnum_IsValid(int value);
constexpr VitalEnum VitalEnum_MIN = VITAL_NONE;
constexpr VitalEnum VitalEnum_MAX = VITAL_LOADING;
constexpr int VitalEnum_ARRAYSIZE = VitalEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VitalEnum_descriptor();
template<typename T>
inline const std::string& VitalEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VitalEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VitalEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VitalEnum_descriptor(), enum_t_value);
}
inline bool VitalEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VitalEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VitalEnum>(
    VitalEnum_descriptor(), name, value);
}
enum StatusEnum : int {
  STATUS_UNKNOWN = 0,
  STATUS_ON_GROUND = 1,
  STATUS_JUMPING = 2,
  STATUS_LOADING = 3,
  STATUS_DEAD = 4,
  StatusEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  StatusEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool StatusEnum_IsValid(int value);
constexpr StatusEnum StatusEnum_MIN = STATUS_UNKNOWN;
constexpr StatusEnum StatusEnum_MAX = STATUS_DEAD;
constexpr int StatusEnum_ARRAYSIZE = StatusEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatusEnum_descriptor();
template<typename T>
inline const std::string& StatusEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StatusEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StatusEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StatusEnum_descriptor(), enum_t_value);
}
inline bool StatusEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StatusEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StatusEnum>(
    StatusEnum_descriptor(), name, value);
}
enum TypeEnum : int {
  TYPE_UNKNOWN = 0,
  TYPE_GROUND = 1,
  TYPE_EXPLOSION = 2,
  TYPE_UPGRADE = 3,
  TYPE_GREEN = 4,
  TYPE_BROWN = 5,
  TYPE_WATER = 6,
  TYPE_CHARACTER = 7,
  TypeEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TypeEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TypeEnum_IsValid(int value);
constexpr TypeEnum TypeEnum_MIN = TYPE_UNKNOWN;
constexpr TypeEnum TypeEnum_MAX = TYPE_CHARACTER;
constexpr int TypeEnum_ARRAYSIZE = TypeEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TypeEnum_descriptor();
template<typename T>
inline const std::string& TypeEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TypeEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TypeEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TypeEnum_descriptor(), enum_t_value);
}
inline bool TypeEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TypeEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TypeEnum>(
    TypeEnum_descriptor(), name, value);
}
enum SpecialStateEnum : int {
  SPECIAL_STATE_UNKNOWN = 0,
  SPECIAL_STATE_ACTIVE = 1,
  SPECIAL_STATE_COOLDOWN = 2,
  SpecialStateEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SpecialStateEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SpecialStateEnum_IsValid(int value);
constexpr SpecialStateEnum SpecialStateEnum_MIN = SPECIAL_STATE_UNKNOWN;
constexpr SpecialStateEnum SpecialStateEnum_MAX = SPECIAL_STATE_COOLDOWN;
constexpr int SpecialStateEnum_ARRAYSIZE = SpecialStateEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpecialStateEnum_descriptor();
template<typename T>
inline const std::string& SpecialStateEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SpecialStateEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SpecialStateEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SpecialStateEnum_descriptor(), enum_t_value);
}
inline bool SpecialStateEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SpecialStateEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SpecialStateEnum>(
    SpecialStateEnum_descriptor(), name, value);
}
enum CharacterTypeEnum : int {
  CHARACTER_NONE = 0,
  CHARACTER_PLAYER = 1,
  CHARACTER_NPC = 2,
  CharacterTypeEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CharacterTypeEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CharacterTypeEnum_IsValid(int value);
constexpr CharacterTypeEnum CharacterTypeEnum_MIN = CHARACTER_NONE;
constexpr CharacterTypeEnum CharacterTypeEnum_MAX = CHARACTER_NPC;
constexpr int CharacterTypeEnum_ARRAYSIZE = CharacterTypeEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CharacterTypeEnum_descriptor();
template<typename T>
inline const std::string& CharacterTypeEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CharacterTypeEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CharacterTypeEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CharacterTypeEnum_descriptor(), enum_t_value);
}
inline bool CharacterTypeEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CharacterTypeEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CharacterTypeEnum>(
    CharacterTypeEnum_descriptor(), name, value);
}
// ===================================================================

class SpecialEffectParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SpecialEffectParameter) */ {
 public:
  inline SpecialEffectParameter() : SpecialEffectParameter(nullptr) {}
  ~SpecialEffectParameter() override;
  explicit PROTOBUF_CONSTEXPR SpecialEffectParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpecialEffectParameter(const SpecialEffectParameter& from);
  SpecialEffectParameter(SpecialEffectParameter&& from) noexcept
    : SpecialEffectParameter() {
    *this = ::std::move(from);
  }

  inline SpecialEffectParameter& operator=(const SpecialEffectParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpecialEffectParameter& operator=(SpecialEffectParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpecialEffectParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpecialEffectParameter* internal_default_instance() {
    return reinterpret_cast<const SpecialEffectParameter*>(
               &_SpecialEffectParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SpecialEffectParameter& a, SpecialEffectParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(SpecialEffectParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpecialEffectParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpecialEffectParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpecialEffectParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpecialEffectParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SpecialEffectParameter& from) {
    SpecialEffectParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpecialEffectParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SpecialEffectParameter";
  }
  protected:
  explicit SpecialEffectParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEffectDurationFieldNumber = 2,
    kCooldownDurationFieldNumber = 3,
    kCounterFieldNumber = 4,
    kSpecialStateEnumFieldNumber = 1,
  };
  // double effect_duration = 2;
  void clear_effect_duration();
  double effect_duration() const;
  void set_effect_duration(double value);
  private:
  double _internal_effect_duration() const;
  void _internal_set_effect_duration(double value);
  public:

  // double cooldown_duration = 3;
  void clear_cooldown_duration();
  double cooldown_duration() const;
  void set_cooldown_duration(double value);
  private:
  double _internal_cooldown_duration() const;
  void _internal_set_cooldown_duration(double value);
  public:

  // double counter = 4;
  void clear_counter();
  double counter() const;
  void set_counter(double value);
  private:
  double _internal_counter() const;
  void _internal_set_counter(double value);
  public:

  // .proto.SpecialStateEnum special_state_enum = 1;
  void clear_special_state_enum();
  ::proto::SpecialStateEnum special_state_enum() const;
  void set_special_state_enum(::proto::SpecialStateEnum value);
  private:
  ::proto::SpecialStateEnum _internal_special_state_enum() const;
  void _internal_set_special_state_enum(::proto::SpecialStateEnum value);
  public:

  // @@protoc_insertion_point(class_scope:proto.SpecialEffectParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double effect_duration_;
    double cooldown_duration_;
    double counter_;
    int special_state_enum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_5fparameter_2eproto;
};
// -------------------------------------------------------------------

class Physic final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Physic) */ {
 public:
  inline Physic() : Physic(nullptr) {}
  ~Physic() override;
  explicit PROTOBUF_CONSTEXPR Physic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Physic(const Physic& from);
  Physic(Physic&& from) noexcept
    : Physic() {
    *this = ::std::move(from);
  }

  inline Physic& operator=(const Physic& from) {
    CopyFrom(from);
    return *this;
  }
  inline Physic& operator=(Physic&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Physic& default_instance() {
    return *internal_default_instance();
  }
  static inline const Physic* internal_default_instance() {
    return reinterpret_cast<const Physic*>(
               &_Physic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Physic& a, Physic& b) {
    a.Swap(&b);
  }
  inline void Swap(Physic* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Physic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Physic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Physic>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Physic& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Physic& from) {
    Physic::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Physic* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Physic";
  }
  protected:
  explicit Physic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 3,
    kOrientationFieldNumber = 4,
    kPositionDtFieldNumber = 5,
    kOrientationDtFieldNumber = 6,
    kRadiusFieldNumber = 1,
    kMassFieldNumber = 2,
  };
  // .proto.Vector3 position = 3;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::proto::Vector3& position() const;
  PROTOBUF_NODISCARD ::proto::Vector3* release_position();
  ::proto::Vector3* mutable_position();
  void set_allocated_position(::proto::Vector3* position);
  private:
  const ::proto::Vector3& _internal_position() const;
  ::proto::Vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::proto::Vector3* position);
  ::proto::Vector3* unsafe_arena_release_position();

  // .proto.Vector4 orientation = 4;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::proto::Vector4& orientation() const;
  PROTOBUF_NODISCARD ::proto::Vector4* release_orientation();
  ::proto::Vector4* mutable_orientation();
  void set_allocated_orientation(::proto::Vector4* orientation);
  private:
  const ::proto::Vector4& _internal_orientation() const;
  ::proto::Vector4* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::proto::Vector4* orientation);
  ::proto::Vector4* unsafe_arena_release_orientation();

  // .proto.Vector3 position_dt = 5;
  bool has_position_dt() const;
  private:
  bool _internal_has_position_dt() const;
  public:
  void clear_position_dt();
  const ::proto::Vector3& position_dt() const;
  PROTOBUF_NODISCARD ::proto::Vector3* release_position_dt();
  ::proto::Vector3* mutable_position_dt();
  void set_allocated_position_dt(::proto::Vector3* position_dt);
  private:
  const ::proto::Vector3& _internal_position_dt() const;
  ::proto::Vector3* _internal_mutable_position_dt();
  public:
  void unsafe_arena_set_allocated_position_dt(
      ::proto::Vector3* position_dt);
  ::proto::Vector3* unsafe_arena_release_position_dt();

  // .proto.Vector4 orientation_dt = 6;
  bool has_orientation_dt() const;
  private:
  bool _internal_has_orientation_dt() const;
  public:
  void clear_orientation_dt();
  const ::proto::Vector4& orientation_dt() const;
  PROTOBUF_NODISCARD ::proto::Vector4* release_orientation_dt();
  ::proto::Vector4* mutable_orientation_dt();
  void set_allocated_orientation_dt(::proto::Vector4* orientation_dt);
  private:
  const ::proto::Vector4& _internal_orientation_dt() const;
  ::proto::Vector4* _internal_mutable_orientation_dt();
  public:
  void unsafe_arena_set_allocated_orientation_dt(
      ::proto::Vector4* orientation_dt);
  ::proto::Vector4* unsafe_arena_release_orientation_dt();

  // double radius = 1;
  void clear_radius();
  double radius() const;
  void set_radius(double value);
  private:
  double _internal_radius() const;
  void _internal_set_radius(double value);
  public:

  // double mass = 2;
  void clear_mass();
  double mass() const;
  void set_mass(double value);
  private:
  double _internal_mass() const;
  void _internal_set_mass(double value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Physic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::Vector3* position_;
    ::proto::Vector4* orientation_;
    ::proto::Vector3* position_dt_;
    ::proto::Vector4* orientation_dt_;
    double radius_;
    double mass_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_5fparameter_2eproto;
};
// -------------------------------------------------------------------

class Element final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Element) */ {
 public:
  inline Element() : Element(nullptr) {}
  ~Element() override;
  explicit PROTOBUF_CONSTEXPR Element(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Element(const Element& from);
  Element(Element&& from) noexcept
    : Element() {
    *this = ::std::move(from);
  }

  inline Element& operator=(const Element& from) {
    CopyFrom(from);
    return *this;
  }
  inline Element& operator=(Element&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Element& default_instance() {
    return *internal_default_instance();
  }
  static inline const Element* internal_default_instance() {
    return reinterpret_cast<const Element*>(
               &_Element_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Element& a, Element& b) {
    a.Swap(&b);
  }
  inline void Swap(Element* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Element* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Element* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Element>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Element& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Element& from) {
    Element::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Element* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Element";
  }
  protected:
  explicit Element(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kColorFieldNumber = 2,
    kPhysicFieldNumber = 3,
    kTypeEnumFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .proto.Vector3 color = 2;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::proto::Vector3& color() const;
  PROTOBUF_NODISCARD ::proto::Vector3* release_color();
  ::proto::Vector3* mutable_color();
  void set_allocated_color(::proto::Vector3* color);
  private:
  const ::proto::Vector3& _internal_color() const;
  ::proto::Vector3* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::proto::Vector3* color);
  ::proto::Vector3* unsafe_arena_release_color();

  // .proto.Physic physic = 3;
  bool has_physic() const;
  private:
  bool _internal_has_physic() const;
  public:
  void clear_physic();
  const ::proto::Physic& physic() const;
  PROTOBUF_NODISCARD ::proto::Physic* release_physic();
  ::proto::Physic* mutable_physic();
  void set_allocated_physic(::proto::Physic* physic);
  private:
  const ::proto::Physic& _internal_physic() const;
  ::proto::Physic* _internal_mutable_physic();
  public:
  void unsafe_arena_set_allocated_physic(
      ::proto::Physic* physic);
  ::proto::Physic* unsafe_arena_release_physic();

  // .proto.TypeEnum type_enum = 4;
  void clear_type_enum();
  ::proto::TypeEnum type_enum() const;
  void set_type_enum(::proto::TypeEnum value);
  private:
  ::proto::TypeEnum _internal_type_enum() const;
  void _internal_set_type_enum(::proto::TypeEnum value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Element)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::proto::Vector3* color_;
    ::proto::Physic* physic_;
    int type_enum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_5fparameter_2eproto;
};
// -------------------------------------------------------------------

class Character final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Character) */ {
 public:
  inline Character() : Character(nullptr) {}
  ~Character() override;
  explicit PROTOBUF_CONSTEXPR Character(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Character(const Character& from);
  Character(Character&& from) noexcept
    : Character() {
    *this = ::std::move(from);
  }

  inline Character& operator=(const Character& from) {
    CopyFrom(from);
    return *this;
  }
  inline Character& operator=(Character&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Character& default_instance() {
    return *internal_default_instance();
  }
  static inline const Character* internal_default_instance() {
    return reinterpret_cast<const Character*>(
               &_Character_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Character& a, Character& b) {
    a.Swap(&b);
  }
  inline void Swap(Character* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Character* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Character* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Character>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Character& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Character& from) {
    Character::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Character* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Character";
  }
  protected:
  explicit Character(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kColorFieldNumber = 2,
    kPhysicFieldNumber = 3,
    kGForceFieldNumber = 4,
    kNormalFieldNumber = 5,
    kSpecialEffectBoostFieldNumber = 7,
    kStatusEnumFieldNumber = 6,
    kCharacterTypeFieldNumber = 8,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .proto.Vector3 color = 2;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::proto::Vector3& color() const;
  PROTOBUF_NODISCARD ::proto::Vector3* release_color();
  ::proto::Vector3* mutable_color();
  void set_allocated_color(::proto::Vector3* color);
  private:
  const ::proto::Vector3& _internal_color() const;
  ::proto::Vector3* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::proto::Vector3* color);
  ::proto::Vector3* unsafe_arena_release_color();

  // .proto.Physic physic = 3;
  bool has_physic() const;
  private:
  bool _internal_has_physic() const;
  public:
  void clear_physic();
  const ::proto::Physic& physic() const;
  PROTOBUF_NODISCARD ::proto::Physic* release_physic();
  ::proto::Physic* mutable_physic();
  void set_allocated_physic(::proto::Physic* physic);
  private:
  const ::proto::Physic& _internal_physic() const;
  ::proto::Physic* _internal_mutable_physic();
  public:
  void unsafe_arena_set_allocated_physic(
      ::proto::Physic* physic);
  ::proto::Physic* unsafe_arena_release_physic();

  // .proto.Vector3 g_force = 4;
  bool has_g_force() const;
  private:
  bool _internal_has_g_force() const;
  public:
  void clear_g_force();
  const ::proto::Vector3& g_force() const;
  PROTOBUF_NODISCARD ::proto::Vector3* release_g_force();
  ::proto::Vector3* mutable_g_force();
  void set_allocated_g_force(::proto::Vector3* g_force);
  private:
  const ::proto::Vector3& _internal_g_force() const;
  ::proto::Vector3* _internal_mutable_g_force();
  public:
  void unsafe_arena_set_allocated_g_force(
      ::proto::Vector3* g_force);
  ::proto::Vector3* unsafe_arena_release_g_force();

  // .proto.Vector3 normal = 5;
  bool has_normal() const;
  private:
  bool _internal_has_normal() const;
  public:
  void clear_normal();
  const ::proto::Vector3& normal() const;
  PROTOBUF_NODISCARD ::proto::Vector3* release_normal();
  ::proto::Vector3* mutable_normal();
  void set_allocated_normal(::proto::Vector3* normal);
  private:
  const ::proto::Vector3& _internal_normal() const;
  ::proto::Vector3* _internal_mutable_normal();
  public:
  void unsafe_arena_set_allocated_normal(
      ::proto::Vector3* normal);
  ::proto::Vector3* unsafe_arena_release_normal();

  // .proto.SpecialEffectParameter special_effect_boost = 7;
  bool has_special_effect_boost() const;
  private:
  bool _internal_has_special_effect_boost() const;
  public:
  void clear_special_effect_boost();
  const ::proto::SpecialEffectParameter& special_effect_boost() const;
  PROTOBUF_NODISCARD ::proto::SpecialEffectParameter* release_special_effect_boost();
  ::proto::SpecialEffectParameter* mutable_special_effect_boost();
  void set_allocated_special_effect_boost(::proto::SpecialEffectParameter* special_effect_boost);
  private:
  const ::proto::SpecialEffectParameter& _internal_special_effect_boost() const;
  ::proto::SpecialEffectParameter* _internal_mutable_special_effect_boost();
  public:
  void unsafe_arena_set_allocated_special_effect_boost(
      ::proto::SpecialEffectParameter* special_effect_boost);
  ::proto::SpecialEffectParameter* unsafe_arena_release_special_effect_boost();

  // .proto.StatusEnum status_enum = 6;
  void clear_status_enum();
  ::proto::StatusEnum status_enum() const;
  void set_status_enum(::proto::StatusEnum value);
  private:
  ::proto::StatusEnum _internal_status_enum() const;
  void _internal_set_status_enum(::proto::StatusEnum value);
  public:

  // .proto.CharacterTypeEnum character_type = 8;
  void clear_character_type();
  ::proto::CharacterTypeEnum character_type() const;
  void set_character_type(::proto::CharacterTypeEnum value);
  private:
  ::proto::CharacterTypeEnum _internal_character_type() const;
  void _internal_set_character_type(::proto::CharacterTypeEnum value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Character)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::proto::Vector3* color_;
    ::proto::Physic* physic_;
    ::proto::Vector3* g_force_;
    ::proto::Vector3* normal_;
    ::proto::SpecialEffectParameter* special_effect_boost_;
    int status_enum_;
    int character_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_5fparameter_2eproto;
};
// -------------------------------------------------------------------

class ColorParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ColorParameter) */ {
 public:
  inline ColorParameter() : ColorParameter(nullptr) {}
  ~ColorParameter() override;
  explicit PROTOBUF_CONSTEXPR ColorParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColorParameter(const ColorParameter& from);
  ColorParameter(ColorParameter&& from) noexcept
    : ColorParameter() {
    *this = ::std::move(from);
  }

  inline ColorParameter& operator=(const ColorParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorParameter& operator=(ColorParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColorParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColorParameter* internal_default_instance() {
    return reinterpret_cast<const ColorParameter*>(
               &_ColorParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ColorParameter& a, ColorParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColorParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ColorParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ColorParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ColorParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ColorParameter& from) {
    ColorParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColorParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ColorParameter";
  }
  protected:
  explicit ColorParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kColorFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .proto.Vector3 color = 2;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::proto::Vector3& color() const;
  PROTOBUF_NODISCARD ::proto::Vector3* release_color();
  ::proto::Vector3* mutable_color();
  void set_allocated_color(::proto::Vector3* color);
  private:
  const ::proto::Vector3& _internal_color() const;
  ::proto::Vector3* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::proto::Vector3* color);
  ::proto::Vector3* unsafe_arena_release_color();

  // @@protoc_insertion_point(class_scope:proto.ColorParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::proto::Vector3* color_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_5fparameter_2eproto;
};
// -------------------------------------------------------------------

class PlayerParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.PlayerParameter) */ {
 public:
  inline PlayerParameter() : PlayerParameter(nullptr) {}
  ~PlayerParameter() override;
  explicit PROTOBUF_CONSTEXPR PlayerParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerParameter(const PlayerParameter& from);
  PlayerParameter(PlayerParameter&& from) noexcept
    : PlayerParameter() {
    *this = ::std::move(from);
  }

  inline PlayerParameter& operator=(const PlayerParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerParameter& operator=(PlayerParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerParameter* internal_default_instance() {
    return reinterpret_cast<const PlayerParameter*>(
               &_PlayerParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PlayerParameter& a, PlayerParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerParameter& from) {
    PlayerParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.PlayerParameter";
  }
  protected:
  explicit PlayerParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorParametersFieldNumber = 13,
    kSpecialEffectBoostFieldNumber = 14,
    kVerticalSpeedFieldNumber = 1,
    kHorizontalSpeedFieldNumber = 2,
    kBoostSpeedFieldNumber = 3,
    kStartMassFieldNumber = 4,
    kDropHeightFieldNumber = 5,
    kPenaltyFieldNumber = 6,
    kLivingCostFieldNumber = 7,
    kFrictionFieldNumber = 8,
    kVictorySizeFieldNumber = 9,
    kMaxUpgradeGrowFieldNumber = 10,
    kDisconnectionTimeoutFieldNumber = 11,
    kEatSpeedFieldNumber = 12,
  };
  // repeated .proto.ColorParameter color_parameters = 13;
  int color_parameters_size() const;
  private:
  int _internal_color_parameters_size() const;
  public:
  void clear_color_parameters();
  ::proto::ColorParameter* mutable_color_parameters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::ColorParameter >*
      mutable_color_parameters();
  private:
  const ::proto::ColorParameter& _internal_color_parameters(int index) const;
  ::proto::ColorParameter* _internal_add_color_parameters();
  public:
  const ::proto::ColorParameter& color_parameters(int index) const;
  ::proto::ColorParameter* add_color_parameters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::ColorParameter >&
      color_parameters() const;

  // .proto.SpecialEffectParameter special_effect_boost = 14;
  bool has_special_effect_boost() const;
  private:
  bool _internal_has_special_effect_boost() const;
  public:
  void clear_special_effect_boost();
  const ::proto::SpecialEffectParameter& special_effect_boost() const;
  PROTOBUF_NODISCARD ::proto::SpecialEffectParameter* release_special_effect_boost();
  ::proto::SpecialEffectParameter* mutable_special_effect_boost();
  void set_allocated_special_effect_boost(::proto::SpecialEffectParameter* special_effect_boost);
  private:
  const ::proto::SpecialEffectParameter& _internal_special_effect_boost() const;
  ::proto::SpecialEffectParameter* _internal_mutable_special_effect_boost();
  public:
  void unsafe_arena_set_allocated_special_effect_boost(
      ::proto::SpecialEffectParameter* special_effect_boost);
  ::proto::SpecialEffectParameter* unsafe_arena_release_special_effect_boost();

  // double vertical_speed = 1;
  void clear_vertical_speed();
  double vertical_speed() const;
  void set_vertical_speed(double value);
  private:
  double _internal_vertical_speed() const;
  void _internal_set_vertical_speed(double value);
  public:

  // double horizontal_speed = 2;
  void clear_horizontal_speed();
  double horizontal_speed() const;
  void set_horizontal_speed(double value);
  private:
  double _internal_horizontal_speed() const;
  void _internal_set_horizontal_speed(double value);
  public:

  // double boost_speed = 3;
  void clear_boost_speed();
  double boost_speed() const;
  void set_boost_speed(double value);
  private:
  double _internal_boost_speed() const;
  void _internal_set_boost_speed(double value);
  public:

  // double start_mass = 4;
  void clear_start_mass();
  double start_mass() const;
  void set_start_mass(double value);
  private:
  double _internal_start_mass() const;
  void _internal_set_start_mass(double value);
  public:

  // double drop_height = 5;
  void clear_drop_height();
  double drop_height() const;
  void set_drop_height(double value);
  private:
  double _internal_drop_height() const;
  void _internal_set_drop_height(double value);
  public:

  // double penalty = 6;
  void clear_penalty();
  double penalty() const;
  void set_penalty(double value);
  private:
  double _internal_penalty() const;
  void _internal_set_penalty(double value);
  public:

  // double living_cost = 7;
  void clear_living_cost();
  double living_cost() const;
  void set_living_cost(double value);
  private:
  double _internal_living_cost() const;
  void _internal_set_living_cost(double value);
  public:

  // double friction = 8;
  void clear_friction();
  double friction() const;
  void set_friction(double value);
  private:
  double _internal_friction() const;
  void _internal_set_friction(double value);
  public:

  // double victory_size = 9;
  void clear_victory_size();
  double victory_size() const;
  void set_victory_size(double value);
  private:
  double _internal_victory_size() const;
  void _internal_set_victory_size(double value);
  public:

  // double max_upgrade_grow = 10;
  void clear_max_upgrade_grow();
  double max_upgrade_grow() const;
  void set_max_upgrade_grow(double value);
  private:
  double _internal_max_upgrade_grow() const;
  void _internal_set_max_upgrade_grow(double value);
  public:

  // double disconnection_timeout = 11;
  void clear_disconnection_timeout();
  double disconnection_timeout() const;
  void set_disconnection_timeout(double value);
  private:
  double _internal_disconnection_timeout() const;
  void _internal_set_disconnection_timeout(double value);
  public:

  // double eat_speed = 12;
  void clear_eat_speed();
  double eat_speed() const;
  void set_eat_speed(double value);
  private:
  double _internal_eat_speed() const;
  void _internal_set_eat_speed(double value);
  public:

  // @@protoc_insertion_point(class_scope:proto.PlayerParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::ColorParameter > color_parameters_;
    ::proto::SpecialEffectParameter* special_effect_boost_;
    double vertical_speed_;
    double horizontal_speed_;
    double boost_speed_;
    double start_mass_;
    double drop_height_;
    double penalty_;
    double living_cost_;
    double friction_;
    double victory_size_;
    double max_upgrade_grow_;
    double disconnection_timeout_;
    double eat_speed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_5fparameter_2eproto;
};
// -------------------------------------------------------------------

class WorldDatabase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.WorldDatabase) */ {
 public:
  inline WorldDatabase() : WorldDatabase(nullptr) {}
  ~WorldDatabase() override;
  explicit PROTOBUF_CONSTEXPR WorldDatabase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorldDatabase(const WorldDatabase& from);
  WorldDatabase(WorldDatabase&& from) noexcept
    : WorldDatabase() {
    *this = ::std::move(from);
  }

  inline WorldDatabase& operator=(const WorldDatabase& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorldDatabase& operator=(WorldDatabase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorldDatabase& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorldDatabase* internal_default_instance() {
    return reinterpret_cast<const WorldDatabase*>(
               &_WorldDatabase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(WorldDatabase& a, WorldDatabase& b) {
    a.Swap(&b);
  }
  inline void Swap(WorldDatabase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorldDatabase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorldDatabase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorldDatabase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WorldDatabase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WorldDatabase& from) {
    WorldDatabase::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorldDatabase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.WorldDatabase";
  }
  protected:
  explicit WorldDatabase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementsFieldNumber = 1,
    kCharactersFieldNumber = 2,
    kPlayerParameterFieldNumber = 4,
    kTimeFieldNumber = 3,
  };
  // repeated .proto.Element elements = 1;
  int elements_size() const;
  private:
  int _internal_elements_size() const;
  public:
  void clear_elements();
  ::proto::Element* mutable_elements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Element >*
      mutable_elements();
  private:
  const ::proto::Element& _internal_elements(int index) const;
  ::proto::Element* _internal_add_elements();
  public:
  const ::proto::Element& elements(int index) const;
  ::proto::Element* add_elements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Element >&
      elements() const;

  // repeated .proto.Character characters = 2;
  int characters_size() const;
  private:
  int _internal_characters_size() const;
  public:
  void clear_characters();
  ::proto::Character* mutable_characters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Character >*
      mutable_characters();
  private:
  const ::proto::Character& _internal_characters(int index) const;
  ::proto::Character* _internal_add_characters();
  public:
  const ::proto::Character& characters(int index) const;
  ::proto::Character* add_characters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Character >&
      characters() const;

  // .proto.PlayerParameter player_parameter = 4;
  bool has_player_parameter() const;
  private:
  bool _internal_has_player_parameter() const;
  public:
  void clear_player_parameter();
  const ::proto::PlayerParameter& player_parameter() const;
  PROTOBUF_NODISCARD ::proto::PlayerParameter* release_player_parameter();
  ::proto::PlayerParameter* mutable_player_parameter();
  void set_allocated_player_parameter(::proto::PlayerParameter* player_parameter);
  private:
  const ::proto::PlayerParameter& _internal_player_parameter() const;
  ::proto::PlayerParameter* _internal_mutable_player_parameter();
  public:
  void unsafe_arena_set_allocated_player_parameter(
      ::proto::PlayerParameter* player_parameter);
  ::proto::PlayerParameter* unsafe_arena_release_player_parameter();

  // double time = 3;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:proto.WorldDatabase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Element > elements_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Character > characters_;
    ::proto::PlayerParameter* player_parameter_;
    double time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_5fparameter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SpecialEffectParameter

// .proto.SpecialStateEnum special_state_enum = 1;
inline void SpecialEffectParameter::clear_special_state_enum() {
  _impl_.special_state_enum_ = 0;
}
inline ::proto::SpecialStateEnum SpecialEffectParameter::_internal_special_state_enum() const {
  return static_cast< ::proto::SpecialStateEnum >(_impl_.special_state_enum_);
}
inline ::proto::SpecialStateEnum SpecialEffectParameter::special_state_enum() const {
  // @@protoc_insertion_point(field_get:proto.SpecialEffectParameter.special_state_enum)
  return _internal_special_state_enum();
}
inline void SpecialEffectParameter::_internal_set_special_state_enum(::proto::SpecialStateEnum value) {
  
  _impl_.special_state_enum_ = value;
}
inline void SpecialEffectParameter::set_special_state_enum(::proto::SpecialStateEnum value) {
  _internal_set_special_state_enum(value);
  // @@protoc_insertion_point(field_set:proto.SpecialEffectParameter.special_state_enum)
}

// double effect_duration = 2;
inline void SpecialEffectParameter::clear_effect_duration() {
  _impl_.effect_duration_ = 0;
}
inline double SpecialEffectParameter::_internal_effect_duration() const {
  return _impl_.effect_duration_;
}
inline double SpecialEffectParameter::effect_duration() const {
  // @@protoc_insertion_point(field_get:proto.SpecialEffectParameter.effect_duration)
  return _internal_effect_duration();
}
inline void SpecialEffectParameter::_internal_set_effect_duration(double value) {
  
  _impl_.effect_duration_ = value;
}
inline void SpecialEffectParameter::set_effect_duration(double value) {
  _internal_set_effect_duration(value);
  // @@protoc_insertion_point(field_set:proto.SpecialEffectParameter.effect_duration)
}

// double cooldown_duration = 3;
inline void SpecialEffectParameter::clear_cooldown_duration() {
  _impl_.cooldown_duration_ = 0;
}
inline double SpecialEffectParameter::_internal_cooldown_duration() const {
  return _impl_.cooldown_duration_;
}
inline double SpecialEffectParameter::cooldown_duration() const {
  // @@protoc_insertion_point(field_get:proto.SpecialEffectParameter.cooldown_duration)
  return _internal_cooldown_duration();
}
inline void SpecialEffectParameter::_internal_set_cooldown_duration(double value) {
  
  _impl_.cooldown_duration_ = value;
}
inline void SpecialEffectParameter::set_cooldown_duration(double value) {
  _internal_set_cooldown_duration(value);
  // @@protoc_insertion_point(field_set:proto.SpecialEffectParameter.cooldown_duration)
}

// double counter = 4;
inline void SpecialEffectParameter::clear_counter() {
  _impl_.counter_ = 0;
}
inline double SpecialEffectParameter::_internal_counter() const {
  return _impl_.counter_;
}
inline double SpecialEffectParameter::counter() const {
  // @@protoc_insertion_point(field_get:proto.SpecialEffectParameter.counter)
  return _internal_counter();
}
inline void SpecialEffectParameter::_internal_set_counter(double value) {
  
  _impl_.counter_ = value;
}
inline void SpecialEffectParameter::set_counter(double value) {
  _internal_set_counter(value);
  // @@protoc_insertion_point(field_set:proto.SpecialEffectParameter.counter)
}

// -------------------------------------------------------------------

// Physic

// double radius = 1;
inline void Physic::clear_radius() {
  _impl_.radius_ = 0;
}
inline double Physic::_internal_radius() const {
  return _impl_.radius_;
}
inline double Physic::radius() const {
  // @@protoc_insertion_point(field_get:proto.Physic.radius)
  return _internal_radius();
}
inline void Physic::_internal_set_radius(double value) {
  
  _impl_.radius_ = value;
}
inline void Physic::set_radius(double value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:proto.Physic.radius)
}

// double mass = 2;
inline void Physic::clear_mass() {
  _impl_.mass_ = 0;
}
inline double Physic::_internal_mass() const {
  return _impl_.mass_;
}
inline double Physic::mass() const {
  // @@protoc_insertion_point(field_get:proto.Physic.mass)
  return _internal_mass();
}
inline void Physic::_internal_set_mass(double value) {
  
  _impl_.mass_ = value;
}
inline void Physic::set_mass(double value) {
  _internal_set_mass(value);
  // @@protoc_insertion_point(field_set:proto.Physic.mass)
}

// .proto.Vector3 position = 3;
inline bool Physic::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool Physic::has_position() const {
  return _internal_has_position();
}
inline const ::proto::Vector3& Physic::_internal_position() const {
  const ::proto::Vector3* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Vector3&>(
      ::proto::_Vector3_default_instance_);
}
inline const ::proto::Vector3& Physic::position() const {
  // @@protoc_insertion_point(field_get:proto.Physic.position)
  return _internal_position();
}
inline void Physic::unsafe_arena_set_allocated_position(
    ::proto::Vector3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Physic.position)
}
inline ::proto::Vector3* Physic::release_position() {
  
  ::proto::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Vector3* Physic::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:proto.Physic.position)
  
  ::proto::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::proto::Vector3* Physic::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Vector3>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::proto::Vector3* Physic::mutable_position() {
  ::proto::Vector3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:proto.Physic.position)
  return _msg;
}
inline void Physic::set_allocated_position(::proto::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:proto.Physic.position)
}

// .proto.Vector3 position_dt = 5;
inline bool Physic::_internal_has_position_dt() const {
  return this != internal_default_instance() && _impl_.position_dt_ != nullptr;
}
inline bool Physic::has_position_dt() const {
  return _internal_has_position_dt();
}
inline const ::proto::Vector3& Physic::_internal_position_dt() const {
  const ::proto::Vector3* p = _impl_.position_dt_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Vector3&>(
      ::proto::_Vector3_default_instance_);
}
inline const ::proto::Vector3& Physic::position_dt() const {
  // @@protoc_insertion_point(field_get:proto.Physic.position_dt)
  return _internal_position_dt();
}
inline void Physic::unsafe_arena_set_allocated_position_dt(
    ::proto::Vector3* position_dt) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_dt_);
  }
  _impl_.position_dt_ = position_dt;
  if (position_dt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Physic.position_dt)
}
inline ::proto::Vector3* Physic::release_position_dt() {
  
  ::proto::Vector3* temp = _impl_.position_dt_;
  _impl_.position_dt_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Vector3* Physic::unsafe_arena_release_position_dt() {
  // @@protoc_insertion_point(field_release:proto.Physic.position_dt)
  
  ::proto::Vector3* temp = _impl_.position_dt_;
  _impl_.position_dt_ = nullptr;
  return temp;
}
inline ::proto::Vector3* Physic::_internal_mutable_position_dt() {
  
  if (_impl_.position_dt_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Vector3>(GetArenaForAllocation());
    _impl_.position_dt_ = p;
  }
  return _impl_.position_dt_;
}
inline ::proto::Vector3* Physic::mutable_position_dt() {
  ::proto::Vector3* _msg = _internal_mutable_position_dt();
  // @@protoc_insertion_point(field_mutable:proto.Physic.position_dt)
  return _msg;
}
inline void Physic::set_allocated_position_dt(::proto::Vector3* position_dt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_dt_);
  }
  if (position_dt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_dt));
    if (message_arena != submessage_arena) {
      position_dt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position_dt, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_dt_ = position_dt;
  // @@protoc_insertion_point(field_set_allocated:proto.Physic.position_dt)
}

// .proto.Vector4 orientation = 4;
inline bool Physic::_internal_has_orientation() const {
  return this != internal_default_instance() && _impl_.orientation_ != nullptr;
}
inline bool Physic::has_orientation() const {
  return _internal_has_orientation();
}
inline const ::proto::Vector4& Physic::_internal_orientation() const {
  const ::proto::Vector4* p = _impl_.orientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Vector4&>(
      ::proto::_Vector4_default_instance_);
}
inline const ::proto::Vector4& Physic::orientation() const {
  // @@protoc_insertion_point(field_get:proto.Physic.orientation)
  return _internal_orientation();
}
inline void Physic::unsafe_arena_set_allocated_orientation(
    ::proto::Vector4* orientation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.orientation_);
  }
  _impl_.orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Physic.orientation)
}
inline ::proto::Vector4* Physic::release_orientation() {
  
  ::proto::Vector4* temp = _impl_.orientation_;
  _impl_.orientation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Vector4* Physic::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:proto.Physic.orientation)
  
  ::proto::Vector4* temp = _impl_.orientation_;
  _impl_.orientation_ = nullptr;
  return temp;
}
inline ::proto::Vector4* Physic::_internal_mutable_orientation() {
  
  if (_impl_.orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Vector4>(GetArenaForAllocation());
    _impl_.orientation_ = p;
  }
  return _impl_.orientation_;
}
inline ::proto::Vector4* Physic::mutable_orientation() {
  ::proto::Vector4* _msg = _internal_mutable_orientation();
  // @@protoc_insertion_point(field_mutable:proto.Physic.orientation)
  return _msg;
}
inline void Physic::set_allocated_orientation(::proto::Vector4* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.orientation_);
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation));
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:proto.Physic.orientation)
}

// .proto.Vector4 orientation_dt = 6;
inline bool Physic::_internal_has_orientation_dt() const {
  return this != internal_default_instance() && _impl_.orientation_dt_ != nullptr;
}
inline bool Physic::has_orientation_dt() const {
  return _internal_has_orientation_dt();
}
inline const ::proto::Vector4& Physic::_internal_orientation_dt() const {
  const ::proto::Vector4* p = _impl_.orientation_dt_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Vector4&>(
      ::proto::_Vector4_default_instance_);
}
inline const ::proto::Vector4& Physic::orientation_dt() const {
  // @@protoc_insertion_point(field_get:proto.Physic.orientation_dt)
  return _internal_orientation_dt();
}
inline void Physic::unsafe_arena_set_allocated_orientation_dt(
    ::proto::Vector4* orientation_dt) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.orientation_dt_);
  }
  _impl_.orientation_dt_ = orientation_dt;
  if (orientation_dt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Physic.orientation_dt)
}
inline ::proto::Vector4* Physic::release_orientation_dt() {
  
  ::proto::Vector4* temp = _impl_.orientation_dt_;
  _impl_.orientation_dt_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Vector4* Physic::unsafe_arena_release_orientation_dt() {
  // @@protoc_insertion_point(field_release:proto.Physic.orientation_dt)
  
  ::proto::Vector4* temp = _impl_.orientation_dt_;
  _impl_.orientation_dt_ = nullptr;
  return temp;
}
inline ::proto::Vector4* Physic::_internal_mutable_orientation_dt() {
  
  if (_impl_.orientation_dt_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Vector4>(GetArenaForAllocation());
    _impl_.orientation_dt_ = p;
  }
  return _impl_.orientation_dt_;
}
inline ::proto::Vector4* Physic::mutable_orientation_dt() {
  ::proto::Vector4* _msg = _internal_mutable_orientation_dt();
  // @@protoc_insertion_point(field_mutable:proto.Physic.orientation_dt)
  return _msg;
}
inline void Physic::set_allocated_orientation_dt(::proto::Vector4* orientation_dt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.orientation_dt_);
  }
  if (orientation_dt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_dt));
    if (message_arena != submessage_arena) {
      orientation_dt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation_dt, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.orientation_dt_ = orientation_dt;
  // @@protoc_insertion_point(field_set_allocated:proto.Physic.orientation_dt)
}

// -------------------------------------------------------------------

// Element

// string name = 1;
inline void Element::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Element::name() const {
  // @@protoc_insertion_point(field_get:proto.Element.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Element::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.Element.name)
}
inline std::string* Element::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto.Element.name)
  return _s;
}
inline const std::string& Element::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Element::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Element::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Element::release_name() {
  // @@protoc_insertion_point(field_release:proto.Element.name)
  return _impl_.name_.Release();
}
inline void Element::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.Element.name)
}

// .proto.Vector3 color = 2;
inline bool Element::_internal_has_color() const {
  return this != internal_default_instance() && _impl_.color_ != nullptr;
}
inline bool Element::has_color() const {
  return _internal_has_color();
}
inline const ::proto::Vector3& Element::_internal_color() const {
  const ::proto::Vector3* p = _impl_.color_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Vector3&>(
      ::proto::_Vector3_default_instance_);
}
inline const ::proto::Vector3& Element::color() const {
  // @@protoc_insertion_point(field_get:proto.Element.color)
  return _internal_color();
}
inline void Element::unsafe_arena_set_allocated_color(
    ::proto::Vector3* color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.color_);
  }
  _impl_.color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Element.color)
}
inline ::proto::Vector3* Element::release_color() {
  
  ::proto::Vector3* temp = _impl_.color_;
  _impl_.color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Vector3* Element::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_release:proto.Element.color)
  
  ::proto::Vector3* temp = _impl_.color_;
  _impl_.color_ = nullptr;
  return temp;
}
inline ::proto::Vector3* Element::_internal_mutable_color() {
  
  if (_impl_.color_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Vector3>(GetArenaForAllocation());
    _impl_.color_ = p;
  }
  return _impl_.color_;
}
inline ::proto::Vector3* Element::mutable_color() {
  ::proto::Vector3* _msg = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:proto.Element.color)
  return _msg;
}
inline void Element::set_allocated_color(::proto::Vector3* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.color_);
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color));
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.color_ = color;
  // @@protoc_insertion_point(field_set_allocated:proto.Element.color)
}

// .proto.Physic physic = 3;
inline bool Element::_internal_has_physic() const {
  return this != internal_default_instance() && _impl_.physic_ != nullptr;
}
inline bool Element::has_physic() const {
  return _internal_has_physic();
}
inline void Element::clear_physic() {
  if (GetArenaForAllocation() == nullptr && _impl_.physic_ != nullptr) {
    delete _impl_.physic_;
  }
  _impl_.physic_ = nullptr;
}
inline const ::proto::Physic& Element::_internal_physic() const {
  const ::proto::Physic* p = _impl_.physic_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Physic&>(
      ::proto::_Physic_default_instance_);
}
inline const ::proto::Physic& Element::physic() const {
  // @@protoc_insertion_point(field_get:proto.Element.physic)
  return _internal_physic();
}
inline void Element::unsafe_arena_set_allocated_physic(
    ::proto::Physic* physic) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.physic_);
  }
  _impl_.physic_ = physic;
  if (physic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Element.physic)
}
inline ::proto::Physic* Element::release_physic() {
  
  ::proto::Physic* temp = _impl_.physic_;
  _impl_.physic_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Physic* Element::unsafe_arena_release_physic() {
  // @@protoc_insertion_point(field_release:proto.Element.physic)
  
  ::proto::Physic* temp = _impl_.physic_;
  _impl_.physic_ = nullptr;
  return temp;
}
inline ::proto::Physic* Element::_internal_mutable_physic() {
  
  if (_impl_.physic_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Physic>(GetArenaForAllocation());
    _impl_.physic_ = p;
  }
  return _impl_.physic_;
}
inline ::proto::Physic* Element::mutable_physic() {
  ::proto::Physic* _msg = _internal_mutable_physic();
  // @@protoc_insertion_point(field_mutable:proto.Element.physic)
  return _msg;
}
inline void Element::set_allocated_physic(::proto::Physic* physic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.physic_;
  }
  if (physic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(physic);
    if (message_arena != submessage_arena) {
      physic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, physic, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.physic_ = physic;
  // @@protoc_insertion_point(field_set_allocated:proto.Element.physic)
}

// .proto.TypeEnum type_enum = 4;
inline void Element::clear_type_enum() {
  _impl_.type_enum_ = 0;
}
inline ::proto::TypeEnum Element::_internal_type_enum() const {
  return static_cast< ::proto::TypeEnum >(_impl_.type_enum_);
}
inline ::proto::TypeEnum Element::type_enum() const {
  // @@protoc_insertion_point(field_get:proto.Element.type_enum)
  return _internal_type_enum();
}
inline void Element::_internal_set_type_enum(::proto::TypeEnum value) {
  
  _impl_.type_enum_ = value;
}
inline void Element::set_type_enum(::proto::TypeEnum value) {
  _internal_set_type_enum(value);
  // @@protoc_insertion_point(field_set:proto.Element.type_enum)
}

// -------------------------------------------------------------------

// Character

// string name = 1;
inline void Character::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Character::name() const {
  // @@protoc_insertion_point(field_get:proto.Character.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Character::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.Character.name)
}
inline std::string* Character::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto.Character.name)
  return _s;
}
inline const std::string& Character::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Character::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Character::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Character::release_name() {
  // @@protoc_insertion_point(field_release:proto.Character.name)
  return _impl_.name_.Release();
}
inline void Character::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.Character.name)
}

// .proto.Vector3 color = 2;
inline bool Character::_internal_has_color() const {
  return this != internal_default_instance() && _impl_.color_ != nullptr;
}
inline bool Character::has_color() const {
  return _internal_has_color();
}
inline const ::proto::Vector3& Character::_internal_color() const {
  const ::proto::Vector3* p = _impl_.color_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Vector3&>(
      ::proto::_Vector3_default_instance_);
}
inline const ::proto::Vector3& Character::color() const {
  // @@protoc_insertion_point(field_get:proto.Character.color)
  return _internal_color();
}
inline void Character::unsafe_arena_set_allocated_color(
    ::proto::Vector3* color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.color_);
  }
  _impl_.color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Character.color)
}
inline ::proto::Vector3* Character::release_color() {
  
  ::proto::Vector3* temp = _impl_.color_;
  _impl_.color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Vector3* Character::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_release:proto.Character.color)
  
  ::proto::Vector3* temp = _impl_.color_;
  _impl_.color_ = nullptr;
  return temp;
}
inline ::proto::Vector3* Character::_internal_mutable_color() {
  
  if (_impl_.color_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Vector3>(GetArenaForAllocation());
    _impl_.color_ = p;
  }
  return _impl_.color_;
}
inline ::proto::Vector3* Character::mutable_color() {
  ::proto::Vector3* _msg = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:proto.Character.color)
  return _msg;
}
inline void Character::set_allocated_color(::proto::Vector3* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.color_);
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color));
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.color_ = color;
  // @@protoc_insertion_point(field_set_allocated:proto.Character.color)
}

// .proto.Physic physic = 3;
inline bool Character::_internal_has_physic() const {
  return this != internal_default_instance() && _impl_.physic_ != nullptr;
}
inline bool Character::has_physic() const {
  return _internal_has_physic();
}
inline void Character::clear_physic() {
  if (GetArenaForAllocation() == nullptr && _impl_.physic_ != nullptr) {
    delete _impl_.physic_;
  }
  _impl_.physic_ = nullptr;
}
inline const ::proto::Physic& Character::_internal_physic() const {
  const ::proto::Physic* p = _impl_.physic_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Physic&>(
      ::proto::_Physic_default_instance_);
}
inline const ::proto::Physic& Character::physic() const {
  // @@protoc_insertion_point(field_get:proto.Character.physic)
  return _internal_physic();
}
inline void Character::unsafe_arena_set_allocated_physic(
    ::proto::Physic* physic) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.physic_);
  }
  _impl_.physic_ = physic;
  if (physic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Character.physic)
}
inline ::proto::Physic* Character::release_physic() {
  
  ::proto::Physic* temp = _impl_.physic_;
  _impl_.physic_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Physic* Character::unsafe_arena_release_physic() {
  // @@protoc_insertion_point(field_release:proto.Character.physic)
  
  ::proto::Physic* temp = _impl_.physic_;
  _impl_.physic_ = nullptr;
  return temp;
}
inline ::proto::Physic* Character::_internal_mutable_physic() {
  
  if (_impl_.physic_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Physic>(GetArenaForAllocation());
    _impl_.physic_ = p;
  }
  return _impl_.physic_;
}
inline ::proto::Physic* Character::mutable_physic() {
  ::proto::Physic* _msg = _internal_mutable_physic();
  // @@protoc_insertion_point(field_mutable:proto.Character.physic)
  return _msg;
}
inline void Character::set_allocated_physic(::proto::Physic* physic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.physic_;
  }
  if (physic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(physic);
    if (message_arena != submessage_arena) {
      physic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, physic, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.physic_ = physic;
  // @@protoc_insertion_point(field_set_allocated:proto.Character.physic)
}

// .proto.Vector3 g_force = 4;
inline bool Character::_internal_has_g_force() const {
  return this != internal_default_instance() && _impl_.g_force_ != nullptr;
}
inline bool Character::has_g_force() const {
  return _internal_has_g_force();
}
inline const ::proto::Vector3& Character::_internal_g_force() const {
  const ::proto::Vector3* p = _impl_.g_force_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Vector3&>(
      ::proto::_Vector3_default_instance_);
}
inline const ::proto::Vector3& Character::g_force() const {
  // @@protoc_insertion_point(field_get:proto.Character.g_force)
  return _internal_g_force();
}
inline void Character::unsafe_arena_set_allocated_g_force(
    ::proto::Vector3* g_force) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.g_force_);
  }
  _impl_.g_force_ = g_force;
  if (g_force) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Character.g_force)
}
inline ::proto::Vector3* Character::release_g_force() {
  
  ::proto::Vector3* temp = _impl_.g_force_;
  _impl_.g_force_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Vector3* Character::unsafe_arena_release_g_force() {
  // @@protoc_insertion_point(field_release:proto.Character.g_force)
  
  ::proto::Vector3* temp = _impl_.g_force_;
  _impl_.g_force_ = nullptr;
  return temp;
}
inline ::proto::Vector3* Character::_internal_mutable_g_force() {
  
  if (_impl_.g_force_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Vector3>(GetArenaForAllocation());
    _impl_.g_force_ = p;
  }
  return _impl_.g_force_;
}
inline ::proto::Vector3* Character::mutable_g_force() {
  ::proto::Vector3* _msg = _internal_mutable_g_force();
  // @@protoc_insertion_point(field_mutable:proto.Character.g_force)
  return _msg;
}
inline void Character::set_allocated_g_force(::proto::Vector3* g_force) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.g_force_);
  }
  if (g_force) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(g_force));
    if (message_arena != submessage_arena) {
      g_force = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, g_force, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.g_force_ = g_force;
  // @@protoc_insertion_point(field_set_allocated:proto.Character.g_force)
}

// .proto.Vector3 normal = 5;
inline bool Character::_internal_has_normal() const {
  return this != internal_default_instance() && _impl_.normal_ != nullptr;
}
inline bool Character::has_normal() const {
  return _internal_has_normal();
}
inline const ::proto::Vector3& Character::_internal_normal() const {
  const ::proto::Vector3* p = _impl_.normal_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Vector3&>(
      ::proto::_Vector3_default_instance_);
}
inline const ::proto::Vector3& Character::normal() const {
  // @@protoc_insertion_point(field_get:proto.Character.normal)
  return _internal_normal();
}
inline void Character::unsafe_arena_set_allocated_normal(
    ::proto::Vector3* normal) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.normal_);
  }
  _impl_.normal_ = normal;
  if (normal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Character.normal)
}
inline ::proto::Vector3* Character::release_normal() {
  
  ::proto::Vector3* temp = _impl_.normal_;
  _impl_.normal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Vector3* Character::unsafe_arena_release_normal() {
  // @@protoc_insertion_point(field_release:proto.Character.normal)
  
  ::proto::Vector3* temp = _impl_.normal_;
  _impl_.normal_ = nullptr;
  return temp;
}
inline ::proto::Vector3* Character::_internal_mutable_normal() {
  
  if (_impl_.normal_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Vector3>(GetArenaForAllocation());
    _impl_.normal_ = p;
  }
  return _impl_.normal_;
}
inline ::proto::Vector3* Character::mutable_normal() {
  ::proto::Vector3* _msg = _internal_mutable_normal();
  // @@protoc_insertion_point(field_mutable:proto.Character.normal)
  return _msg;
}
inline void Character::set_allocated_normal(::proto::Vector3* normal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.normal_);
  }
  if (normal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(normal));
    if (message_arena != submessage_arena) {
      normal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, normal, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.normal_ = normal;
  // @@protoc_insertion_point(field_set_allocated:proto.Character.normal)
}

// .proto.StatusEnum status_enum = 6;
inline void Character::clear_status_enum() {
  _impl_.status_enum_ = 0;
}
inline ::proto::StatusEnum Character::_internal_status_enum() const {
  return static_cast< ::proto::StatusEnum >(_impl_.status_enum_);
}
inline ::proto::StatusEnum Character::status_enum() const {
  // @@protoc_insertion_point(field_get:proto.Character.status_enum)
  return _internal_status_enum();
}
inline void Character::_internal_set_status_enum(::proto::StatusEnum value) {
  
  _impl_.status_enum_ = value;
}
inline void Character::set_status_enum(::proto::StatusEnum value) {
  _internal_set_status_enum(value);
  // @@protoc_insertion_point(field_set:proto.Character.status_enum)
}

// .proto.SpecialEffectParameter special_effect_boost = 7;
inline bool Character::_internal_has_special_effect_boost() const {
  return this != internal_default_instance() && _impl_.special_effect_boost_ != nullptr;
}
inline bool Character::has_special_effect_boost() const {
  return _internal_has_special_effect_boost();
}
inline void Character::clear_special_effect_boost() {
  if (GetArenaForAllocation() == nullptr && _impl_.special_effect_boost_ != nullptr) {
    delete _impl_.special_effect_boost_;
  }
  _impl_.special_effect_boost_ = nullptr;
}
inline const ::proto::SpecialEffectParameter& Character::_internal_special_effect_boost() const {
  const ::proto::SpecialEffectParameter* p = _impl_.special_effect_boost_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SpecialEffectParameter&>(
      ::proto::_SpecialEffectParameter_default_instance_);
}
inline const ::proto::SpecialEffectParameter& Character::special_effect_boost() const {
  // @@protoc_insertion_point(field_get:proto.Character.special_effect_boost)
  return _internal_special_effect_boost();
}
inline void Character::unsafe_arena_set_allocated_special_effect_boost(
    ::proto::SpecialEffectParameter* special_effect_boost) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.special_effect_boost_);
  }
  _impl_.special_effect_boost_ = special_effect_boost;
  if (special_effect_boost) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Character.special_effect_boost)
}
inline ::proto::SpecialEffectParameter* Character::release_special_effect_boost() {
  
  ::proto::SpecialEffectParameter* temp = _impl_.special_effect_boost_;
  _impl_.special_effect_boost_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SpecialEffectParameter* Character::unsafe_arena_release_special_effect_boost() {
  // @@protoc_insertion_point(field_release:proto.Character.special_effect_boost)
  
  ::proto::SpecialEffectParameter* temp = _impl_.special_effect_boost_;
  _impl_.special_effect_boost_ = nullptr;
  return temp;
}
inline ::proto::SpecialEffectParameter* Character::_internal_mutable_special_effect_boost() {
  
  if (_impl_.special_effect_boost_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SpecialEffectParameter>(GetArenaForAllocation());
    _impl_.special_effect_boost_ = p;
  }
  return _impl_.special_effect_boost_;
}
inline ::proto::SpecialEffectParameter* Character::mutable_special_effect_boost() {
  ::proto::SpecialEffectParameter* _msg = _internal_mutable_special_effect_boost();
  // @@protoc_insertion_point(field_mutable:proto.Character.special_effect_boost)
  return _msg;
}
inline void Character::set_allocated_special_effect_boost(::proto::SpecialEffectParameter* special_effect_boost) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.special_effect_boost_;
  }
  if (special_effect_boost) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(special_effect_boost);
    if (message_arena != submessage_arena) {
      special_effect_boost = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, special_effect_boost, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.special_effect_boost_ = special_effect_boost;
  // @@protoc_insertion_point(field_set_allocated:proto.Character.special_effect_boost)
}

// .proto.CharacterTypeEnum character_type = 8;
inline void Character::clear_character_type() {
  _impl_.character_type_ = 0;
}
inline ::proto::CharacterTypeEnum Character::_internal_character_type() const {
  return static_cast< ::proto::CharacterTypeEnum >(_impl_.character_type_);
}
inline ::proto::CharacterTypeEnum Character::character_type() const {
  // @@protoc_insertion_point(field_get:proto.Character.character_type)
  return _internal_character_type();
}
inline void Character::_internal_set_character_type(::proto::CharacterTypeEnum value) {
  
  _impl_.character_type_ = value;
}
inline void Character::set_character_type(::proto::CharacterTypeEnum value) {
  _internal_set_character_type(value);
  // @@protoc_insertion_point(field_set:proto.Character.character_type)
}

// -------------------------------------------------------------------

// ColorParameter

// string name = 1;
inline void ColorParameter::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ColorParameter::name() const {
  // @@protoc_insertion_point(field_get:proto.ColorParameter.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ColorParameter::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ColorParameter.name)
}
inline std::string* ColorParameter::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto.ColorParameter.name)
  return _s;
}
inline const std::string& ColorParameter::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ColorParameter::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ColorParameter::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ColorParameter::release_name() {
  // @@protoc_insertion_point(field_release:proto.ColorParameter.name)
  return _impl_.name_.Release();
}
inline void ColorParameter::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.ColorParameter.name)
}

// .proto.Vector3 color = 2;
inline bool ColorParameter::_internal_has_color() const {
  return this != internal_default_instance() && _impl_.color_ != nullptr;
}
inline bool ColorParameter::has_color() const {
  return _internal_has_color();
}
inline const ::proto::Vector3& ColorParameter::_internal_color() const {
  const ::proto::Vector3* p = _impl_.color_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Vector3&>(
      ::proto::_Vector3_default_instance_);
}
inline const ::proto::Vector3& ColorParameter::color() const {
  // @@protoc_insertion_point(field_get:proto.ColorParameter.color)
  return _internal_color();
}
inline void ColorParameter::unsafe_arena_set_allocated_color(
    ::proto::Vector3* color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.color_);
  }
  _impl_.color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ColorParameter.color)
}
inline ::proto::Vector3* ColorParameter::release_color() {
  
  ::proto::Vector3* temp = _impl_.color_;
  _impl_.color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Vector3* ColorParameter::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_release:proto.ColorParameter.color)
  
  ::proto::Vector3* temp = _impl_.color_;
  _impl_.color_ = nullptr;
  return temp;
}
inline ::proto::Vector3* ColorParameter::_internal_mutable_color() {
  
  if (_impl_.color_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Vector3>(GetArenaForAllocation());
    _impl_.color_ = p;
  }
  return _impl_.color_;
}
inline ::proto::Vector3* ColorParameter::mutable_color() {
  ::proto::Vector3* _msg = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:proto.ColorParameter.color)
  return _msg;
}
inline void ColorParameter::set_allocated_color(::proto::Vector3* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.color_);
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color));
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.color_ = color;
  // @@protoc_insertion_point(field_set_allocated:proto.ColorParameter.color)
}

// -------------------------------------------------------------------

// PlayerParameter

// double vertical_speed = 1;
inline void PlayerParameter::clear_vertical_speed() {
  _impl_.vertical_speed_ = 0;
}
inline double PlayerParameter::_internal_vertical_speed() const {
  return _impl_.vertical_speed_;
}
inline double PlayerParameter::vertical_speed() const {
  // @@protoc_insertion_point(field_get:proto.PlayerParameter.vertical_speed)
  return _internal_vertical_speed();
}
inline void PlayerParameter::_internal_set_vertical_speed(double value) {
  
  _impl_.vertical_speed_ = value;
}
inline void PlayerParameter::set_vertical_speed(double value) {
  _internal_set_vertical_speed(value);
  // @@protoc_insertion_point(field_set:proto.PlayerParameter.vertical_speed)
}

// double horizontal_speed = 2;
inline void PlayerParameter::clear_horizontal_speed() {
  _impl_.horizontal_speed_ = 0;
}
inline double PlayerParameter::_internal_horizontal_speed() const {
  return _impl_.horizontal_speed_;
}
inline double PlayerParameter::horizontal_speed() const {
  // @@protoc_insertion_point(field_get:proto.PlayerParameter.horizontal_speed)
  return _internal_horizontal_speed();
}
inline void PlayerParameter::_internal_set_horizontal_speed(double value) {
  
  _impl_.horizontal_speed_ = value;
}
inline void PlayerParameter::set_horizontal_speed(double value) {
  _internal_set_horizontal_speed(value);
  // @@protoc_insertion_point(field_set:proto.PlayerParameter.horizontal_speed)
}

// double boost_speed = 3;
inline void PlayerParameter::clear_boost_speed() {
  _impl_.boost_speed_ = 0;
}
inline double PlayerParameter::_internal_boost_speed() const {
  return _impl_.boost_speed_;
}
inline double PlayerParameter::boost_speed() const {
  // @@protoc_insertion_point(field_get:proto.PlayerParameter.boost_speed)
  return _internal_boost_speed();
}
inline void PlayerParameter::_internal_set_boost_speed(double value) {
  
  _impl_.boost_speed_ = value;
}
inline void PlayerParameter::set_boost_speed(double value) {
  _internal_set_boost_speed(value);
  // @@protoc_insertion_point(field_set:proto.PlayerParameter.boost_speed)
}

// double start_mass = 4;
inline void PlayerParameter::clear_start_mass() {
  _impl_.start_mass_ = 0;
}
inline double PlayerParameter::_internal_start_mass() const {
  return _impl_.start_mass_;
}
inline double PlayerParameter::start_mass() const {
  // @@protoc_insertion_point(field_get:proto.PlayerParameter.start_mass)
  return _internal_start_mass();
}
inline void PlayerParameter::_internal_set_start_mass(double value) {
  
  _impl_.start_mass_ = value;
}
inline void PlayerParameter::set_start_mass(double value) {
  _internal_set_start_mass(value);
  // @@protoc_insertion_point(field_set:proto.PlayerParameter.start_mass)
}

// double drop_height = 5;
inline void PlayerParameter::clear_drop_height() {
  _impl_.drop_height_ = 0;
}
inline double PlayerParameter::_internal_drop_height() const {
  return _impl_.drop_height_;
}
inline double PlayerParameter::drop_height() const {
  // @@protoc_insertion_point(field_get:proto.PlayerParameter.drop_height)
  return _internal_drop_height();
}
inline void PlayerParameter::_internal_set_drop_height(double value) {
  
  _impl_.drop_height_ = value;
}
inline void PlayerParameter::set_drop_height(double value) {
  _internal_set_drop_height(value);
  // @@protoc_insertion_point(field_set:proto.PlayerParameter.drop_height)
}

// double penalty = 6;
inline void PlayerParameter::clear_penalty() {
  _impl_.penalty_ = 0;
}
inline double PlayerParameter::_internal_penalty() const {
  return _impl_.penalty_;
}
inline double PlayerParameter::penalty() const {
  // @@protoc_insertion_point(field_get:proto.PlayerParameter.penalty)
  return _internal_penalty();
}
inline void PlayerParameter::_internal_set_penalty(double value) {
  
  _impl_.penalty_ = value;
}
inline void PlayerParameter::set_penalty(double value) {
  _internal_set_penalty(value);
  // @@protoc_insertion_point(field_set:proto.PlayerParameter.penalty)
}

// double living_cost = 7;
inline void PlayerParameter::clear_living_cost() {
  _impl_.living_cost_ = 0;
}
inline double PlayerParameter::_internal_living_cost() const {
  return _impl_.living_cost_;
}
inline double PlayerParameter::living_cost() const {
  // @@protoc_insertion_point(field_get:proto.PlayerParameter.living_cost)
  return _internal_living_cost();
}
inline void PlayerParameter::_internal_set_living_cost(double value) {
  
  _impl_.living_cost_ = value;
}
inline void PlayerParameter::set_living_cost(double value) {
  _internal_set_living_cost(value);
  // @@protoc_insertion_point(field_set:proto.PlayerParameter.living_cost)
}

// double friction = 8;
inline void PlayerParameter::clear_friction() {
  _impl_.friction_ = 0;
}
inline double PlayerParameter::_internal_friction() const {
  return _impl_.friction_;
}
inline double PlayerParameter::friction() const {
  // @@protoc_insertion_point(field_get:proto.PlayerParameter.friction)
  return _internal_friction();
}
inline void PlayerParameter::_internal_set_friction(double value) {
  
  _impl_.friction_ = value;
}
inline void PlayerParameter::set_friction(double value) {
  _internal_set_friction(value);
  // @@protoc_insertion_point(field_set:proto.PlayerParameter.friction)
}

// double victory_size = 9;
inline void PlayerParameter::clear_victory_size() {
  _impl_.victory_size_ = 0;
}
inline double PlayerParameter::_internal_victory_size() const {
  return _impl_.victory_size_;
}
inline double PlayerParameter::victory_size() const {
  // @@protoc_insertion_point(field_get:proto.PlayerParameter.victory_size)
  return _internal_victory_size();
}
inline void PlayerParameter::_internal_set_victory_size(double value) {
  
  _impl_.victory_size_ = value;
}
inline void PlayerParameter::set_victory_size(double value) {
  _internal_set_victory_size(value);
  // @@protoc_insertion_point(field_set:proto.PlayerParameter.victory_size)
}

// double max_upgrade_grow = 10;
inline void PlayerParameter::clear_max_upgrade_grow() {
  _impl_.max_upgrade_grow_ = 0;
}
inline double PlayerParameter::_internal_max_upgrade_grow() const {
  return _impl_.max_upgrade_grow_;
}
inline double PlayerParameter::max_upgrade_grow() const {
  // @@protoc_insertion_point(field_get:proto.PlayerParameter.max_upgrade_grow)
  return _internal_max_upgrade_grow();
}
inline void PlayerParameter::_internal_set_max_upgrade_grow(double value) {
  
  _impl_.max_upgrade_grow_ = value;
}
inline void PlayerParameter::set_max_upgrade_grow(double value) {
  _internal_set_max_upgrade_grow(value);
  // @@protoc_insertion_point(field_set:proto.PlayerParameter.max_upgrade_grow)
}

// double disconnection_timeout = 11;
inline void PlayerParameter::clear_disconnection_timeout() {
  _impl_.disconnection_timeout_ = 0;
}
inline double PlayerParameter::_internal_disconnection_timeout() const {
  return _impl_.disconnection_timeout_;
}
inline double PlayerParameter::disconnection_timeout() const {
  // @@protoc_insertion_point(field_get:proto.PlayerParameter.disconnection_timeout)
  return _internal_disconnection_timeout();
}
inline void PlayerParameter::_internal_set_disconnection_timeout(double value) {
  
  _impl_.disconnection_timeout_ = value;
}
inline void PlayerParameter::set_disconnection_timeout(double value) {
  _internal_set_disconnection_timeout(value);
  // @@protoc_insertion_point(field_set:proto.PlayerParameter.disconnection_timeout)
}

// double eat_speed = 12;
inline void PlayerParameter::clear_eat_speed() {
  _impl_.eat_speed_ = 0;
}
inline double PlayerParameter::_internal_eat_speed() const {
  return _impl_.eat_speed_;
}
inline double PlayerParameter::eat_speed() const {
  // @@protoc_insertion_point(field_get:proto.PlayerParameter.eat_speed)
  return _internal_eat_speed();
}
inline void PlayerParameter::_internal_set_eat_speed(double value) {
  
  _impl_.eat_speed_ = value;
}
inline void PlayerParameter::set_eat_speed(double value) {
  _internal_set_eat_speed(value);
  // @@protoc_insertion_point(field_set:proto.PlayerParameter.eat_speed)
}

// repeated .proto.ColorParameter color_parameters = 13;
inline int PlayerParameter::_internal_color_parameters_size() const {
  return _impl_.color_parameters_.size();
}
inline int PlayerParameter::color_parameters_size() const {
  return _internal_color_parameters_size();
}
inline void PlayerParameter::clear_color_parameters() {
  _impl_.color_parameters_.Clear();
}
inline ::proto::ColorParameter* PlayerParameter::mutable_color_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:proto.PlayerParameter.color_parameters)
  return _impl_.color_parameters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::ColorParameter >*
PlayerParameter::mutable_color_parameters() {
  // @@protoc_insertion_point(field_mutable_list:proto.PlayerParameter.color_parameters)
  return &_impl_.color_parameters_;
}
inline const ::proto::ColorParameter& PlayerParameter::_internal_color_parameters(int index) const {
  return _impl_.color_parameters_.Get(index);
}
inline const ::proto::ColorParameter& PlayerParameter::color_parameters(int index) const {
  // @@protoc_insertion_point(field_get:proto.PlayerParameter.color_parameters)
  return _internal_color_parameters(index);
}
inline ::proto::ColorParameter* PlayerParameter::_internal_add_color_parameters() {
  return _impl_.color_parameters_.Add();
}
inline ::proto::ColorParameter* PlayerParameter::add_color_parameters() {
  ::proto::ColorParameter* _add = _internal_add_color_parameters();
  // @@protoc_insertion_point(field_add:proto.PlayerParameter.color_parameters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::ColorParameter >&
PlayerParameter::color_parameters() const {
  // @@protoc_insertion_point(field_list:proto.PlayerParameter.color_parameters)
  return _impl_.color_parameters_;
}

// .proto.SpecialEffectParameter special_effect_boost = 14;
inline bool PlayerParameter::_internal_has_special_effect_boost() const {
  return this != internal_default_instance() && _impl_.special_effect_boost_ != nullptr;
}
inline bool PlayerParameter::has_special_effect_boost() const {
  return _internal_has_special_effect_boost();
}
inline void PlayerParameter::clear_special_effect_boost() {
  if (GetArenaForAllocation() == nullptr && _impl_.special_effect_boost_ != nullptr) {
    delete _impl_.special_effect_boost_;
  }
  _impl_.special_effect_boost_ = nullptr;
}
inline const ::proto::SpecialEffectParameter& PlayerParameter::_internal_special_effect_boost() const {
  const ::proto::SpecialEffectParameter* p = _impl_.special_effect_boost_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SpecialEffectParameter&>(
      ::proto::_SpecialEffectParameter_default_instance_);
}
inline const ::proto::SpecialEffectParameter& PlayerParameter::special_effect_boost() const {
  // @@protoc_insertion_point(field_get:proto.PlayerParameter.special_effect_boost)
  return _internal_special_effect_boost();
}
inline void PlayerParameter::unsafe_arena_set_allocated_special_effect_boost(
    ::proto::SpecialEffectParameter* special_effect_boost) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.special_effect_boost_);
  }
  _impl_.special_effect_boost_ = special_effect_boost;
  if (special_effect_boost) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.PlayerParameter.special_effect_boost)
}
inline ::proto::SpecialEffectParameter* PlayerParameter::release_special_effect_boost() {
  
  ::proto::SpecialEffectParameter* temp = _impl_.special_effect_boost_;
  _impl_.special_effect_boost_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SpecialEffectParameter* PlayerParameter::unsafe_arena_release_special_effect_boost() {
  // @@protoc_insertion_point(field_release:proto.PlayerParameter.special_effect_boost)
  
  ::proto::SpecialEffectParameter* temp = _impl_.special_effect_boost_;
  _impl_.special_effect_boost_ = nullptr;
  return temp;
}
inline ::proto::SpecialEffectParameter* PlayerParameter::_internal_mutable_special_effect_boost() {
  
  if (_impl_.special_effect_boost_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SpecialEffectParameter>(GetArenaForAllocation());
    _impl_.special_effect_boost_ = p;
  }
  return _impl_.special_effect_boost_;
}
inline ::proto::SpecialEffectParameter* PlayerParameter::mutable_special_effect_boost() {
  ::proto::SpecialEffectParameter* _msg = _internal_mutable_special_effect_boost();
  // @@protoc_insertion_point(field_mutable:proto.PlayerParameter.special_effect_boost)
  return _msg;
}
inline void PlayerParameter::set_allocated_special_effect_boost(::proto::SpecialEffectParameter* special_effect_boost) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.special_effect_boost_;
  }
  if (special_effect_boost) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(special_effect_boost);
    if (message_arena != submessage_arena) {
      special_effect_boost = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, special_effect_boost, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.special_effect_boost_ = special_effect_boost;
  // @@protoc_insertion_point(field_set_allocated:proto.PlayerParameter.special_effect_boost)
}

// -------------------------------------------------------------------

// WorldDatabase

// repeated .proto.Element elements = 1;
inline int WorldDatabase::_internal_elements_size() const {
  return _impl_.elements_.size();
}
inline int WorldDatabase::elements_size() const {
  return _internal_elements_size();
}
inline void WorldDatabase::clear_elements() {
  _impl_.elements_.Clear();
}
inline ::proto::Element* WorldDatabase::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:proto.WorldDatabase.elements)
  return _impl_.elements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Element >*
WorldDatabase::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:proto.WorldDatabase.elements)
  return &_impl_.elements_;
}
inline const ::proto::Element& WorldDatabase::_internal_elements(int index) const {
  return _impl_.elements_.Get(index);
}
inline const ::proto::Element& WorldDatabase::elements(int index) const {
  // @@protoc_insertion_point(field_get:proto.WorldDatabase.elements)
  return _internal_elements(index);
}
inline ::proto::Element* WorldDatabase::_internal_add_elements() {
  return _impl_.elements_.Add();
}
inline ::proto::Element* WorldDatabase::add_elements() {
  ::proto::Element* _add = _internal_add_elements();
  // @@protoc_insertion_point(field_add:proto.WorldDatabase.elements)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Element >&
WorldDatabase::elements() const {
  // @@protoc_insertion_point(field_list:proto.WorldDatabase.elements)
  return _impl_.elements_;
}

// repeated .proto.Character characters = 2;
inline int WorldDatabase::_internal_characters_size() const {
  return _impl_.characters_.size();
}
inline int WorldDatabase::characters_size() const {
  return _internal_characters_size();
}
inline void WorldDatabase::clear_characters() {
  _impl_.characters_.Clear();
}
inline ::proto::Character* WorldDatabase::mutable_characters(int index) {
  // @@protoc_insertion_point(field_mutable:proto.WorldDatabase.characters)
  return _impl_.characters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Character >*
WorldDatabase::mutable_characters() {
  // @@protoc_insertion_point(field_mutable_list:proto.WorldDatabase.characters)
  return &_impl_.characters_;
}
inline const ::proto::Character& WorldDatabase::_internal_characters(int index) const {
  return _impl_.characters_.Get(index);
}
inline const ::proto::Character& WorldDatabase::characters(int index) const {
  // @@protoc_insertion_point(field_get:proto.WorldDatabase.characters)
  return _internal_characters(index);
}
inline ::proto::Character* WorldDatabase::_internal_add_characters() {
  return _impl_.characters_.Add();
}
inline ::proto::Character* WorldDatabase::add_characters() {
  ::proto::Character* _add = _internal_add_characters();
  // @@protoc_insertion_point(field_add:proto.WorldDatabase.characters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Character >&
WorldDatabase::characters() const {
  // @@protoc_insertion_point(field_list:proto.WorldDatabase.characters)
  return _impl_.characters_;
}

// double time = 3;
inline void WorldDatabase::clear_time() {
  _impl_.time_ = 0;
}
inline double WorldDatabase::_internal_time() const {
  return _impl_.time_;
}
inline double WorldDatabase::time() const {
  // @@protoc_insertion_point(field_get:proto.WorldDatabase.time)
  return _internal_time();
}
inline void WorldDatabase::_internal_set_time(double value) {
  
  _impl_.time_ = value;
}
inline void WorldDatabase::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:proto.WorldDatabase.time)
}

// .proto.PlayerParameter player_parameter = 4;
inline bool WorldDatabase::_internal_has_player_parameter() const {
  return this != internal_default_instance() && _impl_.player_parameter_ != nullptr;
}
inline bool WorldDatabase::has_player_parameter() const {
  return _internal_has_player_parameter();
}
inline void WorldDatabase::clear_player_parameter() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_parameter_ != nullptr) {
    delete _impl_.player_parameter_;
  }
  _impl_.player_parameter_ = nullptr;
}
inline const ::proto::PlayerParameter& WorldDatabase::_internal_player_parameter() const {
  const ::proto::PlayerParameter* p = _impl_.player_parameter_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::PlayerParameter&>(
      ::proto::_PlayerParameter_default_instance_);
}
inline const ::proto::PlayerParameter& WorldDatabase::player_parameter() const {
  // @@protoc_insertion_point(field_get:proto.WorldDatabase.player_parameter)
  return _internal_player_parameter();
}
inline void WorldDatabase::unsafe_arena_set_allocated_player_parameter(
    ::proto::PlayerParameter* player_parameter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_parameter_);
  }
  _impl_.player_parameter_ = player_parameter;
  if (player_parameter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.WorldDatabase.player_parameter)
}
inline ::proto::PlayerParameter* WorldDatabase::release_player_parameter() {
  
  ::proto::PlayerParameter* temp = _impl_.player_parameter_;
  _impl_.player_parameter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::PlayerParameter* WorldDatabase::unsafe_arena_release_player_parameter() {
  // @@protoc_insertion_point(field_release:proto.WorldDatabase.player_parameter)
  
  ::proto::PlayerParameter* temp = _impl_.player_parameter_;
  _impl_.player_parameter_ = nullptr;
  return temp;
}
inline ::proto::PlayerParameter* WorldDatabase::_internal_mutable_player_parameter() {
  
  if (_impl_.player_parameter_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::PlayerParameter>(GetArenaForAllocation());
    _impl_.player_parameter_ = p;
  }
  return _impl_.player_parameter_;
}
inline ::proto::PlayerParameter* WorldDatabase::mutable_player_parameter() {
  ::proto::PlayerParameter* _msg = _internal_mutable_player_parameter();
  // @@protoc_insertion_point(field_mutable:proto.WorldDatabase.player_parameter)
  return _msg;
}
inline void WorldDatabase::set_allocated_player_parameter(::proto::PlayerParameter* player_parameter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.player_parameter_;
  }
  if (player_parameter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_parameter);
    if (message_arena != submessage_arena) {
      player_parameter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_parameter, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_parameter_ = player_parameter;
  // @@protoc_insertion_point(field_set_allocated:proto.WorldDatabase.player_parameter)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::proto::ReturnEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::ReturnEnum>() {
  return ::proto::ReturnEnum_descriptor();
}
template <> struct is_proto_enum< ::proto::VitalEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::VitalEnum>() {
  return ::proto::VitalEnum_descriptor();
}
template <> struct is_proto_enum< ::proto::StatusEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::StatusEnum>() {
  return ::proto::StatusEnum_descriptor();
}
template <> struct is_proto_enum< ::proto::TypeEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::TypeEnum>() {
  return ::proto::TypeEnum_descriptor();
}
template <> struct is_proto_enum< ::proto::SpecialStateEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::SpecialStateEnum>() {
  return ::proto::SpecialStateEnum_descriptor();
}
template <> struct is_proto_enum< ::proto::CharacterTypeEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::CharacterTypeEnum>() {
  return ::proto::CharacterTypeEnum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_world_5fparameter_2eproto
