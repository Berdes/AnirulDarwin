// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: darwin_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_darwin_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_darwin_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_darwin_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_darwin_5fservice_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_darwin_5fservice_2eproto;
namespace proto {
class Element;
struct ElementDefaultTypeInternal;
extern ElementDefaultTypeInternal _Element_default_instance_;
class Physic;
struct PhysicDefaultTypeInternal;
extern PhysicDefaultTypeInternal _Physic_default_instance_;
class Player;
struct PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class UpdateRequest;
struct UpdateRequestDefaultTypeInternal;
extern UpdateRequestDefaultTypeInternal _UpdateRequest_default_instance_;
class UpdateResponse;
struct UpdateResponseDefaultTypeInternal;
extern UpdateResponseDefaultTypeInternal _UpdateResponse_default_instance_;
class Vector3;
struct Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
class Vector4;
struct Vector4DefaultTypeInternal;
extern Vector4DefaultTypeInternal _Vector4_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::Element* Arena::CreateMaybeMessage<::proto::Element>(Arena*);
template<> ::proto::Physic* Arena::CreateMaybeMessage<::proto::Physic>(Arena*);
template<> ::proto::Player* Arena::CreateMaybeMessage<::proto::Player>(Arena*);
template<> ::proto::UpdateRequest* Arena::CreateMaybeMessage<::proto::UpdateRequest>(Arena*);
template<> ::proto::UpdateResponse* Arena::CreateMaybeMessage<::proto::UpdateResponse>(Arena*);
template<> ::proto::Vector3* Arena::CreateMaybeMessage<::proto::Vector3>(Arena*);
template<> ::proto::Vector4* Arena::CreateMaybeMessage<::proto::Vector4>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

enum Element_TypeEnum : int {
  Element_TypeEnum_UKNOWN = 0,
  Element_TypeEnum_GROUND = 1,
  Element_TypeEnum_EXPLOSION = 2,
  Element_TypeEnum_UPGRADE = 3,
  Element_TypeEnum_GREEN = 4,
  Element_TypeEnum_BROWN = 5,
  Element_TypeEnum_WATER = 6,
  Element_TypeEnum_Element_TypeEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Element_TypeEnum_Element_TypeEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Element_TypeEnum_IsValid(int value);
constexpr Element_TypeEnum Element_TypeEnum_TypeEnum_MIN = Element_TypeEnum_UKNOWN;
constexpr Element_TypeEnum Element_TypeEnum_TypeEnum_MAX = Element_TypeEnum_WATER;
constexpr int Element_TypeEnum_TypeEnum_ARRAYSIZE = Element_TypeEnum_TypeEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Element_TypeEnum_descriptor();
template<typename T>
inline const std::string& Element_TypeEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Element_TypeEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Element_TypeEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Element_TypeEnum_descriptor(), enum_t_value);
}
inline bool Element_TypeEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Element_TypeEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Element_TypeEnum>(
    Element_TypeEnum_descriptor(), name, value);
}
// ===================================================================

class Vector3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Vector3) */ {
 public:
  inline Vector3() : Vector3(nullptr) {}
  ~Vector3() override;
  explicit PROTOBUF_CONSTEXPR Vector3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector3(const Vector3& from);
  Vector3(Vector3&& from) noexcept
    : Vector3() {
    *this = ::std::move(from);
  }

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3& operator=(Vector3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector3& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector3* internal_default_instance() {
    return reinterpret_cast<const Vector3*>(
               &_Vector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vector3& a, Vector3& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vector3& from) {
    Vector3::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Vector3";
  }
  protected:
  explicit Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Vector3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_darwin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Vector4 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Vector4) */ {
 public:
  inline Vector4() : Vector4(nullptr) {}
  ~Vector4() override;
  explicit PROTOBUF_CONSTEXPR Vector4(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector4(const Vector4& from);
  Vector4(Vector4&& from) noexcept
    : Vector4() {
    *this = ::std::move(from);
  }

  inline Vector4& operator=(const Vector4& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector4& operator=(Vector4&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector4& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector4* internal_default_instance() {
    return reinterpret_cast<const Vector4*>(
               &_Vector4_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Vector4& a, Vector4& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector4* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector4* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector4* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector4>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector4& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vector4& from) {
    Vector4::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector4* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Vector4";
  }
  protected:
  explicit Vector4(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kWFieldNumber = 4,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float w = 4;
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Vector4)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float z_;
    float w_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_darwin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Physic final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Physic) */ {
 public:
  inline Physic() : Physic(nullptr) {}
  ~Physic() override;
  explicit PROTOBUF_CONSTEXPR Physic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Physic(const Physic& from);
  Physic(Physic&& from) noexcept
    : Physic() {
    *this = ::std::move(from);
  }

  inline Physic& operator=(const Physic& from) {
    CopyFrom(from);
    return *this;
  }
  inline Physic& operator=(Physic&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Physic& default_instance() {
    return *internal_default_instance();
  }
  static inline const Physic* internal_default_instance() {
    return reinterpret_cast<const Physic*>(
               &_Physic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Physic& a, Physic& b) {
    a.Swap(&b);
  }
  inline void Swap(Physic* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Physic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Physic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Physic>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Physic& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Physic& from) {
    Physic::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Physic* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Physic";
  }
  protected:
  explicit Physic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 3,
    kDirectionFieldNumber = 4,
    kSpeedFieldNumber = 5,
    kRotationFieldNumber = 6,
    kRadiusFieldNumber = 1,
    kTotalWeightFieldNumber = 2,
  };
  // .proto.Vector3 position = 3;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::proto::Vector3& position() const;
  PROTOBUF_NODISCARD ::proto::Vector3* release_position();
  ::proto::Vector3* mutable_position();
  void set_allocated_position(::proto::Vector3* position);
  private:
  const ::proto::Vector3& _internal_position() const;
  ::proto::Vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::proto::Vector3* position);
  ::proto::Vector3* unsafe_arena_release_position();

  // .proto.Vector3 direction = 4;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  const ::proto::Vector3& direction() const;
  PROTOBUF_NODISCARD ::proto::Vector3* release_direction();
  ::proto::Vector3* mutable_direction();
  void set_allocated_direction(::proto::Vector3* direction);
  private:
  const ::proto::Vector3& _internal_direction() const;
  ::proto::Vector3* _internal_mutable_direction();
  public:
  void unsafe_arena_set_allocated_direction(
      ::proto::Vector3* direction);
  ::proto::Vector3* unsafe_arena_release_direction();

  // .proto.Vector3 speed = 5;
  bool has_speed() const;
  private:
  bool _internal_has_speed() const;
  public:
  void clear_speed();
  const ::proto::Vector3& speed() const;
  PROTOBUF_NODISCARD ::proto::Vector3* release_speed();
  ::proto::Vector3* mutable_speed();
  void set_allocated_speed(::proto::Vector3* speed);
  private:
  const ::proto::Vector3& _internal_speed() const;
  ::proto::Vector3* _internal_mutable_speed();
  public:
  void unsafe_arena_set_allocated_speed(
      ::proto::Vector3* speed);
  ::proto::Vector3* unsafe_arena_release_speed();

  // .proto.Vector4 rotation = 6;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::proto::Vector4& rotation() const;
  PROTOBUF_NODISCARD ::proto::Vector4* release_rotation();
  ::proto::Vector4* mutable_rotation();
  void set_allocated_rotation(::proto::Vector4* rotation);
  private:
  const ::proto::Vector4& _internal_rotation() const;
  ::proto::Vector4* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::proto::Vector4* rotation);
  ::proto::Vector4* unsafe_arena_release_rotation();

  // float radius = 1;
  void clear_radius();
  float radius() const;
  void set_radius(float value);
  private:
  float _internal_radius() const;
  void _internal_set_radius(float value);
  public:

  // float total_weight = 2;
  void clear_total_weight();
  float total_weight() const;
  void set_total_weight(float value);
  private:
  float _internal_total_weight() const;
  void _internal_set_total_weight(float value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Physic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::Vector3* position_;
    ::proto::Vector3* direction_;
    ::proto::Vector3* speed_;
    ::proto::Vector4* rotation_;
    float radius_;
    float total_weight_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_darwin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Element final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Element) */ {
 public:
  inline Element() : Element(nullptr) {}
  ~Element() override;
  explicit PROTOBUF_CONSTEXPR Element(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Element(const Element& from);
  Element(Element&& from) noexcept
    : Element() {
    *this = ::std::move(from);
  }

  inline Element& operator=(const Element& from) {
    CopyFrom(from);
    return *this;
  }
  inline Element& operator=(Element&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Element& default_instance() {
    return *internal_default_instance();
  }
  static inline const Element* internal_default_instance() {
    return reinterpret_cast<const Element*>(
               &_Element_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Element& a, Element& b) {
    a.Swap(&b);
  }
  inline void Swap(Element* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Element* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Element* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Element>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Element& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Element& from) {
    Element::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Element* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Element";
  }
  protected:
  explicit Element(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Element_TypeEnum TypeEnum;
  static constexpr TypeEnum UKNOWN =
    Element_TypeEnum_UKNOWN;
  static constexpr TypeEnum GROUND =
    Element_TypeEnum_GROUND;
  static constexpr TypeEnum EXPLOSION =
    Element_TypeEnum_EXPLOSION;
  static constexpr TypeEnum UPGRADE =
    Element_TypeEnum_UPGRADE;
  static constexpr TypeEnum GREEN =
    Element_TypeEnum_GREEN;
  static constexpr TypeEnum BROWN =
    Element_TypeEnum_BROWN;
  static constexpr TypeEnum WATER =
    Element_TypeEnum_WATER;
  static inline bool TypeEnum_IsValid(int value) {
    return Element_TypeEnum_IsValid(value);
  }
  static constexpr TypeEnum TypeEnum_MIN =
    Element_TypeEnum_TypeEnum_MIN;
  static constexpr TypeEnum TypeEnum_MAX =
    Element_TypeEnum_TypeEnum_MAX;
  static constexpr int TypeEnum_ARRAYSIZE =
    Element_TypeEnum_TypeEnum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TypeEnum_descriptor() {
    return Element_TypeEnum_descriptor();
  }
  template<typename T>
  static inline const std::string& TypeEnum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TypeEnum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TypeEnum_Name.");
    return Element_TypeEnum_Name(enum_t_value);
  }
  static inline bool TypeEnum_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TypeEnum* value) {
    return Element_TypeEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kElementNameFieldNumber = 1,
    kMaterialFieldNumber = 2,
    kPhysicFieldNumber = 3,
    kTypeEnumFieldNumber = 4,
  };
  // string element_name = 1;
  void clear_element_name();
  const std::string& element_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_element_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_element_name();
  PROTOBUF_NODISCARD std::string* release_element_name();
  void set_allocated_element_name(std::string* element_name);
  private:
  const std::string& _internal_element_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_element_name(const std::string& value);
  std::string* _internal_mutable_element_name();
  public:

  // string material = 2;
  void clear_material();
  const std::string& material() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_material(ArgT0&& arg0, ArgT... args);
  std::string* mutable_material();
  PROTOBUF_NODISCARD std::string* release_material();
  void set_allocated_material(std::string* material);
  private:
  const std::string& _internal_material() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_material(const std::string& value);
  std::string* _internal_mutable_material();
  public:

  // .proto.Physic physic = 3;
  bool has_physic() const;
  private:
  bool _internal_has_physic() const;
  public:
  void clear_physic();
  const ::proto::Physic& physic() const;
  PROTOBUF_NODISCARD ::proto::Physic* release_physic();
  ::proto::Physic* mutable_physic();
  void set_allocated_physic(::proto::Physic* physic);
  private:
  const ::proto::Physic& _internal_physic() const;
  ::proto::Physic* _internal_mutable_physic();
  public:
  void unsafe_arena_set_allocated_physic(
      ::proto::Physic* physic);
  ::proto::Physic* unsafe_arena_release_physic();

  // .proto.Element.TypeEnum type_enum = 4;
  void clear_type_enum();
  ::proto::Element_TypeEnum type_enum() const;
  void set_type_enum(::proto::Element_TypeEnum value);
  private:
  ::proto::Element_TypeEnum _internal_type_enum() const;
  void _internal_set_type_enum(::proto::Element_TypeEnum value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Element)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr element_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr material_;
    ::proto::Physic* physic_;
    int type_enum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_darwin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Player) */ {
 public:
  inline Player() : Player(nullptr) {}
  ~Player() override;
  explicit PROTOBUF_CONSTEXPR Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Player(const Player& from);
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player& operator=(Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }
  inline void Swap(Player* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Player& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Player& from) {
    Player::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Player";
  }
  protected:
  explicit Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
    kMaterialFieldNumber = 2,
    kPhysicFieldNumber = 3,
  };
  // string user_name = 1;
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_NODISCARD std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // string material = 2;
  void clear_material();
  const std::string& material() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_material(ArgT0&& arg0, ArgT... args);
  std::string* mutable_material();
  PROTOBUF_NODISCARD std::string* release_material();
  void set_allocated_material(std::string* material);
  private:
  const std::string& _internal_material() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_material(const std::string& value);
  std::string* _internal_mutable_material();
  public:

  // .proto.Physic physic = 3;
  bool has_physic() const;
  private:
  bool _internal_has_physic() const;
  public:
  void clear_physic();
  const ::proto::Physic& physic() const;
  PROTOBUF_NODISCARD ::proto::Physic* release_physic();
  ::proto::Physic* mutable_physic();
  void set_allocated_physic(::proto::Physic* physic);
  private:
  const ::proto::Physic& _internal_physic() const;
  ::proto::Physic* _internal_mutable_physic();
  public:
  void unsafe_arena_set_allocated_physic(
      ::proto::Physic* physic);
  ::proto::Physic* unsafe_arena_release_physic();

  // @@protoc_insertion_point(class_scope:proto.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr material_;
    ::proto::Physic* physic_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_darwin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.UpdateRequest) */ {
 public:
  inline UpdateRequest() : UpdateRequest(nullptr) {}
  ~UpdateRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateRequest(const UpdateRequest& from);
  UpdateRequest(UpdateRequest&& from) noexcept
    : UpdateRequest() {
    *this = ::std::move(from);
  }

  inline UpdateRequest& operator=(const UpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateRequest& operator=(UpdateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateRequest*>(
               &_UpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UpdateRequest& a, UpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateRequest& from) {
    UpdateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.UpdateRequest";
  }
  protected:
  explicit UpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
    kElementFieldNumber = 2,
  };
  // .proto.Player player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::proto::Player& player() const;
  PROTOBUF_NODISCARD ::proto::Player* release_player();
  ::proto::Player* mutable_player();
  void set_allocated_player(::proto::Player* player);
  private:
  const ::proto::Player& _internal_player() const;
  ::proto::Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::proto::Player* player);
  ::proto::Player* unsafe_arena_release_player();

  // .proto.Element element = 2;
  bool has_element() const;
  private:
  bool _internal_has_element() const;
  public:
  void clear_element();
  const ::proto::Element& element() const;
  PROTOBUF_NODISCARD ::proto::Element* release_element();
  ::proto::Element* mutable_element();
  void set_allocated_element(::proto::Element* element);
  private:
  const ::proto::Element& _internal_element() const;
  ::proto::Element* _internal_mutable_element();
  public:
  void unsafe_arena_set_allocated_element(
      ::proto::Element* element);
  ::proto::Element* unsafe_arena_release_element();

  // @@protoc_insertion_point(class_scope:proto.UpdateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::Player* player_;
    ::proto::Element* element_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_darwin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.UpdateResponse) */ {
 public:
  inline UpdateResponse() : UpdateResponse(nullptr) {}
  ~UpdateResponse() override;
  explicit PROTOBUF_CONSTEXPR UpdateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateResponse(const UpdateResponse& from);
  UpdateResponse(UpdateResponse&& from) noexcept
    : UpdateResponse() {
    *this = ::std::move(from);
  }

  inline UpdateResponse& operator=(const UpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateResponse& operator=(UpdateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateResponse*>(
               &_UpdateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UpdateResponse& a, UpdateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateResponse& from) {
    UpdateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.UpdateResponse";
  }
  protected:
  explicit UpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 1,
    kElementsFieldNumber = 2,
    kLocalGFieldNumber = 4,
    kTimeFieldNumber = 3,
  };
  // repeated .proto.Player players = 1;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::proto::Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Player >*
      mutable_players();
  private:
  const ::proto::Player& _internal_players(int index) const;
  ::proto::Player* _internal_add_players();
  public:
  const ::proto::Player& players(int index) const;
  ::proto::Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Player >&
      players() const;

  // repeated .proto.Element elements = 2;
  int elements_size() const;
  private:
  int _internal_elements_size() const;
  public:
  void clear_elements();
  ::proto::Element* mutable_elements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Element >*
      mutable_elements();
  private:
  const ::proto::Element& _internal_elements(int index) const;
  ::proto::Element* _internal_add_elements();
  public:
  const ::proto::Element& elements(int index) const;
  ::proto::Element* add_elements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Element >&
      elements() const;

  // .proto.Vector3 local_g = 4;
  bool has_local_g() const;
  private:
  bool _internal_has_local_g() const;
  public:
  void clear_local_g();
  const ::proto::Vector3& local_g() const;
  PROTOBUF_NODISCARD ::proto::Vector3* release_local_g();
  ::proto::Vector3* mutable_local_g();
  void set_allocated_local_g(::proto::Vector3* local_g);
  private:
  const ::proto::Vector3& _internal_local_g() const;
  ::proto::Vector3* _internal_mutable_local_g();
  public:
  void unsafe_arena_set_allocated_local_g(
      ::proto::Vector3* local_g);
  ::proto::Vector3* unsafe_arena_release_local_g();

  // double time = 3;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:proto.UpdateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Player > players_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Element > elements_;
    ::proto::Vector3* local_g_;
    double time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_darwin_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector3

// float x = 1;
inline void Vector3::clear_x() {
  _impl_.x_ = 0;
}
inline float Vector3::_internal_x() const {
  return _impl_.x_;
}
inline float Vector3::x() const {
  // @@protoc_insertion_point(field_get:proto.Vector3.x)
  return _internal_x();
}
inline void Vector3::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void Vector3::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:proto.Vector3.x)
}

// float y = 2;
inline void Vector3::clear_y() {
  _impl_.y_ = 0;
}
inline float Vector3::_internal_y() const {
  return _impl_.y_;
}
inline float Vector3::y() const {
  // @@protoc_insertion_point(field_get:proto.Vector3.y)
  return _internal_y();
}
inline void Vector3::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void Vector3::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:proto.Vector3.y)
}

// float z = 3;
inline void Vector3::clear_z() {
  _impl_.z_ = 0;
}
inline float Vector3::_internal_z() const {
  return _impl_.z_;
}
inline float Vector3::z() const {
  // @@protoc_insertion_point(field_get:proto.Vector3.z)
  return _internal_z();
}
inline void Vector3::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void Vector3::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:proto.Vector3.z)
}

// -------------------------------------------------------------------

// Vector4

// float x = 1;
inline void Vector4::clear_x() {
  _impl_.x_ = 0;
}
inline float Vector4::_internal_x() const {
  return _impl_.x_;
}
inline float Vector4::x() const {
  // @@protoc_insertion_point(field_get:proto.Vector4.x)
  return _internal_x();
}
inline void Vector4::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void Vector4::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:proto.Vector4.x)
}

// float y = 2;
inline void Vector4::clear_y() {
  _impl_.y_ = 0;
}
inline float Vector4::_internal_y() const {
  return _impl_.y_;
}
inline float Vector4::y() const {
  // @@protoc_insertion_point(field_get:proto.Vector4.y)
  return _internal_y();
}
inline void Vector4::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void Vector4::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:proto.Vector4.y)
}

// float z = 3;
inline void Vector4::clear_z() {
  _impl_.z_ = 0;
}
inline float Vector4::_internal_z() const {
  return _impl_.z_;
}
inline float Vector4::z() const {
  // @@protoc_insertion_point(field_get:proto.Vector4.z)
  return _internal_z();
}
inline void Vector4::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void Vector4::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:proto.Vector4.z)
}

// float w = 4;
inline void Vector4::clear_w() {
  _impl_.w_ = 0;
}
inline float Vector4::_internal_w() const {
  return _impl_.w_;
}
inline float Vector4::w() const {
  // @@protoc_insertion_point(field_get:proto.Vector4.w)
  return _internal_w();
}
inline void Vector4::_internal_set_w(float value) {
  
  _impl_.w_ = value;
}
inline void Vector4::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:proto.Vector4.w)
}

// -------------------------------------------------------------------

// Physic

// float radius = 1;
inline void Physic::clear_radius() {
  _impl_.radius_ = 0;
}
inline float Physic::_internal_radius() const {
  return _impl_.radius_;
}
inline float Physic::radius() const {
  // @@protoc_insertion_point(field_get:proto.Physic.radius)
  return _internal_radius();
}
inline void Physic::_internal_set_radius(float value) {
  
  _impl_.radius_ = value;
}
inline void Physic::set_radius(float value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:proto.Physic.radius)
}

// float total_weight = 2;
inline void Physic::clear_total_weight() {
  _impl_.total_weight_ = 0;
}
inline float Physic::_internal_total_weight() const {
  return _impl_.total_weight_;
}
inline float Physic::total_weight() const {
  // @@protoc_insertion_point(field_get:proto.Physic.total_weight)
  return _internal_total_weight();
}
inline void Physic::_internal_set_total_weight(float value) {
  
  _impl_.total_weight_ = value;
}
inline void Physic::set_total_weight(float value) {
  _internal_set_total_weight(value);
  // @@protoc_insertion_point(field_set:proto.Physic.total_weight)
}

// .proto.Vector3 position = 3;
inline bool Physic::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool Physic::has_position() const {
  return _internal_has_position();
}
inline void Physic::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
inline const ::proto::Vector3& Physic::_internal_position() const {
  const ::proto::Vector3* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Vector3&>(
      ::proto::_Vector3_default_instance_);
}
inline const ::proto::Vector3& Physic::position() const {
  // @@protoc_insertion_point(field_get:proto.Physic.position)
  return _internal_position();
}
inline void Physic::unsafe_arena_set_allocated_position(
    ::proto::Vector3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Physic.position)
}
inline ::proto::Vector3* Physic::release_position() {
  
  ::proto::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Vector3* Physic::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:proto.Physic.position)
  
  ::proto::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::proto::Vector3* Physic::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Vector3>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::proto::Vector3* Physic::mutable_position() {
  ::proto::Vector3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:proto.Physic.position)
  return _msg;
}
inline void Physic::set_allocated_position(::proto::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:proto.Physic.position)
}

// .proto.Vector3 direction = 4;
inline bool Physic::_internal_has_direction() const {
  return this != internal_default_instance() && _impl_.direction_ != nullptr;
}
inline bool Physic::has_direction() const {
  return _internal_has_direction();
}
inline void Physic::clear_direction() {
  if (GetArenaForAllocation() == nullptr && _impl_.direction_ != nullptr) {
    delete _impl_.direction_;
  }
  _impl_.direction_ = nullptr;
}
inline const ::proto::Vector3& Physic::_internal_direction() const {
  const ::proto::Vector3* p = _impl_.direction_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Vector3&>(
      ::proto::_Vector3_default_instance_);
}
inline const ::proto::Vector3& Physic::direction() const {
  // @@protoc_insertion_point(field_get:proto.Physic.direction)
  return _internal_direction();
}
inline void Physic::unsafe_arena_set_allocated_direction(
    ::proto::Vector3* direction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.direction_);
  }
  _impl_.direction_ = direction;
  if (direction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Physic.direction)
}
inline ::proto::Vector3* Physic::release_direction() {
  
  ::proto::Vector3* temp = _impl_.direction_;
  _impl_.direction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Vector3* Physic::unsafe_arena_release_direction() {
  // @@protoc_insertion_point(field_release:proto.Physic.direction)
  
  ::proto::Vector3* temp = _impl_.direction_;
  _impl_.direction_ = nullptr;
  return temp;
}
inline ::proto::Vector3* Physic::_internal_mutable_direction() {
  
  if (_impl_.direction_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Vector3>(GetArenaForAllocation());
    _impl_.direction_ = p;
  }
  return _impl_.direction_;
}
inline ::proto::Vector3* Physic::mutable_direction() {
  ::proto::Vector3* _msg = _internal_mutable_direction();
  // @@protoc_insertion_point(field_mutable:proto.Physic.direction)
  return _msg;
}
inline void Physic::set_allocated_direction(::proto::Vector3* direction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.direction_;
  }
  if (direction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(direction);
    if (message_arena != submessage_arena) {
      direction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, direction, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.direction_ = direction;
  // @@protoc_insertion_point(field_set_allocated:proto.Physic.direction)
}

// .proto.Vector3 speed = 5;
inline bool Physic::_internal_has_speed() const {
  return this != internal_default_instance() && _impl_.speed_ != nullptr;
}
inline bool Physic::has_speed() const {
  return _internal_has_speed();
}
inline void Physic::clear_speed() {
  if (GetArenaForAllocation() == nullptr && _impl_.speed_ != nullptr) {
    delete _impl_.speed_;
  }
  _impl_.speed_ = nullptr;
}
inline const ::proto::Vector3& Physic::_internal_speed() const {
  const ::proto::Vector3* p = _impl_.speed_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Vector3&>(
      ::proto::_Vector3_default_instance_);
}
inline const ::proto::Vector3& Physic::speed() const {
  // @@protoc_insertion_point(field_get:proto.Physic.speed)
  return _internal_speed();
}
inline void Physic::unsafe_arena_set_allocated_speed(
    ::proto::Vector3* speed) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.speed_);
  }
  _impl_.speed_ = speed;
  if (speed) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Physic.speed)
}
inline ::proto::Vector3* Physic::release_speed() {
  
  ::proto::Vector3* temp = _impl_.speed_;
  _impl_.speed_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Vector3* Physic::unsafe_arena_release_speed() {
  // @@protoc_insertion_point(field_release:proto.Physic.speed)
  
  ::proto::Vector3* temp = _impl_.speed_;
  _impl_.speed_ = nullptr;
  return temp;
}
inline ::proto::Vector3* Physic::_internal_mutable_speed() {
  
  if (_impl_.speed_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Vector3>(GetArenaForAllocation());
    _impl_.speed_ = p;
  }
  return _impl_.speed_;
}
inline ::proto::Vector3* Physic::mutable_speed() {
  ::proto::Vector3* _msg = _internal_mutable_speed();
  // @@protoc_insertion_point(field_mutable:proto.Physic.speed)
  return _msg;
}
inline void Physic::set_allocated_speed(::proto::Vector3* speed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.speed_;
  }
  if (speed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(speed);
    if (message_arena != submessage_arena) {
      speed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speed, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.speed_ = speed;
  // @@protoc_insertion_point(field_set_allocated:proto.Physic.speed)
}

// .proto.Vector4 rotation = 6;
inline bool Physic::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool Physic::has_rotation() const {
  return _internal_has_rotation();
}
inline void Physic::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
}
inline const ::proto::Vector4& Physic::_internal_rotation() const {
  const ::proto::Vector4* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Vector4&>(
      ::proto::_Vector4_default_instance_);
}
inline const ::proto::Vector4& Physic::rotation() const {
  // @@protoc_insertion_point(field_get:proto.Physic.rotation)
  return _internal_rotation();
}
inline void Physic::unsafe_arena_set_allocated_rotation(
    ::proto::Vector4* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Physic.rotation)
}
inline ::proto::Vector4* Physic::release_rotation() {
  
  ::proto::Vector4* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Vector4* Physic::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:proto.Physic.rotation)
  
  ::proto::Vector4* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::proto::Vector4* Physic::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Vector4>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::proto::Vector4* Physic::mutable_rotation() {
  ::proto::Vector4* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:proto.Physic.rotation)
  return _msg;
}
inline void Physic::set_allocated_rotation(::proto::Vector4* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:proto.Physic.rotation)
}

// -------------------------------------------------------------------

// Element

// string element_name = 1;
inline void Element::clear_element_name() {
  _impl_.element_name_.ClearToEmpty();
}
inline const std::string& Element::element_name() const {
  // @@protoc_insertion_point(field_get:proto.Element.element_name)
  return _internal_element_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Element::set_element_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.element_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.Element.element_name)
}
inline std::string* Element::mutable_element_name() {
  std::string* _s = _internal_mutable_element_name();
  // @@protoc_insertion_point(field_mutable:proto.Element.element_name)
  return _s;
}
inline const std::string& Element::_internal_element_name() const {
  return _impl_.element_name_.Get();
}
inline void Element::_internal_set_element_name(const std::string& value) {
  
  _impl_.element_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Element::_internal_mutable_element_name() {
  
  return _impl_.element_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Element::release_element_name() {
  // @@protoc_insertion_point(field_release:proto.Element.element_name)
  return _impl_.element_name_.Release();
}
inline void Element::set_allocated_element_name(std::string* element_name) {
  if (element_name != nullptr) {
    
  } else {
    
  }
  _impl_.element_name_.SetAllocated(element_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.element_name_.IsDefault()) {
    _impl_.element_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.Element.element_name)
}

// string material = 2;
inline void Element::clear_material() {
  _impl_.material_.ClearToEmpty();
}
inline const std::string& Element::material() const {
  // @@protoc_insertion_point(field_get:proto.Element.material)
  return _internal_material();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Element::set_material(ArgT0&& arg0, ArgT... args) {
 
 _impl_.material_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.Element.material)
}
inline std::string* Element::mutable_material() {
  std::string* _s = _internal_mutable_material();
  // @@protoc_insertion_point(field_mutable:proto.Element.material)
  return _s;
}
inline const std::string& Element::_internal_material() const {
  return _impl_.material_.Get();
}
inline void Element::_internal_set_material(const std::string& value) {
  
  _impl_.material_.Set(value, GetArenaForAllocation());
}
inline std::string* Element::_internal_mutable_material() {
  
  return _impl_.material_.Mutable(GetArenaForAllocation());
}
inline std::string* Element::release_material() {
  // @@protoc_insertion_point(field_release:proto.Element.material)
  return _impl_.material_.Release();
}
inline void Element::set_allocated_material(std::string* material) {
  if (material != nullptr) {
    
  } else {
    
  }
  _impl_.material_.SetAllocated(material, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.material_.IsDefault()) {
    _impl_.material_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.Element.material)
}

// .proto.Physic physic = 3;
inline bool Element::_internal_has_physic() const {
  return this != internal_default_instance() && _impl_.physic_ != nullptr;
}
inline bool Element::has_physic() const {
  return _internal_has_physic();
}
inline void Element::clear_physic() {
  if (GetArenaForAllocation() == nullptr && _impl_.physic_ != nullptr) {
    delete _impl_.physic_;
  }
  _impl_.physic_ = nullptr;
}
inline const ::proto::Physic& Element::_internal_physic() const {
  const ::proto::Physic* p = _impl_.physic_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Physic&>(
      ::proto::_Physic_default_instance_);
}
inline const ::proto::Physic& Element::physic() const {
  // @@protoc_insertion_point(field_get:proto.Element.physic)
  return _internal_physic();
}
inline void Element::unsafe_arena_set_allocated_physic(
    ::proto::Physic* physic) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.physic_);
  }
  _impl_.physic_ = physic;
  if (physic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Element.physic)
}
inline ::proto::Physic* Element::release_physic() {
  
  ::proto::Physic* temp = _impl_.physic_;
  _impl_.physic_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Physic* Element::unsafe_arena_release_physic() {
  // @@protoc_insertion_point(field_release:proto.Element.physic)
  
  ::proto::Physic* temp = _impl_.physic_;
  _impl_.physic_ = nullptr;
  return temp;
}
inline ::proto::Physic* Element::_internal_mutable_physic() {
  
  if (_impl_.physic_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Physic>(GetArenaForAllocation());
    _impl_.physic_ = p;
  }
  return _impl_.physic_;
}
inline ::proto::Physic* Element::mutable_physic() {
  ::proto::Physic* _msg = _internal_mutable_physic();
  // @@protoc_insertion_point(field_mutable:proto.Element.physic)
  return _msg;
}
inline void Element::set_allocated_physic(::proto::Physic* physic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.physic_;
  }
  if (physic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(physic);
    if (message_arena != submessage_arena) {
      physic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, physic, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.physic_ = physic;
  // @@protoc_insertion_point(field_set_allocated:proto.Element.physic)
}

// .proto.Element.TypeEnum type_enum = 4;
inline void Element::clear_type_enum() {
  _impl_.type_enum_ = 0;
}
inline ::proto::Element_TypeEnum Element::_internal_type_enum() const {
  return static_cast< ::proto::Element_TypeEnum >(_impl_.type_enum_);
}
inline ::proto::Element_TypeEnum Element::type_enum() const {
  // @@protoc_insertion_point(field_get:proto.Element.type_enum)
  return _internal_type_enum();
}
inline void Element::_internal_set_type_enum(::proto::Element_TypeEnum value) {
  
  _impl_.type_enum_ = value;
}
inline void Element::set_type_enum(::proto::Element_TypeEnum value) {
  _internal_set_type_enum(value);
  // @@protoc_insertion_point(field_set:proto.Element.type_enum)
}

// -------------------------------------------------------------------

// Player

// string user_name = 1;
inline void Player::clear_user_name() {
  _impl_.user_name_.ClearToEmpty();
}
inline const std::string& Player::user_name() const {
  // @@protoc_insertion_point(field_get:proto.Player.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Player::set_user_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.Player.user_name)
}
inline std::string* Player::mutable_user_name() {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:proto.Player.user_name)
  return _s;
}
inline const std::string& Player::_internal_user_name() const {
  return _impl_.user_name_.Get();
}
inline void Player::_internal_set_user_name(const std::string& value) {
  
  _impl_.user_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Player::_internal_mutable_user_name() {
  
  return _impl_.user_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Player::release_user_name() {
  // @@protoc_insertion_point(field_release:proto.Player.user_name)
  return _impl_.user_name_.Release();
}
inline void Player::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  _impl_.user_name_.SetAllocated(user_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_name_.IsDefault()) {
    _impl_.user_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.Player.user_name)
}

// string material = 2;
inline void Player::clear_material() {
  _impl_.material_.ClearToEmpty();
}
inline const std::string& Player::material() const {
  // @@protoc_insertion_point(field_get:proto.Player.material)
  return _internal_material();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Player::set_material(ArgT0&& arg0, ArgT... args) {
 
 _impl_.material_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.Player.material)
}
inline std::string* Player::mutable_material() {
  std::string* _s = _internal_mutable_material();
  // @@protoc_insertion_point(field_mutable:proto.Player.material)
  return _s;
}
inline const std::string& Player::_internal_material() const {
  return _impl_.material_.Get();
}
inline void Player::_internal_set_material(const std::string& value) {
  
  _impl_.material_.Set(value, GetArenaForAllocation());
}
inline std::string* Player::_internal_mutable_material() {
  
  return _impl_.material_.Mutable(GetArenaForAllocation());
}
inline std::string* Player::release_material() {
  // @@protoc_insertion_point(field_release:proto.Player.material)
  return _impl_.material_.Release();
}
inline void Player::set_allocated_material(std::string* material) {
  if (material != nullptr) {
    
  } else {
    
  }
  _impl_.material_.SetAllocated(material, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.material_.IsDefault()) {
    _impl_.material_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.Player.material)
}

// .proto.Physic physic = 3;
inline bool Player::_internal_has_physic() const {
  return this != internal_default_instance() && _impl_.physic_ != nullptr;
}
inline bool Player::has_physic() const {
  return _internal_has_physic();
}
inline void Player::clear_physic() {
  if (GetArenaForAllocation() == nullptr && _impl_.physic_ != nullptr) {
    delete _impl_.physic_;
  }
  _impl_.physic_ = nullptr;
}
inline const ::proto::Physic& Player::_internal_physic() const {
  const ::proto::Physic* p = _impl_.physic_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Physic&>(
      ::proto::_Physic_default_instance_);
}
inline const ::proto::Physic& Player::physic() const {
  // @@protoc_insertion_point(field_get:proto.Player.physic)
  return _internal_physic();
}
inline void Player::unsafe_arena_set_allocated_physic(
    ::proto::Physic* physic) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.physic_);
  }
  _impl_.physic_ = physic;
  if (physic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Player.physic)
}
inline ::proto::Physic* Player::release_physic() {
  
  ::proto::Physic* temp = _impl_.physic_;
  _impl_.physic_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Physic* Player::unsafe_arena_release_physic() {
  // @@protoc_insertion_point(field_release:proto.Player.physic)
  
  ::proto::Physic* temp = _impl_.physic_;
  _impl_.physic_ = nullptr;
  return temp;
}
inline ::proto::Physic* Player::_internal_mutable_physic() {
  
  if (_impl_.physic_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Physic>(GetArenaForAllocation());
    _impl_.physic_ = p;
  }
  return _impl_.physic_;
}
inline ::proto::Physic* Player::mutable_physic() {
  ::proto::Physic* _msg = _internal_mutable_physic();
  // @@protoc_insertion_point(field_mutable:proto.Player.physic)
  return _msg;
}
inline void Player::set_allocated_physic(::proto::Physic* physic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.physic_;
  }
  if (physic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(physic);
    if (message_arena != submessage_arena) {
      physic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, physic, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.physic_ = physic;
  // @@protoc_insertion_point(field_set_allocated:proto.Player.physic)
}

// -------------------------------------------------------------------

// UpdateRequest

// .proto.Player player = 1;
inline bool UpdateRequest::_internal_has_player() const {
  return this != internal_default_instance() && _impl_.player_ != nullptr;
}
inline bool UpdateRequest::has_player() const {
  return _internal_has_player();
}
inline void UpdateRequest::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
inline const ::proto::Player& UpdateRequest::_internal_player() const {
  const ::proto::Player* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Player&>(
      ::proto::_Player_default_instance_);
}
inline const ::proto::Player& UpdateRequest::player() const {
  // @@protoc_insertion_point(field_get:proto.UpdateRequest.player)
  return _internal_player();
}
inline void UpdateRequest::unsafe_arena_set_allocated_player(
    ::proto::Player* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UpdateRequest.player)
}
inline ::proto::Player* UpdateRequest::release_player() {
  
  ::proto::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Player* UpdateRequest::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:proto.UpdateRequest.player)
  
  ::proto::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::proto::Player* UpdateRequest::_internal_mutable_player() {
  
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Player>(GetArenaForAllocation());
    _impl_.player_ = p;
  }
  return _impl_.player_;
}
inline ::proto::Player* UpdateRequest::mutable_player() {
  ::proto::Player* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:proto.UpdateRequest.player)
  return _msg;
}
inline void UpdateRequest::set_allocated_player(::proto::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.player_;
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player);
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ = player;
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateRequest.player)
}

// .proto.Element element = 2;
inline bool UpdateRequest::_internal_has_element() const {
  return this != internal_default_instance() && _impl_.element_ != nullptr;
}
inline bool UpdateRequest::has_element() const {
  return _internal_has_element();
}
inline void UpdateRequest::clear_element() {
  if (GetArenaForAllocation() == nullptr && _impl_.element_ != nullptr) {
    delete _impl_.element_;
  }
  _impl_.element_ = nullptr;
}
inline const ::proto::Element& UpdateRequest::_internal_element() const {
  const ::proto::Element* p = _impl_.element_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Element&>(
      ::proto::_Element_default_instance_);
}
inline const ::proto::Element& UpdateRequest::element() const {
  // @@protoc_insertion_point(field_get:proto.UpdateRequest.element)
  return _internal_element();
}
inline void UpdateRequest::unsafe_arena_set_allocated_element(
    ::proto::Element* element) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.element_);
  }
  _impl_.element_ = element;
  if (element) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UpdateRequest.element)
}
inline ::proto::Element* UpdateRequest::release_element() {
  
  ::proto::Element* temp = _impl_.element_;
  _impl_.element_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Element* UpdateRequest::unsafe_arena_release_element() {
  // @@protoc_insertion_point(field_release:proto.UpdateRequest.element)
  
  ::proto::Element* temp = _impl_.element_;
  _impl_.element_ = nullptr;
  return temp;
}
inline ::proto::Element* UpdateRequest::_internal_mutable_element() {
  
  if (_impl_.element_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Element>(GetArenaForAllocation());
    _impl_.element_ = p;
  }
  return _impl_.element_;
}
inline ::proto::Element* UpdateRequest::mutable_element() {
  ::proto::Element* _msg = _internal_mutable_element();
  // @@protoc_insertion_point(field_mutable:proto.UpdateRequest.element)
  return _msg;
}
inline void UpdateRequest::set_allocated_element(::proto::Element* element) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.element_;
  }
  if (element) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(element);
    if (message_arena != submessage_arena) {
      element = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, element, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.element_ = element;
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateRequest.element)
}

// -------------------------------------------------------------------

// UpdateResponse

// repeated .proto.Player players = 1;
inline int UpdateResponse::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int UpdateResponse::players_size() const {
  return _internal_players_size();
}
inline void UpdateResponse::clear_players() {
  _impl_.players_.Clear();
}
inline ::proto::Player* UpdateResponse::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:proto.UpdateResponse.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Player >*
UpdateResponse::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:proto.UpdateResponse.players)
  return &_impl_.players_;
}
inline const ::proto::Player& UpdateResponse::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::proto::Player& UpdateResponse::players(int index) const {
  // @@protoc_insertion_point(field_get:proto.UpdateResponse.players)
  return _internal_players(index);
}
inline ::proto::Player* UpdateResponse::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::proto::Player* UpdateResponse::add_players() {
  ::proto::Player* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:proto.UpdateResponse.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Player >&
UpdateResponse::players() const {
  // @@protoc_insertion_point(field_list:proto.UpdateResponse.players)
  return _impl_.players_;
}

// repeated .proto.Element elements = 2;
inline int UpdateResponse::_internal_elements_size() const {
  return _impl_.elements_.size();
}
inline int UpdateResponse::elements_size() const {
  return _internal_elements_size();
}
inline void UpdateResponse::clear_elements() {
  _impl_.elements_.Clear();
}
inline ::proto::Element* UpdateResponse::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:proto.UpdateResponse.elements)
  return _impl_.elements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Element >*
UpdateResponse::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:proto.UpdateResponse.elements)
  return &_impl_.elements_;
}
inline const ::proto::Element& UpdateResponse::_internal_elements(int index) const {
  return _impl_.elements_.Get(index);
}
inline const ::proto::Element& UpdateResponse::elements(int index) const {
  // @@protoc_insertion_point(field_get:proto.UpdateResponse.elements)
  return _internal_elements(index);
}
inline ::proto::Element* UpdateResponse::_internal_add_elements() {
  return _impl_.elements_.Add();
}
inline ::proto::Element* UpdateResponse::add_elements() {
  ::proto::Element* _add = _internal_add_elements();
  // @@protoc_insertion_point(field_add:proto.UpdateResponse.elements)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Element >&
UpdateResponse::elements() const {
  // @@protoc_insertion_point(field_list:proto.UpdateResponse.elements)
  return _impl_.elements_;
}

// double time = 3;
inline void UpdateResponse::clear_time() {
  _impl_.time_ = 0;
}
inline double UpdateResponse::_internal_time() const {
  return _impl_.time_;
}
inline double UpdateResponse::time() const {
  // @@protoc_insertion_point(field_get:proto.UpdateResponse.time)
  return _internal_time();
}
inline void UpdateResponse::_internal_set_time(double value) {
  
  _impl_.time_ = value;
}
inline void UpdateResponse::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:proto.UpdateResponse.time)
}

// .proto.Vector3 local_g = 4;
inline bool UpdateResponse::_internal_has_local_g() const {
  return this != internal_default_instance() && _impl_.local_g_ != nullptr;
}
inline bool UpdateResponse::has_local_g() const {
  return _internal_has_local_g();
}
inline void UpdateResponse::clear_local_g() {
  if (GetArenaForAllocation() == nullptr && _impl_.local_g_ != nullptr) {
    delete _impl_.local_g_;
  }
  _impl_.local_g_ = nullptr;
}
inline const ::proto::Vector3& UpdateResponse::_internal_local_g() const {
  const ::proto::Vector3* p = _impl_.local_g_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Vector3&>(
      ::proto::_Vector3_default_instance_);
}
inline const ::proto::Vector3& UpdateResponse::local_g() const {
  // @@protoc_insertion_point(field_get:proto.UpdateResponse.local_g)
  return _internal_local_g();
}
inline void UpdateResponse::unsafe_arena_set_allocated_local_g(
    ::proto::Vector3* local_g) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.local_g_);
  }
  _impl_.local_g_ = local_g;
  if (local_g) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UpdateResponse.local_g)
}
inline ::proto::Vector3* UpdateResponse::release_local_g() {
  
  ::proto::Vector3* temp = _impl_.local_g_;
  _impl_.local_g_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Vector3* UpdateResponse::unsafe_arena_release_local_g() {
  // @@protoc_insertion_point(field_release:proto.UpdateResponse.local_g)
  
  ::proto::Vector3* temp = _impl_.local_g_;
  _impl_.local_g_ = nullptr;
  return temp;
}
inline ::proto::Vector3* UpdateResponse::_internal_mutable_local_g() {
  
  if (_impl_.local_g_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Vector3>(GetArenaForAllocation());
    _impl_.local_g_ = p;
  }
  return _impl_.local_g_;
}
inline ::proto::Vector3* UpdateResponse::mutable_local_g() {
  ::proto::Vector3* _msg = _internal_mutable_local_g();
  // @@protoc_insertion_point(field_mutable:proto.UpdateResponse.local_g)
  return _msg;
}
inline void UpdateResponse::set_allocated_local_g(::proto::Vector3* local_g) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.local_g_;
  }
  if (local_g) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(local_g);
    if (message_arena != submessage_arena) {
      local_g = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_g, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.local_g_ = local_g;
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateResponse.local_g)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::proto::Element_TypeEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::Element_TypeEnum>() {
  return ::proto::Element_TypeEnum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_darwin_5fservice_2eproto
