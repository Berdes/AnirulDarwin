// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: darwin_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_darwin_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_darwin_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "vector_math.pb.h"
#include "world_parameter.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_darwin_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_darwin_5fservice_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_darwin_5fservice_2eproto;
namespace proto {
class CreateCharacterRequest;
struct CreateCharacterRequestDefaultTypeInternal;
extern CreateCharacterRequestDefaultTypeInternal _CreateCharacterRequest_default_instance_;
class CreateCharacterResponse;
struct CreateCharacterResponseDefaultTypeInternal;
extern CreateCharacterResponseDefaultTypeInternal _CreateCharacterResponse_default_instance_;
class PingRequest;
struct PingRequestDefaultTypeInternal;
extern PingRequestDefaultTypeInternal _PingRequest_default_instance_;
class PingResponse;
struct PingResponseDefaultTypeInternal;
extern PingResponseDefaultTypeInternal _PingResponse_default_instance_;
class ReportInGameRequest;
struct ReportInGameRequestDefaultTypeInternal;
extern ReportInGameRequestDefaultTypeInternal _ReportInGameRequest_default_instance_;
class ReportInGameResponse;
struct ReportInGameResponseDefaultTypeInternal;
extern ReportInGameResponseDefaultTypeInternal _ReportInGameResponse_default_instance_;
class UpdateRequest;
struct UpdateRequestDefaultTypeInternal;
extern UpdateRequestDefaultTypeInternal _UpdateRequest_default_instance_;
class UpdateResponse;
struct UpdateResponseDefaultTypeInternal;
extern UpdateResponseDefaultTypeInternal _UpdateResponse_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::CreateCharacterRequest* Arena::CreateMaybeMessage<::proto::CreateCharacterRequest>(Arena*);
template<> ::proto::CreateCharacterResponse* Arena::CreateMaybeMessage<::proto::CreateCharacterResponse>(Arena*);
template<> ::proto::PingRequest* Arena::CreateMaybeMessage<::proto::PingRequest>(Arena*);
template<> ::proto::PingResponse* Arena::CreateMaybeMessage<::proto::PingResponse>(Arena*);
template<> ::proto::ReportInGameRequest* Arena::CreateMaybeMessage<::proto::ReportInGameRequest>(Arena*);
template<> ::proto::ReportInGameResponse* Arena::CreateMaybeMessage<::proto::ReportInGameResponse>(Arena*);
template<> ::proto::UpdateRequest* Arena::CreateMaybeMessage<::proto::UpdateRequest>(Arena*);
template<> ::proto::UpdateResponse* Arena::CreateMaybeMessage<::proto::UpdateResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class UpdateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.UpdateRequest) */ {
 public:
  inline UpdateRequest() : UpdateRequest(nullptr) {}
  ~UpdateRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateRequest(const UpdateRequest& from);
  UpdateRequest(UpdateRequest&& from) noexcept
    : UpdateRequest() {
    *this = ::std::move(from);
  }

  inline UpdateRequest& operator=(const UpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateRequest& operator=(UpdateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateRequest*>(
               &_UpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UpdateRequest& a, UpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateRequest& from) {
    UpdateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.UpdateRequest";
  }
  protected:
  explicit UpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:proto.UpdateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_darwin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.UpdateResponse) */ {
 public:
  inline UpdateResponse() : UpdateResponse(nullptr) {}
  ~UpdateResponse() override;
  explicit PROTOBUF_CONSTEXPR UpdateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateResponse(const UpdateResponse& from);
  UpdateResponse(UpdateResponse&& from) noexcept
    : UpdateResponse() {
    *this = ::std::move(from);
  }

  inline UpdateResponse& operator=(const UpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateResponse& operator=(UpdateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateResponse*>(
               &_UpdateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UpdateResponse& a, UpdateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateResponse& from) {
    UpdateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.UpdateResponse";
  }
  protected:
  explicit UpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharactersFieldNumber = 1,
    kElementsFieldNumber = 2,
    kTimeFieldNumber = 3,
  };
  // repeated .proto.Character characters = 1;
  int characters_size() const;
  private:
  int _internal_characters_size() const;
  public:
  void clear_characters();
  ::proto::Character* mutable_characters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Character >*
      mutable_characters();
  private:
  const ::proto::Character& _internal_characters(int index) const;
  ::proto::Character* _internal_add_characters();
  public:
  const ::proto::Character& characters(int index) const;
  ::proto::Character* add_characters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Character >&
      characters() const;

  // repeated .proto.Element elements = 2;
  int elements_size() const;
  private:
  int _internal_elements_size() const;
  public:
  void clear_elements();
  ::proto::Element* mutable_elements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Element >*
      mutable_elements();
  private:
  const ::proto::Element& _internal_elements(int index) const;
  ::proto::Element* _internal_add_elements();
  public:
  const ::proto::Element& elements(int index) const;
  ::proto::Element* add_elements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Element >&
      elements() const;

  // double time = 3;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:proto.UpdateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Character > characters_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Element > elements_;
    double time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_darwin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ReportInGameRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ReportInGameRequest) */ {
 public:
  inline ReportInGameRequest() : ReportInGameRequest(nullptr) {}
  ~ReportInGameRequest() override;
  explicit PROTOBUF_CONSTEXPR ReportInGameRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReportInGameRequest(const ReportInGameRequest& from);
  ReportInGameRequest(ReportInGameRequest&& from) noexcept
    : ReportInGameRequest() {
    *this = ::std::move(from);
  }

  inline ReportInGameRequest& operator=(const ReportInGameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportInGameRequest& operator=(ReportInGameRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReportInGameRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReportInGameRequest* internal_default_instance() {
    return reinterpret_cast<const ReportInGameRequest*>(
               &_ReportInGameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ReportInGameRequest& a, ReportInGameRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportInGameRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReportInGameRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReportInGameRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReportInGameRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReportInGameRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReportInGameRequest& from) {
    ReportInGameRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportInGameRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ReportInGameRequest";
  }
  protected:
  explicit ReportInGameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPotentialHitFieldNumber = 3,
    kPhysicFieldNumber = 2,
    kSpecialEffectBoostFieldNumber = 5,
    kStatusEnumFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string potential_hit = 3;
  void clear_potential_hit();
  const std::string& potential_hit() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_potential_hit(ArgT0&& arg0, ArgT... args);
  std::string* mutable_potential_hit();
  PROTOBUF_NODISCARD std::string* release_potential_hit();
  void set_allocated_potential_hit(std::string* potential_hit);
  private:
  const std::string& _internal_potential_hit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_potential_hit(const std::string& value);
  std::string* _internal_mutable_potential_hit();
  public:

  // .proto.Physic physic = 2;
  bool has_physic() const;
  private:
  bool _internal_has_physic() const;
  public:
  void clear_physic();
  const ::proto::Physic& physic() const;
  PROTOBUF_NODISCARD ::proto::Physic* release_physic();
  ::proto::Physic* mutable_physic();
  void set_allocated_physic(::proto::Physic* physic);
  private:
  const ::proto::Physic& _internal_physic() const;
  ::proto::Physic* _internal_mutable_physic();
  public:
  void unsafe_arena_set_allocated_physic(
      ::proto::Physic* physic);
  ::proto::Physic* unsafe_arena_release_physic();

  // .proto.SpecialEffectParameter special_effect_boost = 5;
  bool has_special_effect_boost() const;
  private:
  bool _internal_has_special_effect_boost() const;
  public:
  void clear_special_effect_boost();
  const ::proto::SpecialEffectParameter& special_effect_boost() const;
  PROTOBUF_NODISCARD ::proto::SpecialEffectParameter* release_special_effect_boost();
  ::proto::SpecialEffectParameter* mutable_special_effect_boost();
  void set_allocated_special_effect_boost(::proto::SpecialEffectParameter* special_effect_boost);
  private:
  const ::proto::SpecialEffectParameter& _internal_special_effect_boost() const;
  ::proto::SpecialEffectParameter* _internal_mutable_special_effect_boost();
  public:
  void unsafe_arena_set_allocated_special_effect_boost(
      ::proto::SpecialEffectParameter* special_effect_boost);
  ::proto::SpecialEffectParameter* unsafe_arena_release_special_effect_boost();

  // .proto.StatusEnum status_enum = 4;
  void clear_status_enum();
  ::proto::StatusEnum status_enum() const;
  void set_status_enum(::proto::StatusEnum value);
  private:
  ::proto::StatusEnum _internal_status_enum() const;
  void _internal_set_status_enum(::proto::StatusEnum value);
  public:

  // @@protoc_insertion_point(class_scope:proto.ReportInGameRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr potential_hit_;
    ::proto::Physic* physic_;
    ::proto::SpecialEffectParameter* special_effect_boost_;
    int status_enum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_darwin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ReportInGameResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:proto.ReportInGameResponse) */ {
 public:
  inline ReportInGameResponse() : ReportInGameResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ReportInGameResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReportInGameResponse(const ReportInGameResponse& from);
  ReportInGameResponse(ReportInGameResponse&& from) noexcept
    : ReportInGameResponse() {
    *this = ::std::move(from);
  }

  inline ReportInGameResponse& operator=(const ReportInGameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportInGameResponse& operator=(ReportInGameResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReportInGameResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReportInGameResponse* internal_default_instance() {
    return reinterpret_cast<const ReportInGameResponse*>(
               &_ReportInGameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReportInGameResponse& a, ReportInGameResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportInGameResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReportInGameResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReportInGameResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReportInGameResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ReportInGameResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ReportInGameResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ReportInGameResponse";
  }
  protected:
  explicit ReportInGameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.ReportInGameResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_darwin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CreateCharacterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.CreateCharacterRequest) */ {
 public:
  inline CreateCharacterRequest() : CreateCharacterRequest(nullptr) {}
  ~CreateCharacterRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateCharacterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateCharacterRequest(const CreateCharacterRequest& from);
  CreateCharacterRequest(CreateCharacterRequest&& from) noexcept
    : CreateCharacterRequest() {
    *this = ::std::move(from);
  }

  inline CreateCharacterRequest& operator=(const CreateCharacterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateCharacterRequest& operator=(CreateCharacterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateCharacterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateCharacterRequest* internal_default_instance() {
    return reinterpret_cast<const CreateCharacterRequest*>(
               &_CreateCharacterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CreateCharacterRequest& a, CreateCharacterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateCharacterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateCharacterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateCharacterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateCharacterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateCharacterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateCharacterRequest& from) {
    CreateCharacterRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateCharacterRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.CreateCharacterRequest";
  }
  protected:
  explicit CreateCharacterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kColorFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .proto.Vector3 color = 2;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::proto::Vector3& color() const;
  PROTOBUF_NODISCARD ::proto::Vector3* release_color();
  ::proto::Vector3* mutable_color();
  void set_allocated_color(::proto::Vector3* color);
  private:
  const ::proto::Vector3& _internal_color() const;
  ::proto::Vector3* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::proto::Vector3* color);
  ::proto::Vector3* unsafe_arena_release_color();

  // @@protoc_insertion_point(class_scope:proto.CreateCharacterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::proto::Vector3* color_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_darwin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CreateCharacterResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.CreateCharacterResponse) */ {
 public:
  inline CreateCharacterResponse() : CreateCharacterResponse(nullptr) {}
  ~CreateCharacterResponse() override;
  explicit PROTOBUF_CONSTEXPR CreateCharacterResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateCharacterResponse(const CreateCharacterResponse& from);
  CreateCharacterResponse(CreateCharacterResponse&& from) noexcept
    : CreateCharacterResponse() {
    *this = ::std::move(from);
  }

  inline CreateCharacterResponse& operator=(const CreateCharacterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateCharacterResponse& operator=(CreateCharacterResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateCharacterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateCharacterResponse* internal_default_instance() {
    return reinterpret_cast<const CreateCharacterResponse*>(
               &_CreateCharacterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CreateCharacterResponse& a, CreateCharacterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateCharacterResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateCharacterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateCharacterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateCharacterResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateCharacterResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateCharacterResponse& from) {
    CreateCharacterResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateCharacterResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.CreateCharacterResponse";
  }
  protected:
  explicit CreateCharacterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnEnumFieldNumber = 1,
  };
  // .proto.ReturnEnum return_enum = 1;
  void clear_return_enum();
  ::proto::ReturnEnum return_enum() const;
  void set_return_enum(::proto::ReturnEnum value);
  private:
  ::proto::ReturnEnum _internal_return_enum() const;
  void _internal_set_return_enum(::proto::ReturnEnum value);
  public:

  // @@protoc_insertion_point(class_scope:proto.CreateCharacterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int return_enum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_darwin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class PingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.PingRequest) */ {
 public:
  inline PingRequest() : PingRequest(nullptr) {}
  ~PingRequest() override;
  explicit PROTOBUF_CONSTEXPR PingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PingRequest(const PingRequest& from);
  PingRequest(PingRequest&& from) noexcept
    : PingRequest() {
    *this = ::std::move(from);
  }

  inline PingRequest& operator=(const PingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingRequest& operator=(PingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PingRequest* internal_default_instance() {
    return reinterpret_cast<const PingRequest*>(
               &_PingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PingRequest& a, PingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PingRequest& from) {
    PingRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PingRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.PingRequest";
  }
  protected:
  explicit PingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // int32 value = 1;
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.PingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_darwin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class PingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.PingResponse) */ {
 public:
  inline PingResponse() : PingResponse(nullptr) {}
  ~PingResponse() override;
  explicit PROTOBUF_CONSTEXPR PingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PingResponse(const PingResponse& from);
  PingResponse(PingResponse&& from) noexcept
    : PingResponse() {
    *this = ::std::move(from);
  }

  inline PingResponse& operator=(const PingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingResponse& operator=(PingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PingResponse* internal_default_instance() {
    return reinterpret_cast<const PingResponse*>(
               &_PingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PingResponse& a, PingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PingResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PingResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PingResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PingResponse& from) {
    PingResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PingResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.PingResponse";
  }
  protected:
  explicit PingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerParameterFieldNumber = 3,
    kTimeFieldNumber = 2,
    kValueFieldNumber = 1,
  };
  // .proto.PlayerParameter player_parameter = 3;
  bool has_player_parameter() const;
  private:
  bool _internal_has_player_parameter() const;
  public:
  void clear_player_parameter();
  const ::proto::PlayerParameter& player_parameter() const;
  PROTOBUF_NODISCARD ::proto::PlayerParameter* release_player_parameter();
  ::proto::PlayerParameter* mutable_player_parameter();
  void set_allocated_player_parameter(::proto::PlayerParameter* player_parameter);
  private:
  const ::proto::PlayerParameter& _internal_player_parameter() const;
  ::proto::PlayerParameter* _internal_mutable_player_parameter();
  public:
  void unsafe_arena_set_allocated_player_parameter(
      ::proto::PlayerParameter* player_parameter);
  ::proto::PlayerParameter* unsafe_arena_release_player_parameter();

  // double time = 2;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // int32 value = 1;
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.PingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::PlayerParameter* player_parameter_;
    double time_;
    int32_t value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_darwin_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UpdateRequest

// string name = 1;
inline void UpdateRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UpdateRequest::name() const {
  // @@protoc_insertion_point(field_get:proto.UpdateRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.UpdateRequest.name)
}
inline std::string* UpdateRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto.UpdateRequest.name)
  return _s;
}
inline const std::string& UpdateRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void UpdateRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateRequest::release_name() {
  // @@protoc_insertion_point(field_release:proto.UpdateRequest.name)
  return _impl_.name_.Release();
}
inline void UpdateRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateRequest.name)
}

// -------------------------------------------------------------------

// UpdateResponse

// repeated .proto.Character characters = 1;
inline int UpdateResponse::_internal_characters_size() const {
  return _impl_.characters_.size();
}
inline int UpdateResponse::characters_size() const {
  return _internal_characters_size();
}
inline ::proto::Character* UpdateResponse::mutable_characters(int index) {
  // @@protoc_insertion_point(field_mutable:proto.UpdateResponse.characters)
  return _impl_.characters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Character >*
UpdateResponse::mutable_characters() {
  // @@protoc_insertion_point(field_mutable_list:proto.UpdateResponse.characters)
  return &_impl_.characters_;
}
inline const ::proto::Character& UpdateResponse::_internal_characters(int index) const {
  return _impl_.characters_.Get(index);
}
inline const ::proto::Character& UpdateResponse::characters(int index) const {
  // @@protoc_insertion_point(field_get:proto.UpdateResponse.characters)
  return _internal_characters(index);
}
inline ::proto::Character* UpdateResponse::_internal_add_characters() {
  return _impl_.characters_.Add();
}
inline ::proto::Character* UpdateResponse::add_characters() {
  ::proto::Character* _add = _internal_add_characters();
  // @@protoc_insertion_point(field_add:proto.UpdateResponse.characters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Character >&
UpdateResponse::characters() const {
  // @@protoc_insertion_point(field_list:proto.UpdateResponse.characters)
  return _impl_.characters_;
}

// repeated .proto.Element elements = 2;
inline int UpdateResponse::_internal_elements_size() const {
  return _impl_.elements_.size();
}
inline int UpdateResponse::elements_size() const {
  return _internal_elements_size();
}
inline ::proto::Element* UpdateResponse::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:proto.UpdateResponse.elements)
  return _impl_.elements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Element >*
UpdateResponse::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:proto.UpdateResponse.elements)
  return &_impl_.elements_;
}
inline const ::proto::Element& UpdateResponse::_internal_elements(int index) const {
  return _impl_.elements_.Get(index);
}
inline const ::proto::Element& UpdateResponse::elements(int index) const {
  // @@protoc_insertion_point(field_get:proto.UpdateResponse.elements)
  return _internal_elements(index);
}
inline ::proto::Element* UpdateResponse::_internal_add_elements() {
  return _impl_.elements_.Add();
}
inline ::proto::Element* UpdateResponse::add_elements() {
  ::proto::Element* _add = _internal_add_elements();
  // @@protoc_insertion_point(field_add:proto.UpdateResponse.elements)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Element >&
UpdateResponse::elements() const {
  // @@protoc_insertion_point(field_list:proto.UpdateResponse.elements)
  return _impl_.elements_;
}

// double time = 3;
inline void UpdateResponse::clear_time() {
  _impl_.time_ = 0;
}
inline double UpdateResponse::_internal_time() const {
  return _impl_.time_;
}
inline double UpdateResponse::time() const {
  // @@protoc_insertion_point(field_get:proto.UpdateResponse.time)
  return _internal_time();
}
inline void UpdateResponse::_internal_set_time(double value) {
  
  _impl_.time_ = value;
}
inline void UpdateResponse::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:proto.UpdateResponse.time)
}

// -------------------------------------------------------------------

// ReportInGameRequest

// string name = 1;
inline void ReportInGameRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ReportInGameRequest::name() const {
  // @@protoc_insertion_point(field_get:proto.ReportInGameRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReportInGameRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ReportInGameRequest.name)
}
inline std::string* ReportInGameRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto.ReportInGameRequest.name)
  return _s;
}
inline const std::string& ReportInGameRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ReportInGameRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ReportInGameRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ReportInGameRequest::release_name() {
  // @@protoc_insertion_point(field_release:proto.ReportInGameRequest.name)
  return _impl_.name_.Release();
}
inline void ReportInGameRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.ReportInGameRequest.name)
}

// .proto.Physic physic = 2;
inline bool ReportInGameRequest::_internal_has_physic() const {
  return this != internal_default_instance() && _impl_.physic_ != nullptr;
}
inline bool ReportInGameRequest::has_physic() const {
  return _internal_has_physic();
}
inline const ::proto::Physic& ReportInGameRequest::_internal_physic() const {
  const ::proto::Physic* p = _impl_.physic_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Physic&>(
      ::proto::_Physic_default_instance_);
}
inline const ::proto::Physic& ReportInGameRequest::physic() const {
  // @@protoc_insertion_point(field_get:proto.ReportInGameRequest.physic)
  return _internal_physic();
}
inline void ReportInGameRequest::unsafe_arena_set_allocated_physic(
    ::proto::Physic* physic) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.physic_);
  }
  _impl_.physic_ = physic;
  if (physic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ReportInGameRequest.physic)
}
inline ::proto::Physic* ReportInGameRequest::release_physic() {
  
  ::proto::Physic* temp = _impl_.physic_;
  _impl_.physic_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Physic* ReportInGameRequest::unsafe_arena_release_physic() {
  // @@protoc_insertion_point(field_release:proto.ReportInGameRequest.physic)
  
  ::proto::Physic* temp = _impl_.physic_;
  _impl_.physic_ = nullptr;
  return temp;
}
inline ::proto::Physic* ReportInGameRequest::_internal_mutable_physic() {
  
  if (_impl_.physic_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Physic>(GetArenaForAllocation());
    _impl_.physic_ = p;
  }
  return _impl_.physic_;
}
inline ::proto::Physic* ReportInGameRequest::mutable_physic() {
  ::proto::Physic* _msg = _internal_mutable_physic();
  // @@protoc_insertion_point(field_mutable:proto.ReportInGameRequest.physic)
  return _msg;
}
inline void ReportInGameRequest::set_allocated_physic(::proto::Physic* physic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.physic_);
  }
  if (physic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(physic));
    if (message_arena != submessage_arena) {
      physic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, physic, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.physic_ = physic;
  // @@protoc_insertion_point(field_set_allocated:proto.ReportInGameRequest.physic)
}

// string potential_hit = 3;
inline void ReportInGameRequest::clear_potential_hit() {
  _impl_.potential_hit_.ClearToEmpty();
}
inline const std::string& ReportInGameRequest::potential_hit() const {
  // @@protoc_insertion_point(field_get:proto.ReportInGameRequest.potential_hit)
  return _internal_potential_hit();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReportInGameRequest::set_potential_hit(ArgT0&& arg0, ArgT... args) {
 
 _impl_.potential_hit_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ReportInGameRequest.potential_hit)
}
inline std::string* ReportInGameRequest::mutable_potential_hit() {
  std::string* _s = _internal_mutable_potential_hit();
  // @@protoc_insertion_point(field_mutable:proto.ReportInGameRequest.potential_hit)
  return _s;
}
inline const std::string& ReportInGameRequest::_internal_potential_hit() const {
  return _impl_.potential_hit_.Get();
}
inline void ReportInGameRequest::_internal_set_potential_hit(const std::string& value) {
  
  _impl_.potential_hit_.Set(value, GetArenaForAllocation());
}
inline std::string* ReportInGameRequest::_internal_mutable_potential_hit() {
  
  return _impl_.potential_hit_.Mutable(GetArenaForAllocation());
}
inline std::string* ReportInGameRequest::release_potential_hit() {
  // @@protoc_insertion_point(field_release:proto.ReportInGameRequest.potential_hit)
  return _impl_.potential_hit_.Release();
}
inline void ReportInGameRequest::set_allocated_potential_hit(std::string* potential_hit) {
  if (potential_hit != nullptr) {
    
  } else {
    
  }
  _impl_.potential_hit_.SetAllocated(potential_hit, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.potential_hit_.IsDefault()) {
    _impl_.potential_hit_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.ReportInGameRequest.potential_hit)
}

// .proto.StatusEnum status_enum = 4;
inline void ReportInGameRequest::clear_status_enum() {
  _impl_.status_enum_ = 0;
}
inline ::proto::StatusEnum ReportInGameRequest::_internal_status_enum() const {
  return static_cast< ::proto::StatusEnum >(_impl_.status_enum_);
}
inline ::proto::StatusEnum ReportInGameRequest::status_enum() const {
  // @@protoc_insertion_point(field_get:proto.ReportInGameRequest.status_enum)
  return _internal_status_enum();
}
inline void ReportInGameRequest::_internal_set_status_enum(::proto::StatusEnum value) {
  
  _impl_.status_enum_ = value;
}
inline void ReportInGameRequest::set_status_enum(::proto::StatusEnum value) {
  _internal_set_status_enum(value);
  // @@protoc_insertion_point(field_set:proto.ReportInGameRequest.status_enum)
}

// .proto.SpecialEffectParameter special_effect_boost = 5;
inline bool ReportInGameRequest::_internal_has_special_effect_boost() const {
  return this != internal_default_instance() && _impl_.special_effect_boost_ != nullptr;
}
inline bool ReportInGameRequest::has_special_effect_boost() const {
  return _internal_has_special_effect_boost();
}
inline const ::proto::SpecialEffectParameter& ReportInGameRequest::_internal_special_effect_boost() const {
  const ::proto::SpecialEffectParameter* p = _impl_.special_effect_boost_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SpecialEffectParameter&>(
      ::proto::_SpecialEffectParameter_default_instance_);
}
inline const ::proto::SpecialEffectParameter& ReportInGameRequest::special_effect_boost() const {
  // @@protoc_insertion_point(field_get:proto.ReportInGameRequest.special_effect_boost)
  return _internal_special_effect_boost();
}
inline void ReportInGameRequest::unsafe_arena_set_allocated_special_effect_boost(
    ::proto::SpecialEffectParameter* special_effect_boost) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.special_effect_boost_);
  }
  _impl_.special_effect_boost_ = special_effect_boost;
  if (special_effect_boost) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ReportInGameRequest.special_effect_boost)
}
inline ::proto::SpecialEffectParameter* ReportInGameRequest::release_special_effect_boost() {
  
  ::proto::SpecialEffectParameter* temp = _impl_.special_effect_boost_;
  _impl_.special_effect_boost_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SpecialEffectParameter* ReportInGameRequest::unsafe_arena_release_special_effect_boost() {
  // @@protoc_insertion_point(field_release:proto.ReportInGameRequest.special_effect_boost)
  
  ::proto::SpecialEffectParameter* temp = _impl_.special_effect_boost_;
  _impl_.special_effect_boost_ = nullptr;
  return temp;
}
inline ::proto::SpecialEffectParameter* ReportInGameRequest::_internal_mutable_special_effect_boost() {
  
  if (_impl_.special_effect_boost_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SpecialEffectParameter>(GetArenaForAllocation());
    _impl_.special_effect_boost_ = p;
  }
  return _impl_.special_effect_boost_;
}
inline ::proto::SpecialEffectParameter* ReportInGameRequest::mutable_special_effect_boost() {
  ::proto::SpecialEffectParameter* _msg = _internal_mutable_special_effect_boost();
  // @@protoc_insertion_point(field_mutable:proto.ReportInGameRequest.special_effect_boost)
  return _msg;
}
inline void ReportInGameRequest::set_allocated_special_effect_boost(::proto::SpecialEffectParameter* special_effect_boost) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.special_effect_boost_);
  }
  if (special_effect_boost) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(special_effect_boost));
    if (message_arena != submessage_arena) {
      special_effect_boost = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, special_effect_boost, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.special_effect_boost_ = special_effect_boost;
  // @@protoc_insertion_point(field_set_allocated:proto.ReportInGameRequest.special_effect_boost)
}

// -------------------------------------------------------------------

// ReportInGameResponse

// -------------------------------------------------------------------

// CreateCharacterRequest

// string name = 1;
inline void CreateCharacterRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CreateCharacterRequest::name() const {
  // @@protoc_insertion_point(field_get:proto.CreateCharacterRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateCharacterRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.CreateCharacterRequest.name)
}
inline std::string* CreateCharacterRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto.CreateCharacterRequest.name)
  return _s;
}
inline const std::string& CreateCharacterRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CreateCharacterRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateCharacterRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateCharacterRequest::release_name() {
  // @@protoc_insertion_point(field_release:proto.CreateCharacterRequest.name)
  return _impl_.name_.Release();
}
inline void CreateCharacterRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.CreateCharacterRequest.name)
}

// .proto.Vector3 color = 2;
inline bool CreateCharacterRequest::_internal_has_color() const {
  return this != internal_default_instance() && _impl_.color_ != nullptr;
}
inline bool CreateCharacterRequest::has_color() const {
  return _internal_has_color();
}
inline const ::proto::Vector3& CreateCharacterRequest::_internal_color() const {
  const ::proto::Vector3* p = _impl_.color_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Vector3&>(
      ::proto::_Vector3_default_instance_);
}
inline const ::proto::Vector3& CreateCharacterRequest::color() const {
  // @@protoc_insertion_point(field_get:proto.CreateCharacterRequest.color)
  return _internal_color();
}
inline void CreateCharacterRequest::unsafe_arena_set_allocated_color(
    ::proto::Vector3* color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.color_);
  }
  _impl_.color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CreateCharacterRequest.color)
}
inline ::proto::Vector3* CreateCharacterRequest::release_color() {
  
  ::proto::Vector3* temp = _impl_.color_;
  _impl_.color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Vector3* CreateCharacterRequest::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_release:proto.CreateCharacterRequest.color)
  
  ::proto::Vector3* temp = _impl_.color_;
  _impl_.color_ = nullptr;
  return temp;
}
inline ::proto::Vector3* CreateCharacterRequest::_internal_mutable_color() {
  
  if (_impl_.color_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Vector3>(GetArenaForAllocation());
    _impl_.color_ = p;
  }
  return _impl_.color_;
}
inline ::proto::Vector3* CreateCharacterRequest::mutable_color() {
  ::proto::Vector3* _msg = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:proto.CreateCharacterRequest.color)
  return _msg;
}
inline void CreateCharacterRequest::set_allocated_color(::proto::Vector3* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.color_);
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color));
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.color_ = color;
  // @@protoc_insertion_point(field_set_allocated:proto.CreateCharacterRequest.color)
}

// -------------------------------------------------------------------

// CreateCharacterResponse

// .proto.ReturnEnum return_enum = 1;
inline void CreateCharacterResponse::clear_return_enum() {
  _impl_.return_enum_ = 0;
}
inline ::proto::ReturnEnum CreateCharacterResponse::_internal_return_enum() const {
  return static_cast< ::proto::ReturnEnum >(_impl_.return_enum_);
}
inline ::proto::ReturnEnum CreateCharacterResponse::return_enum() const {
  // @@protoc_insertion_point(field_get:proto.CreateCharacterResponse.return_enum)
  return _internal_return_enum();
}
inline void CreateCharacterResponse::_internal_set_return_enum(::proto::ReturnEnum value) {
  
  _impl_.return_enum_ = value;
}
inline void CreateCharacterResponse::set_return_enum(::proto::ReturnEnum value) {
  _internal_set_return_enum(value);
  // @@protoc_insertion_point(field_set:proto.CreateCharacterResponse.return_enum)
}

// -------------------------------------------------------------------

// PingRequest

// int32 value = 1;
inline void PingRequest::clear_value() {
  _impl_.value_ = 0;
}
inline int32_t PingRequest::_internal_value() const {
  return _impl_.value_;
}
inline int32_t PingRequest::value() const {
  // @@protoc_insertion_point(field_get:proto.PingRequest.value)
  return _internal_value();
}
inline void PingRequest::_internal_set_value(int32_t value) {
  
  _impl_.value_ = value;
}
inline void PingRequest::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:proto.PingRequest.value)
}

// -------------------------------------------------------------------

// PingResponse

// int32 value = 1;
inline void PingResponse::clear_value() {
  _impl_.value_ = 0;
}
inline int32_t PingResponse::_internal_value() const {
  return _impl_.value_;
}
inline int32_t PingResponse::value() const {
  // @@protoc_insertion_point(field_get:proto.PingResponse.value)
  return _internal_value();
}
inline void PingResponse::_internal_set_value(int32_t value) {
  
  _impl_.value_ = value;
}
inline void PingResponse::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:proto.PingResponse.value)
}

// double time = 2;
inline void PingResponse::clear_time() {
  _impl_.time_ = 0;
}
inline double PingResponse::_internal_time() const {
  return _impl_.time_;
}
inline double PingResponse::time() const {
  // @@protoc_insertion_point(field_get:proto.PingResponse.time)
  return _internal_time();
}
inline void PingResponse::_internal_set_time(double value) {
  
  _impl_.time_ = value;
}
inline void PingResponse::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:proto.PingResponse.time)
}

// .proto.PlayerParameter player_parameter = 3;
inline bool PingResponse::_internal_has_player_parameter() const {
  return this != internal_default_instance() && _impl_.player_parameter_ != nullptr;
}
inline bool PingResponse::has_player_parameter() const {
  return _internal_has_player_parameter();
}
inline const ::proto::PlayerParameter& PingResponse::_internal_player_parameter() const {
  const ::proto::PlayerParameter* p = _impl_.player_parameter_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::PlayerParameter&>(
      ::proto::_PlayerParameter_default_instance_);
}
inline const ::proto::PlayerParameter& PingResponse::player_parameter() const {
  // @@protoc_insertion_point(field_get:proto.PingResponse.player_parameter)
  return _internal_player_parameter();
}
inline void PingResponse::unsafe_arena_set_allocated_player_parameter(
    ::proto::PlayerParameter* player_parameter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_parameter_);
  }
  _impl_.player_parameter_ = player_parameter;
  if (player_parameter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.PingResponse.player_parameter)
}
inline ::proto::PlayerParameter* PingResponse::release_player_parameter() {
  
  ::proto::PlayerParameter* temp = _impl_.player_parameter_;
  _impl_.player_parameter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::PlayerParameter* PingResponse::unsafe_arena_release_player_parameter() {
  // @@protoc_insertion_point(field_release:proto.PingResponse.player_parameter)
  
  ::proto::PlayerParameter* temp = _impl_.player_parameter_;
  _impl_.player_parameter_ = nullptr;
  return temp;
}
inline ::proto::PlayerParameter* PingResponse::_internal_mutable_player_parameter() {
  
  if (_impl_.player_parameter_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::PlayerParameter>(GetArenaForAllocation());
    _impl_.player_parameter_ = p;
  }
  return _impl_.player_parameter_;
}
inline ::proto::PlayerParameter* PingResponse::mutable_player_parameter() {
  ::proto::PlayerParameter* _msg = _internal_mutable_player_parameter();
  // @@protoc_insertion_point(field_mutable:proto.PingResponse.player_parameter)
  return _msg;
}
inline void PingResponse::set_allocated_player_parameter(::proto::PlayerParameter* player_parameter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_parameter_);
  }
  if (player_parameter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_parameter));
    if (message_arena != submessage_arena) {
      player_parameter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_parameter, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_parameter_ = player_parameter;
  // @@protoc_insertion_point(field_set_allocated:proto.PingResponse.player_parameter)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_darwin_5fservice_2eproto
