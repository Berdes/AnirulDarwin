// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: darwin_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_darwin_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_darwin_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_darwin_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_darwin_5fservice_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_darwin_5fservice_2eproto;
namespace proto {
class Character;
struct CharacterDefaultTypeInternal;
extern CharacterDefaultTypeInternal _Character_default_instance_;
class CharacterReport;
struct CharacterReportDefaultTypeInternal;
extern CharacterReportDefaultTypeInternal _CharacterReport_default_instance_;
class CreateCharacterRequest;
struct CreateCharacterRequestDefaultTypeInternal;
extern CreateCharacterRequestDefaultTypeInternal _CreateCharacterRequest_default_instance_;
class CreateCharacterResponse;
struct CreateCharacterResponseDefaultTypeInternal;
extern CreateCharacterResponseDefaultTypeInternal _CreateCharacterResponse_default_instance_;
class DeathReportRequest;
struct DeathReportRequestDefaultTypeInternal;
extern DeathReportRequestDefaultTypeInternal _DeathReportRequest_default_instance_;
class DeathReportResponse;
struct DeathReportResponseDefaultTypeInternal;
extern DeathReportResponseDefaultTypeInternal _DeathReportResponse_default_instance_;
class Element;
struct ElementDefaultTypeInternal;
extern ElementDefaultTypeInternal _Element_default_instance_;
class Physic;
struct PhysicDefaultTypeInternal;
extern PhysicDefaultTypeInternal _Physic_default_instance_;
class PingRequest;
struct PingRequestDefaultTypeInternal;
extern PingRequestDefaultTypeInternal _PingRequest_default_instance_;
class PingResponse;
struct PingResponseDefaultTypeInternal;
extern PingResponseDefaultTypeInternal _PingResponse_default_instance_;
class PlayerParameter;
struct PlayerParameterDefaultTypeInternal;
extern PlayerParameterDefaultTypeInternal _PlayerParameter_default_instance_;
class ReportMovementRequest;
struct ReportMovementRequestDefaultTypeInternal;
extern ReportMovementRequestDefaultTypeInternal _ReportMovementRequest_default_instance_;
class ReportMovementResponse;
struct ReportMovementResponseDefaultTypeInternal;
extern ReportMovementResponseDefaultTypeInternal _ReportMovementResponse_default_instance_;
class UpdateRequest;
struct UpdateRequestDefaultTypeInternal;
extern UpdateRequestDefaultTypeInternal _UpdateRequest_default_instance_;
class UpdateResponse;
struct UpdateResponseDefaultTypeInternal;
extern UpdateResponseDefaultTypeInternal _UpdateResponse_default_instance_;
class Vector3;
struct Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
class Vector4;
struct Vector4DefaultTypeInternal;
extern Vector4DefaultTypeInternal _Vector4_default_instance_;
class WorldDatabase;
struct WorldDatabaseDefaultTypeInternal;
extern WorldDatabaseDefaultTypeInternal _WorldDatabase_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::Character* Arena::CreateMaybeMessage<::proto::Character>(Arena*);
template<> ::proto::CharacterReport* Arena::CreateMaybeMessage<::proto::CharacterReport>(Arena*);
template<> ::proto::CreateCharacterRequest* Arena::CreateMaybeMessage<::proto::CreateCharacterRequest>(Arena*);
template<> ::proto::CreateCharacterResponse* Arena::CreateMaybeMessage<::proto::CreateCharacterResponse>(Arena*);
template<> ::proto::DeathReportRequest* Arena::CreateMaybeMessage<::proto::DeathReportRequest>(Arena*);
template<> ::proto::DeathReportResponse* Arena::CreateMaybeMessage<::proto::DeathReportResponse>(Arena*);
template<> ::proto::Element* Arena::CreateMaybeMessage<::proto::Element>(Arena*);
template<> ::proto::Physic* Arena::CreateMaybeMessage<::proto::Physic>(Arena*);
template<> ::proto::PingRequest* Arena::CreateMaybeMessage<::proto::PingRequest>(Arena*);
template<> ::proto::PingResponse* Arena::CreateMaybeMessage<::proto::PingResponse>(Arena*);
template<> ::proto::PlayerParameter* Arena::CreateMaybeMessage<::proto::PlayerParameter>(Arena*);
template<> ::proto::ReportMovementRequest* Arena::CreateMaybeMessage<::proto::ReportMovementRequest>(Arena*);
template<> ::proto::ReportMovementResponse* Arena::CreateMaybeMessage<::proto::ReportMovementResponse>(Arena*);
template<> ::proto::UpdateRequest* Arena::CreateMaybeMessage<::proto::UpdateRequest>(Arena*);
template<> ::proto::UpdateResponse* Arena::CreateMaybeMessage<::proto::UpdateResponse>(Arena*);
template<> ::proto::Vector3* Arena::CreateMaybeMessage<::proto::Vector3>(Arena*);
template<> ::proto::Vector4* Arena::CreateMaybeMessage<::proto::Vector4>(Arena*);
template<> ::proto::WorldDatabase* Arena::CreateMaybeMessage<::proto::WorldDatabase>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

enum ReturnEnum : int {
  RETURN_ERROR = 0,
  RETURN_OK = 1,
  RETURN_REJECTED = 2,
  ReturnEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ReturnEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ReturnEnum_IsValid(int value);
constexpr ReturnEnum ReturnEnum_MIN = RETURN_ERROR;
constexpr ReturnEnum ReturnEnum_MAX = RETURN_REJECTED;
constexpr int ReturnEnum_ARRAYSIZE = ReturnEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReturnEnum_descriptor();
template<typename T>
inline const std::string& ReturnEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReturnEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReturnEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReturnEnum_descriptor(), enum_t_value);
}
inline bool ReturnEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ReturnEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReturnEnum>(
    ReturnEnum_descriptor(), name, value);
}
enum VitalEnum : int {
  VITAL_NONE = 0,
  VITAL_ALIVE = 1,
  VITAL_DEAD = 2,
  VITAL_LOADING = 3,
  VitalEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  VitalEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool VitalEnum_IsValid(int value);
constexpr VitalEnum VitalEnum_MIN = VITAL_NONE;
constexpr VitalEnum VitalEnum_MAX = VITAL_LOADING;
constexpr int VitalEnum_ARRAYSIZE = VitalEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VitalEnum_descriptor();
template<typename T>
inline const std::string& VitalEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VitalEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VitalEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VitalEnum_descriptor(), enum_t_value);
}
inline bool VitalEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VitalEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VitalEnum>(
    VitalEnum_descriptor(), name, value);
}
enum StatusEnum : int {
  STATUS_UNKNOWN = 0,
  STATUS_ON_GROUND = 1,
  STATUS_JUMPING = 2,
  STATUS_LOADING = 3,
  STATUS_DEAD = 4,
  StatusEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  StatusEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool StatusEnum_IsValid(int value);
constexpr StatusEnum StatusEnum_MIN = STATUS_UNKNOWN;
constexpr StatusEnum StatusEnum_MAX = STATUS_DEAD;
constexpr int StatusEnum_ARRAYSIZE = StatusEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatusEnum_descriptor();
template<typename T>
inline const std::string& StatusEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StatusEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StatusEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StatusEnum_descriptor(), enum_t_value);
}
inline bool StatusEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StatusEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StatusEnum>(
    StatusEnum_descriptor(), name, value);
}
enum TypeEnum : int {
  TYPE_UNKNOWN = 0,
  TYPE_GROUND = 1,
  TYPE_EXPLOSION = 2,
  TYPE_UPGRADE = 3,
  TYPE_GREEN = 4,
  TYPE_BROWN = 5,
  TYPE_WATER = 6,
  TYPE_CHARACTER = 7,
  TypeEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TypeEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TypeEnum_IsValid(int value);
constexpr TypeEnum TypeEnum_MIN = TYPE_UNKNOWN;
constexpr TypeEnum TypeEnum_MAX = TYPE_CHARACTER;
constexpr int TypeEnum_ARRAYSIZE = TypeEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TypeEnum_descriptor();
template<typename T>
inline const std::string& TypeEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TypeEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TypeEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TypeEnum_descriptor(), enum_t_value);
}
inline bool TypeEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TypeEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TypeEnum>(
    TypeEnum_descriptor(), name, value);
}
enum ColorEnum : int {
  COLOR_ERROR = 0,
  COLOR_NO = 1,
  COLOR_YES = 2,
  COLOR_CIRCLE = 3,
  ColorEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ColorEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ColorEnum_IsValid(int value);
constexpr ColorEnum ColorEnum_MIN = COLOR_ERROR;
constexpr ColorEnum ColorEnum_MAX = COLOR_CIRCLE;
constexpr int ColorEnum_ARRAYSIZE = ColorEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ColorEnum_descriptor();
template<typename T>
inline const std::string& ColorEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ColorEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ColorEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ColorEnum_descriptor(), enum_t_value);
}
inline bool ColorEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ColorEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ColorEnum>(
    ColorEnum_descriptor(), name, value);
}
// ===================================================================

class Vector3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Vector3) */ {
 public:
  inline Vector3() : Vector3(nullptr) {}
  ~Vector3() override;
  explicit PROTOBUF_CONSTEXPR Vector3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector3(const Vector3& from);
  Vector3(Vector3&& from) noexcept
    : Vector3() {
    *this = ::std::move(from);
  }

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3& operator=(Vector3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector3& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector3* internal_default_instance() {
    return reinterpret_cast<const Vector3*>(
               &_Vector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vector3& a, Vector3& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vector3& from) {
    Vector3::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Vector3";
  }
  protected:
  explicit Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Vector3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double x_;
    double y_;
    double z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_darwin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Vector4 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Vector4) */ {
 public:
  inline Vector4() : Vector4(nullptr) {}
  ~Vector4() override;
  explicit PROTOBUF_CONSTEXPR Vector4(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector4(const Vector4& from);
  Vector4(Vector4&& from) noexcept
    : Vector4() {
    *this = ::std::move(from);
  }

  inline Vector4& operator=(const Vector4& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector4& operator=(Vector4&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector4& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector4* internal_default_instance() {
    return reinterpret_cast<const Vector4*>(
               &_Vector4_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Vector4& a, Vector4& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector4* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector4* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector4* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector4>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector4& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vector4& from) {
    Vector4::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector4* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Vector4";
  }
  protected:
  explicit Vector4(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kWFieldNumber = 4,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // double w = 4;
  void clear_w();
  double w() const;
  void set_w(double value);
  private:
  double _internal_w() const;
  void _internal_set_w(double value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Vector4)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double x_;
    double y_;
    double z_;
    double w_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_darwin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Physic final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Physic) */ {
 public:
  inline Physic() : Physic(nullptr) {}
  ~Physic() override;
  explicit PROTOBUF_CONSTEXPR Physic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Physic(const Physic& from);
  Physic(Physic&& from) noexcept
    : Physic() {
    *this = ::std::move(from);
  }

  inline Physic& operator=(const Physic& from) {
    CopyFrom(from);
    return *this;
  }
  inline Physic& operator=(Physic&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Physic& default_instance() {
    return *internal_default_instance();
  }
  static inline const Physic* internal_default_instance() {
    return reinterpret_cast<const Physic*>(
               &_Physic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Physic& a, Physic& b) {
    a.Swap(&b);
  }
  inline void Swap(Physic* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Physic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Physic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Physic>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Physic& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Physic& from) {
    Physic::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Physic* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Physic";
  }
  protected:
  explicit Physic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 3,
    kOrientationFieldNumber = 4,
    kPositionDtFieldNumber = 5,
    kOrientationDtFieldNumber = 6,
    kRadiusFieldNumber = 1,
    kMassFieldNumber = 2,
  };
  // .proto.Vector3 position = 3;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::proto::Vector3& position() const;
  PROTOBUF_NODISCARD ::proto::Vector3* release_position();
  ::proto::Vector3* mutable_position();
  void set_allocated_position(::proto::Vector3* position);
  private:
  const ::proto::Vector3& _internal_position() const;
  ::proto::Vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::proto::Vector3* position);
  ::proto::Vector3* unsafe_arena_release_position();

  // .proto.Vector4 orientation = 4;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::proto::Vector4& orientation() const;
  PROTOBUF_NODISCARD ::proto::Vector4* release_orientation();
  ::proto::Vector4* mutable_orientation();
  void set_allocated_orientation(::proto::Vector4* orientation);
  private:
  const ::proto::Vector4& _internal_orientation() const;
  ::proto::Vector4* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::proto::Vector4* orientation);
  ::proto::Vector4* unsafe_arena_release_orientation();

  // .proto.Vector3 position_dt = 5;
  bool has_position_dt() const;
  private:
  bool _internal_has_position_dt() const;
  public:
  void clear_position_dt();
  const ::proto::Vector3& position_dt() const;
  PROTOBUF_NODISCARD ::proto::Vector3* release_position_dt();
  ::proto::Vector3* mutable_position_dt();
  void set_allocated_position_dt(::proto::Vector3* position_dt);
  private:
  const ::proto::Vector3& _internal_position_dt() const;
  ::proto::Vector3* _internal_mutable_position_dt();
  public:
  void unsafe_arena_set_allocated_position_dt(
      ::proto::Vector3* position_dt);
  ::proto::Vector3* unsafe_arena_release_position_dt();

  // .proto.Vector4 orientation_dt = 6;
  bool has_orientation_dt() const;
  private:
  bool _internal_has_orientation_dt() const;
  public:
  void clear_orientation_dt();
  const ::proto::Vector4& orientation_dt() const;
  PROTOBUF_NODISCARD ::proto::Vector4* release_orientation_dt();
  ::proto::Vector4* mutable_orientation_dt();
  void set_allocated_orientation_dt(::proto::Vector4* orientation_dt);
  private:
  const ::proto::Vector4& _internal_orientation_dt() const;
  ::proto::Vector4* _internal_mutable_orientation_dt();
  public:
  void unsafe_arena_set_allocated_orientation_dt(
      ::proto::Vector4* orientation_dt);
  ::proto::Vector4* unsafe_arena_release_orientation_dt();

  // double radius = 1;
  void clear_radius();
  double radius() const;
  void set_radius(double value);
  private:
  double _internal_radius() const;
  void _internal_set_radius(double value);
  public:

  // double mass = 2;
  void clear_mass();
  double mass() const;
  void set_mass(double value);
  private:
  double _internal_mass() const;
  void _internal_set_mass(double value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Physic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::Vector3* position_;
    ::proto::Vector4* orientation_;
    ::proto::Vector3* position_dt_;
    ::proto::Vector4* orientation_dt_;
    double radius_;
    double mass_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_darwin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Element final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Element) */ {
 public:
  inline Element() : Element(nullptr) {}
  ~Element() override;
  explicit PROTOBUF_CONSTEXPR Element(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Element(const Element& from);
  Element(Element&& from) noexcept
    : Element() {
    *this = ::std::move(from);
  }

  inline Element& operator=(const Element& from) {
    CopyFrom(from);
    return *this;
  }
  inline Element& operator=(Element&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Element& default_instance() {
    return *internal_default_instance();
  }
  static inline const Element* internal_default_instance() {
    return reinterpret_cast<const Element*>(
               &_Element_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Element& a, Element& b) {
    a.Swap(&b);
  }
  inline void Swap(Element* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Element* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Element* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Element>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Element& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Element& from) {
    Element::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Element* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Element";
  }
  protected:
  explicit Element(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kColorFieldNumber = 2,
    kPhysicFieldNumber = 3,
    kTypeEnumFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .proto.Vector3 color = 2;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::proto::Vector3& color() const;
  PROTOBUF_NODISCARD ::proto::Vector3* release_color();
  ::proto::Vector3* mutable_color();
  void set_allocated_color(::proto::Vector3* color);
  private:
  const ::proto::Vector3& _internal_color() const;
  ::proto::Vector3* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::proto::Vector3* color);
  ::proto::Vector3* unsafe_arena_release_color();

  // .proto.Physic physic = 3;
  bool has_physic() const;
  private:
  bool _internal_has_physic() const;
  public:
  void clear_physic();
  const ::proto::Physic& physic() const;
  PROTOBUF_NODISCARD ::proto::Physic* release_physic();
  ::proto::Physic* mutable_physic();
  void set_allocated_physic(::proto::Physic* physic);
  private:
  const ::proto::Physic& _internal_physic() const;
  ::proto::Physic* _internal_mutable_physic();
  public:
  void unsafe_arena_set_allocated_physic(
      ::proto::Physic* physic);
  ::proto::Physic* unsafe_arena_release_physic();

  // .proto.TypeEnum type_enum = 4;
  void clear_type_enum();
  ::proto::TypeEnum type_enum() const;
  void set_type_enum(::proto::TypeEnum value);
  private:
  ::proto::TypeEnum _internal_type_enum() const;
  void _internal_set_type_enum(::proto::TypeEnum value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Element)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::proto::Vector3* color_;
    ::proto::Physic* physic_;
    int type_enum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_darwin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Character final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Character) */ {
 public:
  inline Character() : Character(nullptr) {}
  ~Character() override;
  explicit PROTOBUF_CONSTEXPR Character(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Character(const Character& from);
  Character(Character&& from) noexcept
    : Character() {
    *this = ::std::move(from);
  }

  inline Character& operator=(const Character& from) {
    CopyFrom(from);
    return *this;
  }
  inline Character& operator=(Character&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Character& default_instance() {
    return *internal_default_instance();
  }
  static inline const Character* internal_default_instance() {
    return reinterpret_cast<const Character*>(
               &_Character_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Character& a, Character& b) {
    a.Swap(&b);
  }
  inline void Swap(Character* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Character* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Character* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Character>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Character& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Character& from) {
    Character::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Character* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Character";
  }
  protected:
  explicit Character(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kColorFieldNumber = 2,
    kPhysicFieldNumber = 3,
    kGForceFieldNumber = 4,
    kNormalFieldNumber = 5,
    kStatusEnumFieldNumber = 6,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .proto.Vector3 color = 2;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::proto::Vector3& color() const;
  PROTOBUF_NODISCARD ::proto::Vector3* release_color();
  ::proto::Vector3* mutable_color();
  void set_allocated_color(::proto::Vector3* color);
  private:
  const ::proto::Vector3& _internal_color() const;
  ::proto::Vector3* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::proto::Vector3* color);
  ::proto::Vector3* unsafe_arena_release_color();

  // .proto.Physic physic = 3;
  bool has_physic() const;
  private:
  bool _internal_has_physic() const;
  public:
  void clear_physic();
  const ::proto::Physic& physic() const;
  PROTOBUF_NODISCARD ::proto::Physic* release_physic();
  ::proto::Physic* mutable_physic();
  void set_allocated_physic(::proto::Physic* physic);
  private:
  const ::proto::Physic& _internal_physic() const;
  ::proto::Physic* _internal_mutable_physic();
  public:
  void unsafe_arena_set_allocated_physic(
      ::proto::Physic* physic);
  ::proto::Physic* unsafe_arena_release_physic();

  // .proto.Vector3 g_force = 4;
  bool has_g_force() const;
  private:
  bool _internal_has_g_force() const;
  public:
  void clear_g_force();
  const ::proto::Vector3& g_force() const;
  PROTOBUF_NODISCARD ::proto::Vector3* release_g_force();
  ::proto::Vector3* mutable_g_force();
  void set_allocated_g_force(::proto::Vector3* g_force);
  private:
  const ::proto::Vector3& _internal_g_force() const;
  ::proto::Vector3* _internal_mutable_g_force();
  public:
  void unsafe_arena_set_allocated_g_force(
      ::proto::Vector3* g_force);
  ::proto::Vector3* unsafe_arena_release_g_force();

  // .proto.Vector3 normal = 5;
  bool has_normal() const;
  private:
  bool _internal_has_normal() const;
  public:
  void clear_normal();
  const ::proto::Vector3& normal() const;
  PROTOBUF_NODISCARD ::proto::Vector3* release_normal();
  ::proto::Vector3* mutable_normal();
  void set_allocated_normal(::proto::Vector3* normal);
  private:
  const ::proto::Vector3& _internal_normal() const;
  ::proto::Vector3* _internal_mutable_normal();
  public:
  void unsafe_arena_set_allocated_normal(
      ::proto::Vector3* normal);
  ::proto::Vector3* unsafe_arena_release_normal();

  // .proto.StatusEnum status_enum = 6;
  void clear_status_enum();
  ::proto::StatusEnum status_enum() const;
  void set_status_enum(::proto::StatusEnum value);
  private:
  ::proto::StatusEnum _internal_status_enum() const;
  void _internal_set_status_enum(::proto::StatusEnum value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Character)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::proto::Vector3* color_;
    ::proto::Physic* physic_;
    ::proto::Vector3* g_force_;
    ::proto::Vector3* normal_;
    int status_enum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_darwin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CharacterReport final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.CharacterReport) */ {
 public:
  inline CharacterReport() : CharacterReport(nullptr) {}
  ~CharacterReport() override;
  explicit PROTOBUF_CONSTEXPR CharacterReport(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CharacterReport(const CharacterReport& from);
  CharacterReport(CharacterReport&& from) noexcept
    : CharacterReport() {
    *this = ::std::move(from);
  }

  inline CharacterReport& operator=(const CharacterReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterReport& operator=(CharacterReport&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterReport& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterReport* internal_default_instance() {
    return reinterpret_cast<const CharacterReport*>(
               &_CharacterReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CharacterReport& a, CharacterReport& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterReport* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterReport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CharacterReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CharacterReport>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CharacterReport& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CharacterReport& from) {
    CharacterReport::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharacterReport* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.CharacterReport";
  }
  protected:
  explicit CharacterReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kColorFieldNumber = 4,
    kRadiusFieldNumber = 2,
    kVitalStatusFieldNumber = 3,
    kLastSeenFieldNumber = 5,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .proto.Vector3 color = 4;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::proto::Vector3& color() const;
  PROTOBUF_NODISCARD ::proto::Vector3* release_color();
  ::proto::Vector3* mutable_color();
  void set_allocated_color(::proto::Vector3* color);
  private:
  const ::proto::Vector3& _internal_color() const;
  ::proto::Vector3* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::proto::Vector3* color);
  ::proto::Vector3* unsafe_arena_release_color();

  // float radius = 2;
  void clear_radius();
  float radius() const;
  void set_radius(float value);
  private:
  float _internal_radius() const;
  void _internal_set_radius(float value);
  public:

  // .proto.VitalEnum vital_status = 3;
  void clear_vital_status();
  ::proto::VitalEnum vital_status() const;
  void set_vital_status(::proto::VitalEnum value);
  private:
  ::proto::VitalEnum _internal_vital_status() const;
  void _internal_set_vital_status(::proto::VitalEnum value);
  public:

  // double last_seen = 5;
  void clear_last_seen();
  double last_seen() const;
  void set_last_seen(double value);
  private:
  double _internal_last_seen() const;
  void _internal_set_last_seen(double value);
  public:

  // @@protoc_insertion_point(class_scope:proto.CharacterReport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::proto::Vector3* color_;
    float radius_;
    int vital_status_;
    double last_seen_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_darwin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class PlayerParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.PlayerParameter) */ {
 public:
  inline PlayerParameter() : PlayerParameter(nullptr) {}
  ~PlayerParameter() override;
  explicit PROTOBUF_CONSTEXPR PlayerParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerParameter(const PlayerParameter& from);
  PlayerParameter(PlayerParameter&& from) noexcept
    : PlayerParameter() {
    *this = ::std::move(from);
  }

  inline PlayerParameter& operator=(const PlayerParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerParameter& operator=(PlayerParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerParameter* internal_default_instance() {
    return reinterpret_cast<const PlayerParameter*>(
               &_PlayerParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PlayerParameter& a, PlayerParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerParameter& from) {
    PlayerParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.PlayerParameter";
  }
  protected:
  explicit PlayerParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerticalSpeedFieldNumber = 1,
    kHorizontalSpeedFieldNumber = 2,
    kStartMassFieldNumber = 3,
    kDropHeightFieldNumber = 4,
    kPenaltyFieldNumber = 5,
    kDotPenaltyFieldNumber = 6,
    kMoveCostFieldNumber = 8,
    kFrictionFieldNumber = 9,
    kChangeColorFieldNumber = 7,
  };
  // double vertical_speed = 1;
  void clear_vertical_speed();
  double vertical_speed() const;
  void set_vertical_speed(double value);
  private:
  double _internal_vertical_speed() const;
  void _internal_set_vertical_speed(double value);
  public:

  // double horizontal_speed = 2;
  void clear_horizontal_speed();
  double horizontal_speed() const;
  void set_horizontal_speed(double value);
  private:
  double _internal_horizontal_speed() const;
  void _internal_set_horizontal_speed(double value);
  public:

  // double start_mass = 3;
  void clear_start_mass();
  double start_mass() const;
  void set_start_mass(double value);
  private:
  double _internal_start_mass() const;
  void _internal_set_start_mass(double value);
  public:

  // double drop_height = 4;
  void clear_drop_height();
  double drop_height() const;
  void set_drop_height(double value);
  private:
  double _internal_drop_height() const;
  void _internal_set_drop_height(double value);
  public:

  // double penalty = 5;
  void clear_penalty();
  double penalty() const;
  void set_penalty(double value);
  private:
  double _internal_penalty() const;
  void _internal_set_penalty(double value);
  public:

  // double dot_penalty = 6;
  void clear_dot_penalty();
  double dot_penalty() const;
  void set_dot_penalty(double value);
  private:
  double _internal_dot_penalty() const;
  void _internal_set_dot_penalty(double value);
  public:

  // double move_cost = 8;
  void clear_move_cost();
  double move_cost() const;
  void set_move_cost(double value);
  private:
  double _internal_move_cost() const;
  void _internal_set_move_cost(double value);
  public:

  // double friction = 9;
  void clear_friction();
  double friction() const;
  void set_friction(double value);
  private:
  double _internal_friction() const;
  void _internal_set_friction(double value);
  public:

  // .proto.ColorEnum change_color = 7;
  void clear_change_color();
  ::proto::ColorEnum change_color() const;
  void set_change_color(::proto::ColorEnum value);
  private:
  ::proto::ColorEnum _internal_change_color() const;
  void _internal_set_change_color(::proto::ColorEnum value);
  public:

  // @@protoc_insertion_point(class_scope:proto.PlayerParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double vertical_speed_;
    double horizontal_speed_;
    double start_mass_;
    double drop_height_;
    double penalty_;
    double dot_penalty_;
    double move_cost_;
    double friction_;
    int change_color_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_darwin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class WorldDatabase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.WorldDatabase) */ {
 public:
  inline WorldDatabase() : WorldDatabase(nullptr) {}
  ~WorldDatabase() override;
  explicit PROTOBUF_CONSTEXPR WorldDatabase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorldDatabase(const WorldDatabase& from);
  WorldDatabase(WorldDatabase&& from) noexcept
    : WorldDatabase() {
    *this = ::std::move(from);
  }

  inline WorldDatabase& operator=(const WorldDatabase& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorldDatabase& operator=(WorldDatabase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorldDatabase& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorldDatabase* internal_default_instance() {
    return reinterpret_cast<const WorldDatabase*>(
               &_WorldDatabase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(WorldDatabase& a, WorldDatabase& b) {
    a.Swap(&b);
  }
  inline void Swap(WorldDatabase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorldDatabase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorldDatabase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorldDatabase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WorldDatabase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WorldDatabase& from) {
    WorldDatabase::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorldDatabase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.WorldDatabase";
  }
  protected:
  explicit WorldDatabase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementsFieldNumber = 1,
    kCharactersFieldNumber = 2,
    kPlayerParameterFieldNumber = 4,
    kTimeFieldNumber = 3,
  };
  // repeated .proto.Element elements = 1;
  int elements_size() const;
  private:
  int _internal_elements_size() const;
  public:
  void clear_elements();
  ::proto::Element* mutable_elements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Element >*
      mutable_elements();
  private:
  const ::proto::Element& _internal_elements(int index) const;
  ::proto::Element* _internal_add_elements();
  public:
  const ::proto::Element& elements(int index) const;
  ::proto::Element* add_elements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Element >&
      elements() const;

  // repeated .proto.Character characters = 2;
  int characters_size() const;
  private:
  int _internal_characters_size() const;
  public:
  void clear_characters();
  ::proto::Character* mutable_characters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Character >*
      mutable_characters();
  private:
  const ::proto::Character& _internal_characters(int index) const;
  ::proto::Character* _internal_add_characters();
  public:
  const ::proto::Character& characters(int index) const;
  ::proto::Character* add_characters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Character >&
      characters() const;

  // .proto.PlayerParameter player_parameter = 4;
  bool has_player_parameter() const;
  private:
  bool _internal_has_player_parameter() const;
  public:
  void clear_player_parameter();
  const ::proto::PlayerParameter& player_parameter() const;
  PROTOBUF_NODISCARD ::proto::PlayerParameter* release_player_parameter();
  ::proto::PlayerParameter* mutable_player_parameter();
  void set_allocated_player_parameter(::proto::PlayerParameter* player_parameter);
  private:
  const ::proto::PlayerParameter& _internal_player_parameter() const;
  ::proto::PlayerParameter* _internal_mutable_player_parameter();
  public:
  void unsafe_arena_set_allocated_player_parameter(
      ::proto::PlayerParameter* player_parameter);
  ::proto::PlayerParameter* unsafe_arena_release_player_parameter();

  // double time = 3;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:proto.WorldDatabase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Element > elements_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Character > characters_;
    ::proto::PlayerParameter* player_parameter_;
    double time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_darwin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.UpdateRequest) */ {
 public:
  inline UpdateRequest() : UpdateRequest(nullptr) {}
  ~UpdateRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateRequest(const UpdateRequest& from);
  UpdateRequest(UpdateRequest&& from) noexcept
    : UpdateRequest() {
    *this = ::std::move(from);
  }

  inline UpdateRequest& operator=(const UpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateRequest& operator=(UpdateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateRequest*>(
               &_UpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UpdateRequest& a, UpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateRequest& from) {
    UpdateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.UpdateRequest";
  }
  protected:
  explicit UpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:proto.UpdateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_darwin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.UpdateResponse) */ {
 public:
  inline UpdateResponse() : UpdateResponse(nullptr) {}
  ~UpdateResponse() override;
  explicit PROTOBUF_CONSTEXPR UpdateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateResponse(const UpdateResponse& from);
  UpdateResponse(UpdateResponse&& from) noexcept
    : UpdateResponse() {
    *this = ::std::move(from);
  }

  inline UpdateResponse& operator=(const UpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateResponse& operator=(UpdateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateResponse*>(
               &_UpdateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(UpdateResponse& a, UpdateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateResponse& from) {
    UpdateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.UpdateResponse";
  }
  protected:
  explicit UpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharactersFieldNumber = 1,
    kElementsFieldNumber = 2,
    kTimeFieldNumber = 3,
  };
  // repeated .proto.Character characters = 1;
  int characters_size() const;
  private:
  int _internal_characters_size() const;
  public:
  void clear_characters();
  ::proto::Character* mutable_characters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Character >*
      mutable_characters();
  private:
  const ::proto::Character& _internal_characters(int index) const;
  ::proto::Character* _internal_add_characters();
  public:
  const ::proto::Character& characters(int index) const;
  ::proto::Character* add_characters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Character >&
      characters() const;

  // repeated .proto.Element elements = 2;
  int elements_size() const;
  private:
  int _internal_elements_size() const;
  public:
  void clear_elements();
  ::proto::Element* mutable_elements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Element >*
      mutable_elements();
  private:
  const ::proto::Element& _internal_elements(int index) const;
  ::proto::Element* _internal_add_elements();
  public:
  const ::proto::Element& elements(int index) const;
  ::proto::Element* add_elements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Element >&
      elements() const;

  // double time = 3;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:proto.UpdateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Character > characters_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Element > elements_;
    double time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_darwin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ReportMovementRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ReportMovementRequest) */ {
 public:
  inline ReportMovementRequest() : ReportMovementRequest(nullptr) {}
  ~ReportMovementRequest() override;
  explicit PROTOBUF_CONSTEXPR ReportMovementRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReportMovementRequest(const ReportMovementRequest& from);
  ReportMovementRequest(ReportMovementRequest&& from) noexcept
    : ReportMovementRequest() {
    *this = ::std::move(from);
  }

  inline ReportMovementRequest& operator=(const ReportMovementRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportMovementRequest& operator=(ReportMovementRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReportMovementRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReportMovementRequest* internal_default_instance() {
    return reinterpret_cast<const ReportMovementRequest*>(
               &_ReportMovementRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ReportMovementRequest& a, ReportMovementRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportMovementRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReportMovementRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReportMovementRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReportMovementRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReportMovementRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReportMovementRequest& from) {
    ReportMovementRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportMovementRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ReportMovementRequest";
  }
  protected:
  explicit ReportMovementRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPotentialHitFieldNumber = 3,
    kPhysicFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string potential_hit = 3;
  void clear_potential_hit();
  const std::string& potential_hit() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_potential_hit(ArgT0&& arg0, ArgT... args);
  std::string* mutable_potential_hit();
  PROTOBUF_NODISCARD std::string* release_potential_hit();
  void set_allocated_potential_hit(std::string* potential_hit);
  private:
  const std::string& _internal_potential_hit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_potential_hit(const std::string& value);
  std::string* _internal_mutable_potential_hit();
  public:

  // .proto.Physic physic = 2;
  bool has_physic() const;
  private:
  bool _internal_has_physic() const;
  public:
  void clear_physic();
  const ::proto::Physic& physic() const;
  PROTOBUF_NODISCARD ::proto::Physic* release_physic();
  ::proto::Physic* mutable_physic();
  void set_allocated_physic(::proto::Physic* physic);
  private:
  const ::proto::Physic& _internal_physic() const;
  ::proto::Physic* _internal_mutable_physic();
  public:
  void unsafe_arena_set_allocated_physic(
      ::proto::Physic* physic);
  ::proto::Physic* unsafe_arena_release_physic();

  // @@protoc_insertion_point(class_scope:proto.ReportMovementRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr potential_hit_;
    ::proto::Physic* physic_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_darwin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ReportMovementResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ReportMovementResponse) */ {
 public:
  inline ReportMovementResponse() : ReportMovementResponse(nullptr) {}
  ~ReportMovementResponse() override;
  explicit PROTOBUF_CONSTEXPR ReportMovementResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReportMovementResponse(const ReportMovementResponse& from);
  ReportMovementResponse(ReportMovementResponse&& from) noexcept
    : ReportMovementResponse() {
    *this = ::std::move(from);
  }

  inline ReportMovementResponse& operator=(const ReportMovementResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportMovementResponse& operator=(ReportMovementResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReportMovementResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReportMovementResponse* internal_default_instance() {
    return reinterpret_cast<const ReportMovementResponse*>(
               &_ReportMovementResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ReportMovementResponse& a, ReportMovementResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportMovementResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReportMovementResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReportMovementResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReportMovementResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReportMovementResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReportMovementResponse& from) {
    ReportMovementResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportMovementResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ReportMovementResponse";
  }
  protected:
  explicit ReportMovementResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnEnumFieldNumber = 1,
  };
  // .proto.ReturnEnum return_enum = 1;
  void clear_return_enum();
  ::proto::ReturnEnum return_enum() const;
  void set_return_enum(::proto::ReturnEnum value);
  private:
  ::proto::ReturnEnum _internal_return_enum() const;
  void _internal_set_return_enum(::proto::ReturnEnum value);
  public:

  // @@protoc_insertion_point(class_scope:proto.ReportMovementResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int return_enum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_darwin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CreateCharacterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.CreateCharacterRequest) */ {
 public:
  inline CreateCharacterRequest() : CreateCharacterRequest(nullptr) {}
  ~CreateCharacterRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateCharacterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateCharacterRequest(const CreateCharacterRequest& from);
  CreateCharacterRequest(CreateCharacterRequest&& from) noexcept
    : CreateCharacterRequest() {
    *this = ::std::move(from);
  }

  inline CreateCharacterRequest& operator=(const CreateCharacterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateCharacterRequest& operator=(CreateCharacterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateCharacterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateCharacterRequest* internal_default_instance() {
    return reinterpret_cast<const CreateCharacterRequest*>(
               &_CreateCharacterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CreateCharacterRequest& a, CreateCharacterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateCharacterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateCharacterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateCharacterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateCharacterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateCharacterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateCharacterRequest& from) {
    CreateCharacterRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateCharacterRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.CreateCharacterRequest";
  }
  protected:
  explicit CreateCharacterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kColorFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .proto.Vector3 color = 2;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::proto::Vector3& color() const;
  PROTOBUF_NODISCARD ::proto::Vector3* release_color();
  ::proto::Vector3* mutable_color();
  void set_allocated_color(::proto::Vector3* color);
  private:
  const ::proto::Vector3& _internal_color() const;
  ::proto::Vector3* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::proto::Vector3* color);
  ::proto::Vector3* unsafe_arena_release_color();

  // @@protoc_insertion_point(class_scope:proto.CreateCharacterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::proto::Vector3* color_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_darwin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CreateCharacterResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.CreateCharacterResponse) */ {
 public:
  inline CreateCharacterResponse() : CreateCharacterResponse(nullptr) {}
  ~CreateCharacterResponse() override;
  explicit PROTOBUF_CONSTEXPR CreateCharacterResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateCharacterResponse(const CreateCharacterResponse& from);
  CreateCharacterResponse(CreateCharacterResponse&& from) noexcept
    : CreateCharacterResponse() {
    *this = ::std::move(from);
  }

  inline CreateCharacterResponse& operator=(const CreateCharacterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateCharacterResponse& operator=(CreateCharacterResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateCharacterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateCharacterResponse* internal_default_instance() {
    return reinterpret_cast<const CreateCharacterResponse*>(
               &_CreateCharacterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CreateCharacterResponse& a, CreateCharacterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateCharacterResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateCharacterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateCharacterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateCharacterResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateCharacterResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateCharacterResponse& from) {
    CreateCharacterResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateCharacterResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.CreateCharacterResponse";
  }
  protected:
  explicit CreateCharacterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerParameterFieldNumber = 1,
    kReturnEnumFieldNumber = 2,
  };
  // .proto.PlayerParameter player_parameter = 1;
  bool has_player_parameter() const;
  private:
  bool _internal_has_player_parameter() const;
  public:
  void clear_player_parameter();
  const ::proto::PlayerParameter& player_parameter() const;
  PROTOBUF_NODISCARD ::proto::PlayerParameter* release_player_parameter();
  ::proto::PlayerParameter* mutable_player_parameter();
  void set_allocated_player_parameter(::proto::PlayerParameter* player_parameter);
  private:
  const ::proto::PlayerParameter& _internal_player_parameter() const;
  ::proto::PlayerParameter* _internal_mutable_player_parameter();
  public:
  void unsafe_arena_set_allocated_player_parameter(
      ::proto::PlayerParameter* player_parameter);
  ::proto::PlayerParameter* unsafe_arena_release_player_parameter();

  // .proto.ReturnEnum return_enum = 2;
  void clear_return_enum();
  ::proto::ReturnEnum return_enum() const;
  void set_return_enum(::proto::ReturnEnum value);
  private:
  ::proto::ReturnEnum _internal_return_enum() const;
  void _internal_set_return_enum(::proto::ReturnEnum value);
  public:

  // @@protoc_insertion_point(class_scope:proto.CreateCharacterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::PlayerParameter* player_parameter_;
    int return_enum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_darwin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class PingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.PingRequest) */ {
 public:
  inline PingRequest() : PingRequest(nullptr) {}
  ~PingRequest() override;
  explicit PROTOBUF_CONSTEXPR PingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PingRequest(const PingRequest& from);
  PingRequest(PingRequest&& from) noexcept
    : PingRequest() {
    *this = ::std::move(from);
  }

  inline PingRequest& operator=(const PingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingRequest& operator=(PingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PingRequest* internal_default_instance() {
    return reinterpret_cast<const PingRequest*>(
               &_PingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(PingRequest& a, PingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PingRequest& from) {
    PingRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PingRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.PingRequest";
  }
  protected:
  explicit PingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // int32 value = 1;
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.PingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_darwin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class PingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.PingResponse) */ {
 public:
  inline PingResponse() : PingResponse(nullptr) {}
  ~PingResponse() override;
  explicit PROTOBUF_CONSTEXPR PingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PingResponse(const PingResponse& from);
  PingResponse(PingResponse&& from) noexcept
    : PingResponse() {
    *this = ::std::move(from);
  }

  inline PingResponse& operator=(const PingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingResponse& operator=(PingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PingResponse* internal_default_instance() {
    return reinterpret_cast<const PingResponse*>(
               &_PingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(PingResponse& a, PingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PingResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PingResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PingResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PingResponse& from) {
    PingResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PingResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.PingResponse";
  }
  protected:
  explicit PingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 2,
    kValueFieldNumber = 1,
  };
  // double time = 2;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // int32 value = 1;
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.PingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double time_;
    int32_t value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_darwin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DeathReportRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.DeathReportRequest) */ {
 public:
  inline DeathReportRequest() : DeathReportRequest(nullptr) {}
  ~DeathReportRequest() override;
  explicit PROTOBUF_CONSTEXPR DeathReportRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeathReportRequest(const DeathReportRequest& from);
  DeathReportRequest(DeathReportRequest&& from) noexcept
    : DeathReportRequest() {
    *this = ::std::move(from);
  }

  inline DeathReportRequest& operator=(const DeathReportRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeathReportRequest& operator=(DeathReportRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeathReportRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeathReportRequest* internal_default_instance() {
    return reinterpret_cast<const DeathReportRequest*>(
               &_DeathReportRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(DeathReportRequest& a, DeathReportRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeathReportRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeathReportRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeathReportRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeathReportRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeathReportRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeathReportRequest& from) {
    DeathReportRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeathReportRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.DeathReportRequest";
  }
  protected:
  explicit DeathReportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSessionTockenFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string session_tocken = 2;
  void clear_session_tocken();
  const std::string& session_tocken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_tocken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_tocken();
  PROTOBUF_NODISCARD std::string* release_session_tocken();
  void set_allocated_session_tocken(std::string* session_tocken);
  private:
  const std::string& _internal_session_tocken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_tocken(const std::string& value);
  std::string* _internal_mutable_session_tocken();
  public:

  // @@protoc_insertion_point(class_scope:proto.DeathReportRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_tocken_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_darwin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DeathReportResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.DeathReportResponse) */ {
 public:
  inline DeathReportResponse() : DeathReportResponse(nullptr) {}
  ~DeathReportResponse() override;
  explicit PROTOBUF_CONSTEXPR DeathReportResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeathReportResponse(const DeathReportResponse& from);
  DeathReportResponse(DeathReportResponse&& from) noexcept
    : DeathReportResponse() {
    *this = ::std::move(from);
  }

  inline DeathReportResponse& operator=(const DeathReportResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeathReportResponse& operator=(DeathReportResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeathReportResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeathReportResponse* internal_default_instance() {
    return reinterpret_cast<const DeathReportResponse*>(
               &_DeathReportResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(DeathReportResponse& a, DeathReportResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeathReportResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeathReportResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeathReportResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeathReportResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeathReportResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeathReportResponse& from) {
    DeathReportResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeathReportResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.DeathReportResponse";
  }
  protected:
  explicit DeathReportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterReportsFieldNumber = 3,
    kTimeFieldNumber = 2,
    kReturnEnumFieldNumber = 1,
  };
  // repeated .proto.CharacterReport character_reports = 3;
  int character_reports_size() const;
  private:
  int _internal_character_reports_size() const;
  public:
  void clear_character_reports();
  ::proto::CharacterReport* mutable_character_reports(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::CharacterReport >*
      mutable_character_reports();
  private:
  const ::proto::CharacterReport& _internal_character_reports(int index) const;
  ::proto::CharacterReport* _internal_add_character_reports();
  public:
  const ::proto::CharacterReport& character_reports(int index) const;
  ::proto::CharacterReport* add_character_reports();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::CharacterReport >&
      character_reports() const;

  // double time = 2;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // .proto.ReturnEnum return_enum = 1;
  void clear_return_enum();
  ::proto::ReturnEnum return_enum() const;
  void set_return_enum(::proto::ReturnEnum value);
  private:
  ::proto::ReturnEnum _internal_return_enum() const;
  void _internal_set_return_enum(::proto::ReturnEnum value);
  public:

  // @@protoc_insertion_point(class_scope:proto.DeathReportResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::CharacterReport > character_reports_;
    double time_;
    int return_enum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_darwin_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector3

// double x = 1;
inline void Vector3::clear_x() {
  _impl_.x_ = 0;
}
inline double Vector3::_internal_x() const {
  return _impl_.x_;
}
inline double Vector3::x() const {
  // @@protoc_insertion_point(field_get:proto.Vector3.x)
  return _internal_x();
}
inline void Vector3::_internal_set_x(double value) {
  
  _impl_.x_ = value;
}
inline void Vector3::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:proto.Vector3.x)
}

// double y = 2;
inline void Vector3::clear_y() {
  _impl_.y_ = 0;
}
inline double Vector3::_internal_y() const {
  return _impl_.y_;
}
inline double Vector3::y() const {
  // @@protoc_insertion_point(field_get:proto.Vector3.y)
  return _internal_y();
}
inline void Vector3::_internal_set_y(double value) {
  
  _impl_.y_ = value;
}
inline void Vector3::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:proto.Vector3.y)
}

// double z = 3;
inline void Vector3::clear_z() {
  _impl_.z_ = 0;
}
inline double Vector3::_internal_z() const {
  return _impl_.z_;
}
inline double Vector3::z() const {
  // @@protoc_insertion_point(field_get:proto.Vector3.z)
  return _internal_z();
}
inline void Vector3::_internal_set_z(double value) {
  
  _impl_.z_ = value;
}
inline void Vector3::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:proto.Vector3.z)
}

// -------------------------------------------------------------------

// Vector4

// double x = 1;
inline void Vector4::clear_x() {
  _impl_.x_ = 0;
}
inline double Vector4::_internal_x() const {
  return _impl_.x_;
}
inline double Vector4::x() const {
  // @@protoc_insertion_point(field_get:proto.Vector4.x)
  return _internal_x();
}
inline void Vector4::_internal_set_x(double value) {
  
  _impl_.x_ = value;
}
inline void Vector4::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:proto.Vector4.x)
}

// double y = 2;
inline void Vector4::clear_y() {
  _impl_.y_ = 0;
}
inline double Vector4::_internal_y() const {
  return _impl_.y_;
}
inline double Vector4::y() const {
  // @@protoc_insertion_point(field_get:proto.Vector4.y)
  return _internal_y();
}
inline void Vector4::_internal_set_y(double value) {
  
  _impl_.y_ = value;
}
inline void Vector4::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:proto.Vector4.y)
}

// double z = 3;
inline void Vector4::clear_z() {
  _impl_.z_ = 0;
}
inline double Vector4::_internal_z() const {
  return _impl_.z_;
}
inline double Vector4::z() const {
  // @@protoc_insertion_point(field_get:proto.Vector4.z)
  return _internal_z();
}
inline void Vector4::_internal_set_z(double value) {
  
  _impl_.z_ = value;
}
inline void Vector4::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:proto.Vector4.z)
}

// double w = 4;
inline void Vector4::clear_w() {
  _impl_.w_ = 0;
}
inline double Vector4::_internal_w() const {
  return _impl_.w_;
}
inline double Vector4::w() const {
  // @@protoc_insertion_point(field_get:proto.Vector4.w)
  return _internal_w();
}
inline void Vector4::_internal_set_w(double value) {
  
  _impl_.w_ = value;
}
inline void Vector4::set_w(double value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:proto.Vector4.w)
}

// -------------------------------------------------------------------

// Physic

// double radius = 1;
inline void Physic::clear_radius() {
  _impl_.radius_ = 0;
}
inline double Physic::_internal_radius() const {
  return _impl_.radius_;
}
inline double Physic::radius() const {
  // @@protoc_insertion_point(field_get:proto.Physic.radius)
  return _internal_radius();
}
inline void Physic::_internal_set_radius(double value) {
  
  _impl_.radius_ = value;
}
inline void Physic::set_radius(double value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:proto.Physic.radius)
}

// double mass = 2;
inline void Physic::clear_mass() {
  _impl_.mass_ = 0;
}
inline double Physic::_internal_mass() const {
  return _impl_.mass_;
}
inline double Physic::mass() const {
  // @@protoc_insertion_point(field_get:proto.Physic.mass)
  return _internal_mass();
}
inline void Physic::_internal_set_mass(double value) {
  
  _impl_.mass_ = value;
}
inline void Physic::set_mass(double value) {
  _internal_set_mass(value);
  // @@protoc_insertion_point(field_set:proto.Physic.mass)
}

// .proto.Vector3 position = 3;
inline bool Physic::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool Physic::has_position() const {
  return _internal_has_position();
}
inline void Physic::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
inline const ::proto::Vector3& Physic::_internal_position() const {
  const ::proto::Vector3* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Vector3&>(
      ::proto::_Vector3_default_instance_);
}
inline const ::proto::Vector3& Physic::position() const {
  // @@protoc_insertion_point(field_get:proto.Physic.position)
  return _internal_position();
}
inline void Physic::unsafe_arena_set_allocated_position(
    ::proto::Vector3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Physic.position)
}
inline ::proto::Vector3* Physic::release_position() {
  
  ::proto::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Vector3* Physic::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:proto.Physic.position)
  
  ::proto::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::proto::Vector3* Physic::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Vector3>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::proto::Vector3* Physic::mutable_position() {
  ::proto::Vector3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:proto.Physic.position)
  return _msg;
}
inline void Physic::set_allocated_position(::proto::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:proto.Physic.position)
}

// .proto.Vector3 position_dt = 5;
inline bool Physic::_internal_has_position_dt() const {
  return this != internal_default_instance() && _impl_.position_dt_ != nullptr;
}
inline bool Physic::has_position_dt() const {
  return _internal_has_position_dt();
}
inline void Physic::clear_position_dt() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_dt_ != nullptr) {
    delete _impl_.position_dt_;
  }
  _impl_.position_dt_ = nullptr;
}
inline const ::proto::Vector3& Physic::_internal_position_dt() const {
  const ::proto::Vector3* p = _impl_.position_dt_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Vector3&>(
      ::proto::_Vector3_default_instance_);
}
inline const ::proto::Vector3& Physic::position_dt() const {
  // @@protoc_insertion_point(field_get:proto.Physic.position_dt)
  return _internal_position_dt();
}
inline void Physic::unsafe_arena_set_allocated_position_dt(
    ::proto::Vector3* position_dt) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_dt_);
  }
  _impl_.position_dt_ = position_dt;
  if (position_dt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Physic.position_dt)
}
inline ::proto::Vector3* Physic::release_position_dt() {
  
  ::proto::Vector3* temp = _impl_.position_dt_;
  _impl_.position_dt_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Vector3* Physic::unsafe_arena_release_position_dt() {
  // @@protoc_insertion_point(field_release:proto.Physic.position_dt)
  
  ::proto::Vector3* temp = _impl_.position_dt_;
  _impl_.position_dt_ = nullptr;
  return temp;
}
inline ::proto::Vector3* Physic::_internal_mutable_position_dt() {
  
  if (_impl_.position_dt_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Vector3>(GetArenaForAllocation());
    _impl_.position_dt_ = p;
  }
  return _impl_.position_dt_;
}
inline ::proto::Vector3* Physic::mutable_position_dt() {
  ::proto::Vector3* _msg = _internal_mutable_position_dt();
  // @@protoc_insertion_point(field_mutable:proto.Physic.position_dt)
  return _msg;
}
inline void Physic::set_allocated_position_dt(::proto::Vector3* position_dt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_dt_;
  }
  if (position_dt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position_dt);
    if (message_arena != submessage_arena) {
      position_dt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position_dt, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_dt_ = position_dt;
  // @@protoc_insertion_point(field_set_allocated:proto.Physic.position_dt)
}

// .proto.Vector4 orientation = 4;
inline bool Physic::_internal_has_orientation() const {
  return this != internal_default_instance() && _impl_.orientation_ != nullptr;
}
inline bool Physic::has_orientation() const {
  return _internal_has_orientation();
}
inline void Physic::clear_orientation() {
  if (GetArenaForAllocation() == nullptr && _impl_.orientation_ != nullptr) {
    delete _impl_.orientation_;
  }
  _impl_.orientation_ = nullptr;
}
inline const ::proto::Vector4& Physic::_internal_orientation() const {
  const ::proto::Vector4* p = _impl_.orientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Vector4&>(
      ::proto::_Vector4_default_instance_);
}
inline const ::proto::Vector4& Physic::orientation() const {
  // @@protoc_insertion_point(field_get:proto.Physic.orientation)
  return _internal_orientation();
}
inline void Physic::unsafe_arena_set_allocated_orientation(
    ::proto::Vector4* orientation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.orientation_);
  }
  _impl_.orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Physic.orientation)
}
inline ::proto::Vector4* Physic::release_orientation() {
  
  ::proto::Vector4* temp = _impl_.orientation_;
  _impl_.orientation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Vector4* Physic::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:proto.Physic.orientation)
  
  ::proto::Vector4* temp = _impl_.orientation_;
  _impl_.orientation_ = nullptr;
  return temp;
}
inline ::proto::Vector4* Physic::_internal_mutable_orientation() {
  
  if (_impl_.orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Vector4>(GetArenaForAllocation());
    _impl_.orientation_ = p;
  }
  return _impl_.orientation_;
}
inline ::proto::Vector4* Physic::mutable_orientation() {
  ::proto::Vector4* _msg = _internal_mutable_orientation();
  // @@protoc_insertion_point(field_mutable:proto.Physic.orientation)
  return _msg;
}
inline void Physic::set_allocated_orientation(::proto::Vector4* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.orientation_;
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(orientation);
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:proto.Physic.orientation)
}

// .proto.Vector4 orientation_dt = 6;
inline bool Physic::_internal_has_orientation_dt() const {
  return this != internal_default_instance() && _impl_.orientation_dt_ != nullptr;
}
inline bool Physic::has_orientation_dt() const {
  return _internal_has_orientation_dt();
}
inline void Physic::clear_orientation_dt() {
  if (GetArenaForAllocation() == nullptr && _impl_.orientation_dt_ != nullptr) {
    delete _impl_.orientation_dt_;
  }
  _impl_.orientation_dt_ = nullptr;
}
inline const ::proto::Vector4& Physic::_internal_orientation_dt() const {
  const ::proto::Vector4* p = _impl_.orientation_dt_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Vector4&>(
      ::proto::_Vector4_default_instance_);
}
inline const ::proto::Vector4& Physic::orientation_dt() const {
  // @@protoc_insertion_point(field_get:proto.Physic.orientation_dt)
  return _internal_orientation_dt();
}
inline void Physic::unsafe_arena_set_allocated_orientation_dt(
    ::proto::Vector4* orientation_dt) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.orientation_dt_);
  }
  _impl_.orientation_dt_ = orientation_dt;
  if (orientation_dt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Physic.orientation_dt)
}
inline ::proto::Vector4* Physic::release_orientation_dt() {
  
  ::proto::Vector4* temp = _impl_.orientation_dt_;
  _impl_.orientation_dt_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Vector4* Physic::unsafe_arena_release_orientation_dt() {
  // @@protoc_insertion_point(field_release:proto.Physic.orientation_dt)
  
  ::proto::Vector4* temp = _impl_.orientation_dt_;
  _impl_.orientation_dt_ = nullptr;
  return temp;
}
inline ::proto::Vector4* Physic::_internal_mutable_orientation_dt() {
  
  if (_impl_.orientation_dt_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Vector4>(GetArenaForAllocation());
    _impl_.orientation_dt_ = p;
  }
  return _impl_.orientation_dt_;
}
inline ::proto::Vector4* Physic::mutable_orientation_dt() {
  ::proto::Vector4* _msg = _internal_mutable_orientation_dt();
  // @@protoc_insertion_point(field_mutable:proto.Physic.orientation_dt)
  return _msg;
}
inline void Physic::set_allocated_orientation_dt(::proto::Vector4* orientation_dt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.orientation_dt_;
  }
  if (orientation_dt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(orientation_dt);
    if (message_arena != submessage_arena) {
      orientation_dt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation_dt, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.orientation_dt_ = orientation_dt;
  // @@protoc_insertion_point(field_set_allocated:proto.Physic.orientation_dt)
}

// -------------------------------------------------------------------

// Element

// string name = 1;
inline void Element::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Element::name() const {
  // @@protoc_insertion_point(field_get:proto.Element.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Element::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.Element.name)
}
inline std::string* Element::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto.Element.name)
  return _s;
}
inline const std::string& Element::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Element::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Element::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Element::release_name() {
  // @@protoc_insertion_point(field_release:proto.Element.name)
  return _impl_.name_.Release();
}
inline void Element::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.Element.name)
}

// .proto.Vector3 color = 2;
inline bool Element::_internal_has_color() const {
  return this != internal_default_instance() && _impl_.color_ != nullptr;
}
inline bool Element::has_color() const {
  return _internal_has_color();
}
inline void Element::clear_color() {
  if (GetArenaForAllocation() == nullptr && _impl_.color_ != nullptr) {
    delete _impl_.color_;
  }
  _impl_.color_ = nullptr;
}
inline const ::proto::Vector3& Element::_internal_color() const {
  const ::proto::Vector3* p = _impl_.color_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Vector3&>(
      ::proto::_Vector3_default_instance_);
}
inline const ::proto::Vector3& Element::color() const {
  // @@protoc_insertion_point(field_get:proto.Element.color)
  return _internal_color();
}
inline void Element::unsafe_arena_set_allocated_color(
    ::proto::Vector3* color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.color_);
  }
  _impl_.color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Element.color)
}
inline ::proto::Vector3* Element::release_color() {
  
  ::proto::Vector3* temp = _impl_.color_;
  _impl_.color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Vector3* Element::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_release:proto.Element.color)
  
  ::proto::Vector3* temp = _impl_.color_;
  _impl_.color_ = nullptr;
  return temp;
}
inline ::proto::Vector3* Element::_internal_mutable_color() {
  
  if (_impl_.color_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Vector3>(GetArenaForAllocation());
    _impl_.color_ = p;
  }
  return _impl_.color_;
}
inline ::proto::Vector3* Element::mutable_color() {
  ::proto::Vector3* _msg = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:proto.Element.color)
  return _msg;
}
inline void Element::set_allocated_color(::proto::Vector3* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.color_;
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(color);
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.color_ = color;
  // @@protoc_insertion_point(field_set_allocated:proto.Element.color)
}

// .proto.Physic physic = 3;
inline bool Element::_internal_has_physic() const {
  return this != internal_default_instance() && _impl_.physic_ != nullptr;
}
inline bool Element::has_physic() const {
  return _internal_has_physic();
}
inline void Element::clear_physic() {
  if (GetArenaForAllocation() == nullptr && _impl_.physic_ != nullptr) {
    delete _impl_.physic_;
  }
  _impl_.physic_ = nullptr;
}
inline const ::proto::Physic& Element::_internal_physic() const {
  const ::proto::Physic* p = _impl_.physic_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Physic&>(
      ::proto::_Physic_default_instance_);
}
inline const ::proto::Physic& Element::physic() const {
  // @@protoc_insertion_point(field_get:proto.Element.physic)
  return _internal_physic();
}
inline void Element::unsafe_arena_set_allocated_physic(
    ::proto::Physic* physic) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.physic_);
  }
  _impl_.physic_ = physic;
  if (physic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Element.physic)
}
inline ::proto::Physic* Element::release_physic() {
  
  ::proto::Physic* temp = _impl_.physic_;
  _impl_.physic_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Physic* Element::unsafe_arena_release_physic() {
  // @@protoc_insertion_point(field_release:proto.Element.physic)
  
  ::proto::Physic* temp = _impl_.physic_;
  _impl_.physic_ = nullptr;
  return temp;
}
inline ::proto::Physic* Element::_internal_mutable_physic() {
  
  if (_impl_.physic_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Physic>(GetArenaForAllocation());
    _impl_.physic_ = p;
  }
  return _impl_.physic_;
}
inline ::proto::Physic* Element::mutable_physic() {
  ::proto::Physic* _msg = _internal_mutable_physic();
  // @@protoc_insertion_point(field_mutable:proto.Element.physic)
  return _msg;
}
inline void Element::set_allocated_physic(::proto::Physic* physic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.physic_;
  }
  if (physic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(physic);
    if (message_arena != submessage_arena) {
      physic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, physic, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.physic_ = physic;
  // @@protoc_insertion_point(field_set_allocated:proto.Element.physic)
}

// .proto.TypeEnum type_enum = 4;
inline void Element::clear_type_enum() {
  _impl_.type_enum_ = 0;
}
inline ::proto::TypeEnum Element::_internal_type_enum() const {
  return static_cast< ::proto::TypeEnum >(_impl_.type_enum_);
}
inline ::proto::TypeEnum Element::type_enum() const {
  // @@protoc_insertion_point(field_get:proto.Element.type_enum)
  return _internal_type_enum();
}
inline void Element::_internal_set_type_enum(::proto::TypeEnum value) {
  
  _impl_.type_enum_ = value;
}
inline void Element::set_type_enum(::proto::TypeEnum value) {
  _internal_set_type_enum(value);
  // @@protoc_insertion_point(field_set:proto.Element.type_enum)
}

// -------------------------------------------------------------------

// Character

// string name = 1;
inline void Character::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Character::name() const {
  // @@protoc_insertion_point(field_get:proto.Character.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Character::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.Character.name)
}
inline std::string* Character::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto.Character.name)
  return _s;
}
inline const std::string& Character::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Character::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Character::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Character::release_name() {
  // @@protoc_insertion_point(field_release:proto.Character.name)
  return _impl_.name_.Release();
}
inline void Character::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.Character.name)
}

// .proto.Vector3 color = 2;
inline bool Character::_internal_has_color() const {
  return this != internal_default_instance() && _impl_.color_ != nullptr;
}
inline bool Character::has_color() const {
  return _internal_has_color();
}
inline void Character::clear_color() {
  if (GetArenaForAllocation() == nullptr && _impl_.color_ != nullptr) {
    delete _impl_.color_;
  }
  _impl_.color_ = nullptr;
}
inline const ::proto::Vector3& Character::_internal_color() const {
  const ::proto::Vector3* p = _impl_.color_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Vector3&>(
      ::proto::_Vector3_default_instance_);
}
inline const ::proto::Vector3& Character::color() const {
  // @@protoc_insertion_point(field_get:proto.Character.color)
  return _internal_color();
}
inline void Character::unsafe_arena_set_allocated_color(
    ::proto::Vector3* color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.color_);
  }
  _impl_.color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Character.color)
}
inline ::proto::Vector3* Character::release_color() {
  
  ::proto::Vector3* temp = _impl_.color_;
  _impl_.color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Vector3* Character::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_release:proto.Character.color)
  
  ::proto::Vector3* temp = _impl_.color_;
  _impl_.color_ = nullptr;
  return temp;
}
inline ::proto::Vector3* Character::_internal_mutable_color() {
  
  if (_impl_.color_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Vector3>(GetArenaForAllocation());
    _impl_.color_ = p;
  }
  return _impl_.color_;
}
inline ::proto::Vector3* Character::mutable_color() {
  ::proto::Vector3* _msg = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:proto.Character.color)
  return _msg;
}
inline void Character::set_allocated_color(::proto::Vector3* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.color_;
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(color);
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.color_ = color;
  // @@protoc_insertion_point(field_set_allocated:proto.Character.color)
}

// .proto.Physic physic = 3;
inline bool Character::_internal_has_physic() const {
  return this != internal_default_instance() && _impl_.physic_ != nullptr;
}
inline bool Character::has_physic() const {
  return _internal_has_physic();
}
inline void Character::clear_physic() {
  if (GetArenaForAllocation() == nullptr && _impl_.physic_ != nullptr) {
    delete _impl_.physic_;
  }
  _impl_.physic_ = nullptr;
}
inline const ::proto::Physic& Character::_internal_physic() const {
  const ::proto::Physic* p = _impl_.physic_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Physic&>(
      ::proto::_Physic_default_instance_);
}
inline const ::proto::Physic& Character::physic() const {
  // @@protoc_insertion_point(field_get:proto.Character.physic)
  return _internal_physic();
}
inline void Character::unsafe_arena_set_allocated_physic(
    ::proto::Physic* physic) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.physic_);
  }
  _impl_.physic_ = physic;
  if (physic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Character.physic)
}
inline ::proto::Physic* Character::release_physic() {
  
  ::proto::Physic* temp = _impl_.physic_;
  _impl_.physic_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Physic* Character::unsafe_arena_release_physic() {
  // @@protoc_insertion_point(field_release:proto.Character.physic)
  
  ::proto::Physic* temp = _impl_.physic_;
  _impl_.physic_ = nullptr;
  return temp;
}
inline ::proto::Physic* Character::_internal_mutable_physic() {
  
  if (_impl_.physic_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Physic>(GetArenaForAllocation());
    _impl_.physic_ = p;
  }
  return _impl_.physic_;
}
inline ::proto::Physic* Character::mutable_physic() {
  ::proto::Physic* _msg = _internal_mutable_physic();
  // @@protoc_insertion_point(field_mutable:proto.Character.physic)
  return _msg;
}
inline void Character::set_allocated_physic(::proto::Physic* physic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.physic_;
  }
  if (physic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(physic);
    if (message_arena != submessage_arena) {
      physic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, physic, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.physic_ = physic;
  // @@protoc_insertion_point(field_set_allocated:proto.Character.physic)
}

// .proto.Vector3 g_force = 4;
inline bool Character::_internal_has_g_force() const {
  return this != internal_default_instance() && _impl_.g_force_ != nullptr;
}
inline bool Character::has_g_force() const {
  return _internal_has_g_force();
}
inline void Character::clear_g_force() {
  if (GetArenaForAllocation() == nullptr && _impl_.g_force_ != nullptr) {
    delete _impl_.g_force_;
  }
  _impl_.g_force_ = nullptr;
}
inline const ::proto::Vector3& Character::_internal_g_force() const {
  const ::proto::Vector3* p = _impl_.g_force_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Vector3&>(
      ::proto::_Vector3_default_instance_);
}
inline const ::proto::Vector3& Character::g_force() const {
  // @@protoc_insertion_point(field_get:proto.Character.g_force)
  return _internal_g_force();
}
inline void Character::unsafe_arena_set_allocated_g_force(
    ::proto::Vector3* g_force) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.g_force_);
  }
  _impl_.g_force_ = g_force;
  if (g_force) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Character.g_force)
}
inline ::proto::Vector3* Character::release_g_force() {
  
  ::proto::Vector3* temp = _impl_.g_force_;
  _impl_.g_force_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Vector3* Character::unsafe_arena_release_g_force() {
  // @@protoc_insertion_point(field_release:proto.Character.g_force)
  
  ::proto::Vector3* temp = _impl_.g_force_;
  _impl_.g_force_ = nullptr;
  return temp;
}
inline ::proto::Vector3* Character::_internal_mutable_g_force() {
  
  if (_impl_.g_force_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Vector3>(GetArenaForAllocation());
    _impl_.g_force_ = p;
  }
  return _impl_.g_force_;
}
inline ::proto::Vector3* Character::mutable_g_force() {
  ::proto::Vector3* _msg = _internal_mutable_g_force();
  // @@protoc_insertion_point(field_mutable:proto.Character.g_force)
  return _msg;
}
inline void Character::set_allocated_g_force(::proto::Vector3* g_force) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.g_force_;
  }
  if (g_force) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(g_force);
    if (message_arena != submessage_arena) {
      g_force = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, g_force, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.g_force_ = g_force;
  // @@protoc_insertion_point(field_set_allocated:proto.Character.g_force)
}

// .proto.Vector3 normal = 5;
inline bool Character::_internal_has_normal() const {
  return this != internal_default_instance() && _impl_.normal_ != nullptr;
}
inline bool Character::has_normal() const {
  return _internal_has_normal();
}
inline void Character::clear_normal() {
  if (GetArenaForAllocation() == nullptr && _impl_.normal_ != nullptr) {
    delete _impl_.normal_;
  }
  _impl_.normal_ = nullptr;
}
inline const ::proto::Vector3& Character::_internal_normal() const {
  const ::proto::Vector3* p = _impl_.normal_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Vector3&>(
      ::proto::_Vector3_default_instance_);
}
inline const ::proto::Vector3& Character::normal() const {
  // @@protoc_insertion_point(field_get:proto.Character.normal)
  return _internal_normal();
}
inline void Character::unsafe_arena_set_allocated_normal(
    ::proto::Vector3* normal) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.normal_);
  }
  _impl_.normal_ = normal;
  if (normal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Character.normal)
}
inline ::proto::Vector3* Character::release_normal() {
  
  ::proto::Vector3* temp = _impl_.normal_;
  _impl_.normal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Vector3* Character::unsafe_arena_release_normal() {
  // @@protoc_insertion_point(field_release:proto.Character.normal)
  
  ::proto::Vector3* temp = _impl_.normal_;
  _impl_.normal_ = nullptr;
  return temp;
}
inline ::proto::Vector3* Character::_internal_mutable_normal() {
  
  if (_impl_.normal_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Vector3>(GetArenaForAllocation());
    _impl_.normal_ = p;
  }
  return _impl_.normal_;
}
inline ::proto::Vector3* Character::mutable_normal() {
  ::proto::Vector3* _msg = _internal_mutable_normal();
  // @@protoc_insertion_point(field_mutable:proto.Character.normal)
  return _msg;
}
inline void Character::set_allocated_normal(::proto::Vector3* normal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.normal_;
  }
  if (normal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(normal);
    if (message_arena != submessage_arena) {
      normal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, normal, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.normal_ = normal;
  // @@protoc_insertion_point(field_set_allocated:proto.Character.normal)
}

// .proto.StatusEnum status_enum = 6;
inline void Character::clear_status_enum() {
  _impl_.status_enum_ = 0;
}
inline ::proto::StatusEnum Character::_internal_status_enum() const {
  return static_cast< ::proto::StatusEnum >(_impl_.status_enum_);
}
inline ::proto::StatusEnum Character::status_enum() const {
  // @@protoc_insertion_point(field_get:proto.Character.status_enum)
  return _internal_status_enum();
}
inline void Character::_internal_set_status_enum(::proto::StatusEnum value) {
  
  _impl_.status_enum_ = value;
}
inline void Character::set_status_enum(::proto::StatusEnum value) {
  _internal_set_status_enum(value);
  // @@protoc_insertion_point(field_set:proto.Character.status_enum)
}

// -------------------------------------------------------------------

// CharacterReport

// string name = 1;
inline void CharacterReport::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CharacterReport::name() const {
  // @@protoc_insertion_point(field_get:proto.CharacterReport.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CharacterReport::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.CharacterReport.name)
}
inline std::string* CharacterReport::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto.CharacterReport.name)
  return _s;
}
inline const std::string& CharacterReport::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CharacterReport::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CharacterReport::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CharacterReport::release_name() {
  // @@protoc_insertion_point(field_release:proto.CharacterReport.name)
  return _impl_.name_.Release();
}
inline void CharacterReport::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.CharacterReport.name)
}

// float radius = 2;
inline void CharacterReport::clear_radius() {
  _impl_.radius_ = 0;
}
inline float CharacterReport::_internal_radius() const {
  return _impl_.radius_;
}
inline float CharacterReport::radius() const {
  // @@protoc_insertion_point(field_get:proto.CharacterReport.radius)
  return _internal_radius();
}
inline void CharacterReport::_internal_set_radius(float value) {
  
  _impl_.radius_ = value;
}
inline void CharacterReport::set_radius(float value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:proto.CharacterReport.radius)
}

// .proto.VitalEnum vital_status = 3;
inline void CharacterReport::clear_vital_status() {
  _impl_.vital_status_ = 0;
}
inline ::proto::VitalEnum CharacterReport::_internal_vital_status() const {
  return static_cast< ::proto::VitalEnum >(_impl_.vital_status_);
}
inline ::proto::VitalEnum CharacterReport::vital_status() const {
  // @@protoc_insertion_point(field_get:proto.CharacterReport.vital_status)
  return _internal_vital_status();
}
inline void CharacterReport::_internal_set_vital_status(::proto::VitalEnum value) {
  
  _impl_.vital_status_ = value;
}
inline void CharacterReport::set_vital_status(::proto::VitalEnum value) {
  _internal_set_vital_status(value);
  // @@protoc_insertion_point(field_set:proto.CharacterReport.vital_status)
}

// .proto.Vector3 color = 4;
inline bool CharacterReport::_internal_has_color() const {
  return this != internal_default_instance() && _impl_.color_ != nullptr;
}
inline bool CharacterReport::has_color() const {
  return _internal_has_color();
}
inline void CharacterReport::clear_color() {
  if (GetArenaForAllocation() == nullptr && _impl_.color_ != nullptr) {
    delete _impl_.color_;
  }
  _impl_.color_ = nullptr;
}
inline const ::proto::Vector3& CharacterReport::_internal_color() const {
  const ::proto::Vector3* p = _impl_.color_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Vector3&>(
      ::proto::_Vector3_default_instance_);
}
inline const ::proto::Vector3& CharacterReport::color() const {
  // @@protoc_insertion_point(field_get:proto.CharacterReport.color)
  return _internal_color();
}
inline void CharacterReport::unsafe_arena_set_allocated_color(
    ::proto::Vector3* color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.color_);
  }
  _impl_.color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CharacterReport.color)
}
inline ::proto::Vector3* CharacterReport::release_color() {
  
  ::proto::Vector3* temp = _impl_.color_;
  _impl_.color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Vector3* CharacterReport::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_release:proto.CharacterReport.color)
  
  ::proto::Vector3* temp = _impl_.color_;
  _impl_.color_ = nullptr;
  return temp;
}
inline ::proto::Vector3* CharacterReport::_internal_mutable_color() {
  
  if (_impl_.color_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Vector3>(GetArenaForAllocation());
    _impl_.color_ = p;
  }
  return _impl_.color_;
}
inline ::proto::Vector3* CharacterReport::mutable_color() {
  ::proto::Vector3* _msg = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:proto.CharacterReport.color)
  return _msg;
}
inline void CharacterReport::set_allocated_color(::proto::Vector3* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.color_;
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(color);
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.color_ = color;
  // @@protoc_insertion_point(field_set_allocated:proto.CharacterReport.color)
}

// double last_seen = 5;
inline void CharacterReport::clear_last_seen() {
  _impl_.last_seen_ = 0;
}
inline double CharacterReport::_internal_last_seen() const {
  return _impl_.last_seen_;
}
inline double CharacterReport::last_seen() const {
  // @@protoc_insertion_point(field_get:proto.CharacterReport.last_seen)
  return _internal_last_seen();
}
inline void CharacterReport::_internal_set_last_seen(double value) {
  
  _impl_.last_seen_ = value;
}
inline void CharacterReport::set_last_seen(double value) {
  _internal_set_last_seen(value);
  // @@protoc_insertion_point(field_set:proto.CharacterReport.last_seen)
}

// -------------------------------------------------------------------

// PlayerParameter

// double vertical_speed = 1;
inline void PlayerParameter::clear_vertical_speed() {
  _impl_.vertical_speed_ = 0;
}
inline double PlayerParameter::_internal_vertical_speed() const {
  return _impl_.vertical_speed_;
}
inline double PlayerParameter::vertical_speed() const {
  // @@protoc_insertion_point(field_get:proto.PlayerParameter.vertical_speed)
  return _internal_vertical_speed();
}
inline void PlayerParameter::_internal_set_vertical_speed(double value) {
  
  _impl_.vertical_speed_ = value;
}
inline void PlayerParameter::set_vertical_speed(double value) {
  _internal_set_vertical_speed(value);
  // @@protoc_insertion_point(field_set:proto.PlayerParameter.vertical_speed)
}

// double horizontal_speed = 2;
inline void PlayerParameter::clear_horizontal_speed() {
  _impl_.horizontal_speed_ = 0;
}
inline double PlayerParameter::_internal_horizontal_speed() const {
  return _impl_.horizontal_speed_;
}
inline double PlayerParameter::horizontal_speed() const {
  // @@protoc_insertion_point(field_get:proto.PlayerParameter.horizontal_speed)
  return _internal_horizontal_speed();
}
inline void PlayerParameter::_internal_set_horizontal_speed(double value) {
  
  _impl_.horizontal_speed_ = value;
}
inline void PlayerParameter::set_horizontal_speed(double value) {
  _internal_set_horizontal_speed(value);
  // @@protoc_insertion_point(field_set:proto.PlayerParameter.horizontal_speed)
}

// double start_mass = 3;
inline void PlayerParameter::clear_start_mass() {
  _impl_.start_mass_ = 0;
}
inline double PlayerParameter::_internal_start_mass() const {
  return _impl_.start_mass_;
}
inline double PlayerParameter::start_mass() const {
  // @@protoc_insertion_point(field_get:proto.PlayerParameter.start_mass)
  return _internal_start_mass();
}
inline void PlayerParameter::_internal_set_start_mass(double value) {
  
  _impl_.start_mass_ = value;
}
inline void PlayerParameter::set_start_mass(double value) {
  _internal_set_start_mass(value);
  // @@protoc_insertion_point(field_set:proto.PlayerParameter.start_mass)
}

// double drop_height = 4;
inline void PlayerParameter::clear_drop_height() {
  _impl_.drop_height_ = 0;
}
inline double PlayerParameter::_internal_drop_height() const {
  return _impl_.drop_height_;
}
inline double PlayerParameter::drop_height() const {
  // @@protoc_insertion_point(field_get:proto.PlayerParameter.drop_height)
  return _internal_drop_height();
}
inline void PlayerParameter::_internal_set_drop_height(double value) {
  
  _impl_.drop_height_ = value;
}
inline void PlayerParameter::set_drop_height(double value) {
  _internal_set_drop_height(value);
  // @@protoc_insertion_point(field_set:proto.PlayerParameter.drop_height)
}

// double penalty = 5;
inline void PlayerParameter::clear_penalty() {
  _impl_.penalty_ = 0;
}
inline double PlayerParameter::_internal_penalty() const {
  return _impl_.penalty_;
}
inline double PlayerParameter::penalty() const {
  // @@protoc_insertion_point(field_get:proto.PlayerParameter.penalty)
  return _internal_penalty();
}
inline void PlayerParameter::_internal_set_penalty(double value) {
  
  _impl_.penalty_ = value;
}
inline void PlayerParameter::set_penalty(double value) {
  _internal_set_penalty(value);
  // @@protoc_insertion_point(field_set:proto.PlayerParameter.penalty)
}

// double dot_penalty = 6;
inline void PlayerParameter::clear_dot_penalty() {
  _impl_.dot_penalty_ = 0;
}
inline double PlayerParameter::_internal_dot_penalty() const {
  return _impl_.dot_penalty_;
}
inline double PlayerParameter::dot_penalty() const {
  // @@protoc_insertion_point(field_get:proto.PlayerParameter.dot_penalty)
  return _internal_dot_penalty();
}
inline void PlayerParameter::_internal_set_dot_penalty(double value) {
  
  _impl_.dot_penalty_ = value;
}
inline void PlayerParameter::set_dot_penalty(double value) {
  _internal_set_dot_penalty(value);
  // @@protoc_insertion_point(field_set:proto.PlayerParameter.dot_penalty)
}

// .proto.ColorEnum change_color = 7;
inline void PlayerParameter::clear_change_color() {
  _impl_.change_color_ = 0;
}
inline ::proto::ColorEnum PlayerParameter::_internal_change_color() const {
  return static_cast< ::proto::ColorEnum >(_impl_.change_color_);
}
inline ::proto::ColorEnum PlayerParameter::change_color() const {
  // @@protoc_insertion_point(field_get:proto.PlayerParameter.change_color)
  return _internal_change_color();
}
inline void PlayerParameter::_internal_set_change_color(::proto::ColorEnum value) {
  
  _impl_.change_color_ = value;
}
inline void PlayerParameter::set_change_color(::proto::ColorEnum value) {
  _internal_set_change_color(value);
  // @@protoc_insertion_point(field_set:proto.PlayerParameter.change_color)
}

// double move_cost = 8;
inline void PlayerParameter::clear_move_cost() {
  _impl_.move_cost_ = 0;
}
inline double PlayerParameter::_internal_move_cost() const {
  return _impl_.move_cost_;
}
inline double PlayerParameter::move_cost() const {
  // @@protoc_insertion_point(field_get:proto.PlayerParameter.move_cost)
  return _internal_move_cost();
}
inline void PlayerParameter::_internal_set_move_cost(double value) {
  
  _impl_.move_cost_ = value;
}
inline void PlayerParameter::set_move_cost(double value) {
  _internal_set_move_cost(value);
  // @@protoc_insertion_point(field_set:proto.PlayerParameter.move_cost)
}

// double friction = 9;
inline void PlayerParameter::clear_friction() {
  _impl_.friction_ = 0;
}
inline double PlayerParameter::_internal_friction() const {
  return _impl_.friction_;
}
inline double PlayerParameter::friction() const {
  // @@protoc_insertion_point(field_get:proto.PlayerParameter.friction)
  return _internal_friction();
}
inline void PlayerParameter::_internal_set_friction(double value) {
  
  _impl_.friction_ = value;
}
inline void PlayerParameter::set_friction(double value) {
  _internal_set_friction(value);
  // @@protoc_insertion_point(field_set:proto.PlayerParameter.friction)
}

// -------------------------------------------------------------------

// WorldDatabase

// repeated .proto.Element elements = 1;
inline int WorldDatabase::_internal_elements_size() const {
  return _impl_.elements_.size();
}
inline int WorldDatabase::elements_size() const {
  return _internal_elements_size();
}
inline void WorldDatabase::clear_elements() {
  _impl_.elements_.Clear();
}
inline ::proto::Element* WorldDatabase::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:proto.WorldDatabase.elements)
  return _impl_.elements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Element >*
WorldDatabase::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:proto.WorldDatabase.elements)
  return &_impl_.elements_;
}
inline const ::proto::Element& WorldDatabase::_internal_elements(int index) const {
  return _impl_.elements_.Get(index);
}
inline const ::proto::Element& WorldDatabase::elements(int index) const {
  // @@protoc_insertion_point(field_get:proto.WorldDatabase.elements)
  return _internal_elements(index);
}
inline ::proto::Element* WorldDatabase::_internal_add_elements() {
  return _impl_.elements_.Add();
}
inline ::proto::Element* WorldDatabase::add_elements() {
  ::proto::Element* _add = _internal_add_elements();
  // @@protoc_insertion_point(field_add:proto.WorldDatabase.elements)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Element >&
WorldDatabase::elements() const {
  // @@protoc_insertion_point(field_list:proto.WorldDatabase.elements)
  return _impl_.elements_;
}

// repeated .proto.Character characters = 2;
inline int WorldDatabase::_internal_characters_size() const {
  return _impl_.characters_.size();
}
inline int WorldDatabase::characters_size() const {
  return _internal_characters_size();
}
inline void WorldDatabase::clear_characters() {
  _impl_.characters_.Clear();
}
inline ::proto::Character* WorldDatabase::mutable_characters(int index) {
  // @@protoc_insertion_point(field_mutable:proto.WorldDatabase.characters)
  return _impl_.characters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Character >*
WorldDatabase::mutable_characters() {
  // @@protoc_insertion_point(field_mutable_list:proto.WorldDatabase.characters)
  return &_impl_.characters_;
}
inline const ::proto::Character& WorldDatabase::_internal_characters(int index) const {
  return _impl_.characters_.Get(index);
}
inline const ::proto::Character& WorldDatabase::characters(int index) const {
  // @@protoc_insertion_point(field_get:proto.WorldDatabase.characters)
  return _internal_characters(index);
}
inline ::proto::Character* WorldDatabase::_internal_add_characters() {
  return _impl_.characters_.Add();
}
inline ::proto::Character* WorldDatabase::add_characters() {
  ::proto::Character* _add = _internal_add_characters();
  // @@protoc_insertion_point(field_add:proto.WorldDatabase.characters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Character >&
WorldDatabase::characters() const {
  // @@protoc_insertion_point(field_list:proto.WorldDatabase.characters)
  return _impl_.characters_;
}

// double time = 3;
inline void WorldDatabase::clear_time() {
  _impl_.time_ = 0;
}
inline double WorldDatabase::_internal_time() const {
  return _impl_.time_;
}
inline double WorldDatabase::time() const {
  // @@protoc_insertion_point(field_get:proto.WorldDatabase.time)
  return _internal_time();
}
inline void WorldDatabase::_internal_set_time(double value) {
  
  _impl_.time_ = value;
}
inline void WorldDatabase::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:proto.WorldDatabase.time)
}

// .proto.PlayerParameter player_parameter = 4;
inline bool WorldDatabase::_internal_has_player_parameter() const {
  return this != internal_default_instance() && _impl_.player_parameter_ != nullptr;
}
inline bool WorldDatabase::has_player_parameter() const {
  return _internal_has_player_parameter();
}
inline void WorldDatabase::clear_player_parameter() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_parameter_ != nullptr) {
    delete _impl_.player_parameter_;
  }
  _impl_.player_parameter_ = nullptr;
}
inline const ::proto::PlayerParameter& WorldDatabase::_internal_player_parameter() const {
  const ::proto::PlayerParameter* p = _impl_.player_parameter_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::PlayerParameter&>(
      ::proto::_PlayerParameter_default_instance_);
}
inline const ::proto::PlayerParameter& WorldDatabase::player_parameter() const {
  // @@protoc_insertion_point(field_get:proto.WorldDatabase.player_parameter)
  return _internal_player_parameter();
}
inline void WorldDatabase::unsafe_arena_set_allocated_player_parameter(
    ::proto::PlayerParameter* player_parameter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_parameter_);
  }
  _impl_.player_parameter_ = player_parameter;
  if (player_parameter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.WorldDatabase.player_parameter)
}
inline ::proto::PlayerParameter* WorldDatabase::release_player_parameter() {
  
  ::proto::PlayerParameter* temp = _impl_.player_parameter_;
  _impl_.player_parameter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::PlayerParameter* WorldDatabase::unsafe_arena_release_player_parameter() {
  // @@protoc_insertion_point(field_release:proto.WorldDatabase.player_parameter)
  
  ::proto::PlayerParameter* temp = _impl_.player_parameter_;
  _impl_.player_parameter_ = nullptr;
  return temp;
}
inline ::proto::PlayerParameter* WorldDatabase::_internal_mutable_player_parameter() {
  
  if (_impl_.player_parameter_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::PlayerParameter>(GetArenaForAllocation());
    _impl_.player_parameter_ = p;
  }
  return _impl_.player_parameter_;
}
inline ::proto::PlayerParameter* WorldDatabase::mutable_player_parameter() {
  ::proto::PlayerParameter* _msg = _internal_mutable_player_parameter();
  // @@protoc_insertion_point(field_mutable:proto.WorldDatabase.player_parameter)
  return _msg;
}
inline void WorldDatabase::set_allocated_player_parameter(::proto::PlayerParameter* player_parameter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.player_parameter_;
  }
  if (player_parameter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_parameter);
    if (message_arena != submessage_arena) {
      player_parameter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_parameter, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_parameter_ = player_parameter;
  // @@protoc_insertion_point(field_set_allocated:proto.WorldDatabase.player_parameter)
}

// -------------------------------------------------------------------

// UpdateRequest

// string name = 1;
inline void UpdateRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UpdateRequest::name() const {
  // @@protoc_insertion_point(field_get:proto.UpdateRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.UpdateRequest.name)
}
inline std::string* UpdateRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto.UpdateRequest.name)
  return _s;
}
inline const std::string& UpdateRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void UpdateRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateRequest::release_name() {
  // @@protoc_insertion_point(field_release:proto.UpdateRequest.name)
  return _impl_.name_.Release();
}
inline void UpdateRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateRequest.name)
}

// -------------------------------------------------------------------

// UpdateResponse

// repeated .proto.Character characters = 1;
inline int UpdateResponse::_internal_characters_size() const {
  return _impl_.characters_.size();
}
inline int UpdateResponse::characters_size() const {
  return _internal_characters_size();
}
inline void UpdateResponse::clear_characters() {
  _impl_.characters_.Clear();
}
inline ::proto::Character* UpdateResponse::mutable_characters(int index) {
  // @@protoc_insertion_point(field_mutable:proto.UpdateResponse.characters)
  return _impl_.characters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Character >*
UpdateResponse::mutable_characters() {
  // @@protoc_insertion_point(field_mutable_list:proto.UpdateResponse.characters)
  return &_impl_.characters_;
}
inline const ::proto::Character& UpdateResponse::_internal_characters(int index) const {
  return _impl_.characters_.Get(index);
}
inline const ::proto::Character& UpdateResponse::characters(int index) const {
  // @@protoc_insertion_point(field_get:proto.UpdateResponse.characters)
  return _internal_characters(index);
}
inline ::proto::Character* UpdateResponse::_internal_add_characters() {
  return _impl_.characters_.Add();
}
inline ::proto::Character* UpdateResponse::add_characters() {
  ::proto::Character* _add = _internal_add_characters();
  // @@protoc_insertion_point(field_add:proto.UpdateResponse.characters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Character >&
UpdateResponse::characters() const {
  // @@protoc_insertion_point(field_list:proto.UpdateResponse.characters)
  return _impl_.characters_;
}

// repeated .proto.Element elements = 2;
inline int UpdateResponse::_internal_elements_size() const {
  return _impl_.elements_.size();
}
inline int UpdateResponse::elements_size() const {
  return _internal_elements_size();
}
inline void UpdateResponse::clear_elements() {
  _impl_.elements_.Clear();
}
inline ::proto::Element* UpdateResponse::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:proto.UpdateResponse.elements)
  return _impl_.elements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Element >*
UpdateResponse::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:proto.UpdateResponse.elements)
  return &_impl_.elements_;
}
inline const ::proto::Element& UpdateResponse::_internal_elements(int index) const {
  return _impl_.elements_.Get(index);
}
inline const ::proto::Element& UpdateResponse::elements(int index) const {
  // @@protoc_insertion_point(field_get:proto.UpdateResponse.elements)
  return _internal_elements(index);
}
inline ::proto::Element* UpdateResponse::_internal_add_elements() {
  return _impl_.elements_.Add();
}
inline ::proto::Element* UpdateResponse::add_elements() {
  ::proto::Element* _add = _internal_add_elements();
  // @@protoc_insertion_point(field_add:proto.UpdateResponse.elements)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Element >&
UpdateResponse::elements() const {
  // @@protoc_insertion_point(field_list:proto.UpdateResponse.elements)
  return _impl_.elements_;
}

// double time = 3;
inline void UpdateResponse::clear_time() {
  _impl_.time_ = 0;
}
inline double UpdateResponse::_internal_time() const {
  return _impl_.time_;
}
inline double UpdateResponse::time() const {
  // @@protoc_insertion_point(field_get:proto.UpdateResponse.time)
  return _internal_time();
}
inline void UpdateResponse::_internal_set_time(double value) {
  
  _impl_.time_ = value;
}
inline void UpdateResponse::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:proto.UpdateResponse.time)
}

// -------------------------------------------------------------------

// ReportMovementRequest

// string name = 1;
inline void ReportMovementRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ReportMovementRequest::name() const {
  // @@protoc_insertion_point(field_get:proto.ReportMovementRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReportMovementRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ReportMovementRequest.name)
}
inline std::string* ReportMovementRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto.ReportMovementRequest.name)
  return _s;
}
inline const std::string& ReportMovementRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ReportMovementRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ReportMovementRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ReportMovementRequest::release_name() {
  // @@protoc_insertion_point(field_release:proto.ReportMovementRequest.name)
  return _impl_.name_.Release();
}
inline void ReportMovementRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.ReportMovementRequest.name)
}

// .proto.Physic physic = 2;
inline bool ReportMovementRequest::_internal_has_physic() const {
  return this != internal_default_instance() && _impl_.physic_ != nullptr;
}
inline bool ReportMovementRequest::has_physic() const {
  return _internal_has_physic();
}
inline void ReportMovementRequest::clear_physic() {
  if (GetArenaForAllocation() == nullptr && _impl_.physic_ != nullptr) {
    delete _impl_.physic_;
  }
  _impl_.physic_ = nullptr;
}
inline const ::proto::Physic& ReportMovementRequest::_internal_physic() const {
  const ::proto::Physic* p = _impl_.physic_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Physic&>(
      ::proto::_Physic_default_instance_);
}
inline const ::proto::Physic& ReportMovementRequest::physic() const {
  // @@protoc_insertion_point(field_get:proto.ReportMovementRequest.physic)
  return _internal_physic();
}
inline void ReportMovementRequest::unsafe_arena_set_allocated_physic(
    ::proto::Physic* physic) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.physic_);
  }
  _impl_.physic_ = physic;
  if (physic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ReportMovementRequest.physic)
}
inline ::proto::Physic* ReportMovementRequest::release_physic() {
  
  ::proto::Physic* temp = _impl_.physic_;
  _impl_.physic_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Physic* ReportMovementRequest::unsafe_arena_release_physic() {
  // @@protoc_insertion_point(field_release:proto.ReportMovementRequest.physic)
  
  ::proto::Physic* temp = _impl_.physic_;
  _impl_.physic_ = nullptr;
  return temp;
}
inline ::proto::Physic* ReportMovementRequest::_internal_mutable_physic() {
  
  if (_impl_.physic_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Physic>(GetArenaForAllocation());
    _impl_.physic_ = p;
  }
  return _impl_.physic_;
}
inline ::proto::Physic* ReportMovementRequest::mutable_physic() {
  ::proto::Physic* _msg = _internal_mutable_physic();
  // @@protoc_insertion_point(field_mutable:proto.ReportMovementRequest.physic)
  return _msg;
}
inline void ReportMovementRequest::set_allocated_physic(::proto::Physic* physic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.physic_;
  }
  if (physic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(physic);
    if (message_arena != submessage_arena) {
      physic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, physic, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.physic_ = physic;
  // @@protoc_insertion_point(field_set_allocated:proto.ReportMovementRequest.physic)
}

// string potential_hit = 3;
inline void ReportMovementRequest::clear_potential_hit() {
  _impl_.potential_hit_.ClearToEmpty();
}
inline const std::string& ReportMovementRequest::potential_hit() const {
  // @@protoc_insertion_point(field_get:proto.ReportMovementRequest.potential_hit)
  return _internal_potential_hit();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReportMovementRequest::set_potential_hit(ArgT0&& arg0, ArgT... args) {
 
 _impl_.potential_hit_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ReportMovementRequest.potential_hit)
}
inline std::string* ReportMovementRequest::mutable_potential_hit() {
  std::string* _s = _internal_mutable_potential_hit();
  // @@protoc_insertion_point(field_mutable:proto.ReportMovementRequest.potential_hit)
  return _s;
}
inline const std::string& ReportMovementRequest::_internal_potential_hit() const {
  return _impl_.potential_hit_.Get();
}
inline void ReportMovementRequest::_internal_set_potential_hit(const std::string& value) {
  
  _impl_.potential_hit_.Set(value, GetArenaForAllocation());
}
inline std::string* ReportMovementRequest::_internal_mutable_potential_hit() {
  
  return _impl_.potential_hit_.Mutable(GetArenaForAllocation());
}
inline std::string* ReportMovementRequest::release_potential_hit() {
  // @@protoc_insertion_point(field_release:proto.ReportMovementRequest.potential_hit)
  return _impl_.potential_hit_.Release();
}
inline void ReportMovementRequest::set_allocated_potential_hit(std::string* potential_hit) {
  if (potential_hit != nullptr) {
    
  } else {
    
  }
  _impl_.potential_hit_.SetAllocated(potential_hit, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.potential_hit_.IsDefault()) {
    _impl_.potential_hit_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.ReportMovementRequest.potential_hit)
}

// -------------------------------------------------------------------

// ReportMovementResponse

// .proto.ReturnEnum return_enum = 1;
inline void ReportMovementResponse::clear_return_enum() {
  _impl_.return_enum_ = 0;
}
inline ::proto::ReturnEnum ReportMovementResponse::_internal_return_enum() const {
  return static_cast< ::proto::ReturnEnum >(_impl_.return_enum_);
}
inline ::proto::ReturnEnum ReportMovementResponse::return_enum() const {
  // @@protoc_insertion_point(field_get:proto.ReportMovementResponse.return_enum)
  return _internal_return_enum();
}
inline void ReportMovementResponse::_internal_set_return_enum(::proto::ReturnEnum value) {
  
  _impl_.return_enum_ = value;
}
inline void ReportMovementResponse::set_return_enum(::proto::ReturnEnum value) {
  _internal_set_return_enum(value);
  // @@protoc_insertion_point(field_set:proto.ReportMovementResponse.return_enum)
}

// -------------------------------------------------------------------

// CreateCharacterRequest

// string name = 1;
inline void CreateCharacterRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CreateCharacterRequest::name() const {
  // @@protoc_insertion_point(field_get:proto.CreateCharacterRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateCharacterRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.CreateCharacterRequest.name)
}
inline std::string* CreateCharacterRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto.CreateCharacterRequest.name)
  return _s;
}
inline const std::string& CreateCharacterRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CreateCharacterRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateCharacterRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateCharacterRequest::release_name() {
  // @@protoc_insertion_point(field_release:proto.CreateCharacterRequest.name)
  return _impl_.name_.Release();
}
inline void CreateCharacterRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.CreateCharacterRequest.name)
}

// .proto.Vector3 color = 2;
inline bool CreateCharacterRequest::_internal_has_color() const {
  return this != internal_default_instance() && _impl_.color_ != nullptr;
}
inline bool CreateCharacterRequest::has_color() const {
  return _internal_has_color();
}
inline void CreateCharacterRequest::clear_color() {
  if (GetArenaForAllocation() == nullptr && _impl_.color_ != nullptr) {
    delete _impl_.color_;
  }
  _impl_.color_ = nullptr;
}
inline const ::proto::Vector3& CreateCharacterRequest::_internal_color() const {
  const ::proto::Vector3* p = _impl_.color_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Vector3&>(
      ::proto::_Vector3_default_instance_);
}
inline const ::proto::Vector3& CreateCharacterRequest::color() const {
  // @@protoc_insertion_point(field_get:proto.CreateCharacterRequest.color)
  return _internal_color();
}
inline void CreateCharacterRequest::unsafe_arena_set_allocated_color(
    ::proto::Vector3* color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.color_);
  }
  _impl_.color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CreateCharacterRequest.color)
}
inline ::proto::Vector3* CreateCharacterRequest::release_color() {
  
  ::proto::Vector3* temp = _impl_.color_;
  _impl_.color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Vector3* CreateCharacterRequest::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_release:proto.CreateCharacterRequest.color)
  
  ::proto::Vector3* temp = _impl_.color_;
  _impl_.color_ = nullptr;
  return temp;
}
inline ::proto::Vector3* CreateCharacterRequest::_internal_mutable_color() {
  
  if (_impl_.color_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Vector3>(GetArenaForAllocation());
    _impl_.color_ = p;
  }
  return _impl_.color_;
}
inline ::proto::Vector3* CreateCharacterRequest::mutable_color() {
  ::proto::Vector3* _msg = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:proto.CreateCharacterRequest.color)
  return _msg;
}
inline void CreateCharacterRequest::set_allocated_color(::proto::Vector3* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.color_;
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(color);
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.color_ = color;
  // @@protoc_insertion_point(field_set_allocated:proto.CreateCharacterRequest.color)
}

// -------------------------------------------------------------------

// CreateCharacterResponse

// .proto.PlayerParameter player_parameter = 1;
inline bool CreateCharacterResponse::_internal_has_player_parameter() const {
  return this != internal_default_instance() && _impl_.player_parameter_ != nullptr;
}
inline bool CreateCharacterResponse::has_player_parameter() const {
  return _internal_has_player_parameter();
}
inline void CreateCharacterResponse::clear_player_parameter() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_parameter_ != nullptr) {
    delete _impl_.player_parameter_;
  }
  _impl_.player_parameter_ = nullptr;
}
inline const ::proto::PlayerParameter& CreateCharacterResponse::_internal_player_parameter() const {
  const ::proto::PlayerParameter* p = _impl_.player_parameter_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::PlayerParameter&>(
      ::proto::_PlayerParameter_default_instance_);
}
inline const ::proto::PlayerParameter& CreateCharacterResponse::player_parameter() const {
  // @@protoc_insertion_point(field_get:proto.CreateCharacterResponse.player_parameter)
  return _internal_player_parameter();
}
inline void CreateCharacterResponse::unsafe_arena_set_allocated_player_parameter(
    ::proto::PlayerParameter* player_parameter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_parameter_);
  }
  _impl_.player_parameter_ = player_parameter;
  if (player_parameter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CreateCharacterResponse.player_parameter)
}
inline ::proto::PlayerParameter* CreateCharacterResponse::release_player_parameter() {
  
  ::proto::PlayerParameter* temp = _impl_.player_parameter_;
  _impl_.player_parameter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::PlayerParameter* CreateCharacterResponse::unsafe_arena_release_player_parameter() {
  // @@protoc_insertion_point(field_release:proto.CreateCharacterResponse.player_parameter)
  
  ::proto::PlayerParameter* temp = _impl_.player_parameter_;
  _impl_.player_parameter_ = nullptr;
  return temp;
}
inline ::proto::PlayerParameter* CreateCharacterResponse::_internal_mutable_player_parameter() {
  
  if (_impl_.player_parameter_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::PlayerParameter>(GetArenaForAllocation());
    _impl_.player_parameter_ = p;
  }
  return _impl_.player_parameter_;
}
inline ::proto::PlayerParameter* CreateCharacterResponse::mutable_player_parameter() {
  ::proto::PlayerParameter* _msg = _internal_mutable_player_parameter();
  // @@protoc_insertion_point(field_mutable:proto.CreateCharacterResponse.player_parameter)
  return _msg;
}
inline void CreateCharacterResponse::set_allocated_player_parameter(::proto::PlayerParameter* player_parameter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.player_parameter_;
  }
  if (player_parameter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_parameter);
    if (message_arena != submessage_arena) {
      player_parameter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_parameter, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_parameter_ = player_parameter;
  // @@protoc_insertion_point(field_set_allocated:proto.CreateCharacterResponse.player_parameter)
}

// .proto.ReturnEnum return_enum = 2;
inline void CreateCharacterResponse::clear_return_enum() {
  _impl_.return_enum_ = 0;
}
inline ::proto::ReturnEnum CreateCharacterResponse::_internal_return_enum() const {
  return static_cast< ::proto::ReturnEnum >(_impl_.return_enum_);
}
inline ::proto::ReturnEnum CreateCharacterResponse::return_enum() const {
  // @@protoc_insertion_point(field_get:proto.CreateCharacterResponse.return_enum)
  return _internal_return_enum();
}
inline void CreateCharacterResponse::_internal_set_return_enum(::proto::ReturnEnum value) {
  
  _impl_.return_enum_ = value;
}
inline void CreateCharacterResponse::set_return_enum(::proto::ReturnEnum value) {
  _internal_set_return_enum(value);
  // @@protoc_insertion_point(field_set:proto.CreateCharacterResponse.return_enum)
}

// -------------------------------------------------------------------

// PingRequest

// int32 value = 1;
inline void PingRequest::clear_value() {
  _impl_.value_ = 0;
}
inline int32_t PingRequest::_internal_value() const {
  return _impl_.value_;
}
inline int32_t PingRequest::value() const {
  // @@protoc_insertion_point(field_get:proto.PingRequest.value)
  return _internal_value();
}
inline void PingRequest::_internal_set_value(int32_t value) {
  
  _impl_.value_ = value;
}
inline void PingRequest::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:proto.PingRequest.value)
}

// -------------------------------------------------------------------

// PingResponse

// int32 value = 1;
inline void PingResponse::clear_value() {
  _impl_.value_ = 0;
}
inline int32_t PingResponse::_internal_value() const {
  return _impl_.value_;
}
inline int32_t PingResponse::value() const {
  // @@protoc_insertion_point(field_get:proto.PingResponse.value)
  return _internal_value();
}
inline void PingResponse::_internal_set_value(int32_t value) {
  
  _impl_.value_ = value;
}
inline void PingResponse::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:proto.PingResponse.value)
}

// double time = 2;
inline void PingResponse::clear_time() {
  _impl_.time_ = 0;
}
inline double PingResponse::_internal_time() const {
  return _impl_.time_;
}
inline double PingResponse::time() const {
  // @@protoc_insertion_point(field_get:proto.PingResponse.time)
  return _internal_time();
}
inline void PingResponse::_internal_set_time(double value) {
  
  _impl_.time_ = value;
}
inline void PingResponse::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:proto.PingResponse.time)
}

// -------------------------------------------------------------------

// DeathReportRequest

// string name = 1;
inline void DeathReportRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeathReportRequest::name() const {
  // @@protoc_insertion_point(field_get:proto.DeathReportRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeathReportRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.DeathReportRequest.name)
}
inline std::string* DeathReportRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto.DeathReportRequest.name)
  return _s;
}
inline const std::string& DeathReportRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DeathReportRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeathReportRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeathReportRequest::release_name() {
  // @@protoc_insertion_point(field_release:proto.DeathReportRequest.name)
  return _impl_.name_.Release();
}
inline void DeathReportRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.DeathReportRequest.name)
}

// string session_tocken = 2;
inline void DeathReportRequest::clear_session_tocken() {
  _impl_.session_tocken_.ClearToEmpty();
}
inline const std::string& DeathReportRequest::session_tocken() const {
  // @@protoc_insertion_point(field_get:proto.DeathReportRequest.session_tocken)
  return _internal_session_tocken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeathReportRequest::set_session_tocken(ArgT0&& arg0, ArgT... args) {
 
 _impl_.session_tocken_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.DeathReportRequest.session_tocken)
}
inline std::string* DeathReportRequest::mutable_session_tocken() {
  std::string* _s = _internal_mutable_session_tocken();
  // @@protoc_insertion_point(field_mutable:proto.DeathReportRequest.session_tocken)
  return _s;
}
inline const std::string& DeathReportRequest::_internal_session_tocken() const {
  return _impl_.session_tocken_.Get();
}
inline void DeathReportRequest::_internal_set_session_tocken(const std::string& value) {
  
  _impl_.session_tocken_.Set(value, GetArenaForAllocation());
}
inline std::string* DeathReportRequest::_internal_mutable_session_tocken() {
  
  return _impl_.session_tocken_.Mutable(GetArenaForAllocation());
}
inline std::string* DeathReportRequest::release_session_tocken() {
  // @@protoc_insertion_point(field_release:proto.DeathReportRequest.session_tocken)
  return _impl_.session_tocken_.Release();
}
inline void DeathReportRequest::set_allocated_session_tocken(std::string* session_tocken) {
  if (session_tocken != nullptr) {
    
  } else {
    
  }
  _impl_.session_tocken_.SetAllocated(session_tocken, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.session_tocken_.IsDefault()) {
    _impl_.session_tocken_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.DeathReportRequest.session_tocken)
}

// -------------------------------------------------------------------

// DeathReportResponse

// .proto.ReturnEnum return_enum = 1;
inline void DeathReportResponse::clear_return_enum() {
  _impl_.return_enum_ = 0;
}
inline ::proto::ReturnEnum DeathReportResponse::_internal_return_enum() const {
  return static_cast< ::proto::ReturnEnum >(_impl_.return_enum_);
}
inline ::proto::ReturnEnum DeathReportResponse::return_enum() const {
  // @@protoc_insertion_point(field_get:proto.DeathReportResponse.return_enum)
  return _internal_return_enum();
}
inline void DeathReportResponse::_internal_set_return_enum(::proto::ReturnEnum value) {
  
  _impl_.return_enum_ = value;
}
inline void DeathReportResponse::set_return_enum(::proto::ReturnEnum value) {
  _internal_set_return_enum(value);
  // @@protoc_insertion_point(field_set:proto.DeathReportResponse.return_enum)
}

// double time = 2;
inline void DeathReportResponse::clear_time() {
  _impl_.time_ = 0;
}
inline double DeathReportResponse::_internal_time() const {
  return _impl_.time_;
}
inline double DeathReportResponse::time() const {
  // @@protoc_insertion_point(field_get:proto.DeathReportResponse.time)
  return _internal_time();
}
inline void DeathReportResponse::_internal_set_time(double value) {
  
  _impl_.time_ = value;
}
inline void DeathReportResponse::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:proto.DeathReportResponse.time)
}

// repeated .proto.CharacterReport character_reports = 3;
inline int DeathReportResponse::_internal_character_reports_size() const {
  return _impl_.character_reports_.size();
}
inline int DeathReportResponse::character_reports_size() const {
  return _internal_character_reports_size();
}
inline void DeathReportResponse::clear_character_reports() {
  _impl_.character_reports_.Clear();
}
inline ::proto::CharacterReport* DeathReportResponse::mutable_character_reports(int index) {
  // @@protoc_insertion_point(field_mutable:proto.DeathReportResponse.character_reports)
  return _impl_.character_reports_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::CharacterReport >*
DeathReportResponse::mutable_character_reports() {
  // @@protoc_insertion_point(field_mutable_list:proto.DeathReportResponse.character_reports)
  return &_impl_.character_reports_;
}
inline const ::proto::CharacterReport& DeathReportResponse::_internal_character_reports(int index) const {
  return _impl_.character_reports_.Get(index);
}
inline const ::proto::CharacterReport& DeathReportResponse::character_reports(int index) const {
  // @@protoc_insertion_point(field_get:proto.DeathReportResponse.character_reports)
  return _internal_character_reports(index);
}
inline ::proto::CharacterReport* DeathReportResponse::_internal_add_character_reports() {
  return _impl_.character_reports_.Add();
}
inline ::proto::CharacterReport* DeathReportResponse::add_character_reports() {
  ::proto::CharacterReport* _add = _internal_add_character_reports();
  // @@protoc_insertion_point(field_add:proto.DeathReportResponse.character_reports)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::CharacterReport >&
DeathReportResponse::character_reports() const {
  // @@protoc_insertion_point(field_list:proto.DeathReportResponse.character_reports)
  return _impl_.character_reports_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::proto::ReturnEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::ReturnEnum>() {
  return ::proto::ReturnEnum_descriptor();
}
template <> struct is_proto_enum< ::proto::VitalEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::VitalEnum>() {
  return ::proto::VitalEnum_descriptor();
}
template <> struct is_proto_enum< ::proto::StatusEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::StatusEnum>() {
  return ::proto::StatusEnum_descriptor();
}
template <> struct is_proto_enum< ::proto::TypeEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::TypeEnum>() {
  return ::proto::TypeEnum_descriptor();
}
template <> struct is_proto_enum< ::proto::ColorEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::ColorEnum>() {
  return ::proto::ColorEnum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_darwin_5fservice_2eproto
