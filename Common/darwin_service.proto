syntax = "proto3";

package proto;

enum ReturnEnum {
    RETURN_ERROR = 0;       // Error in the function?
    RETURN_OK = 1;          // OK this passed well.
    RETURN_REJECTED = 2;    // Rejected by the server.
}

enum VitalEnum {
    VITAL_NONE = 0;         // Error status incorrect.
    VITAL_ALIVE = 1;        // The player is alive and kicking.
    VITAL_DEAD = 2;         // This player is dead.
    VITAL_LOADING = 3;      // This player is loading in.
}

enum StatusEnum {
    STATUS_UNKNOWN = 0;     // Unknown this is an error!
    STATUS_ON_GROUND = 1;   // On the ground.
    STATUS_JUMPING = 2;     // Jumping.
    STATUS_LOADING = 3;     // Loading in the game.
    STATUS_DEAD = 4;        // Dead.
}

enum TypeEnum {
    TYPE_UNKNOWN = 0;        // Unknown this is an error!
    TYPE_GROUND = 1;        // From where the gravity is generated.
    TYPE_EXPLOSION = 2;     // Explosion that push stuff around.
    TYPE_UPGRADE = 3;       // Upgrade to upgrade character.
    TYPE_GREEN = 4;         // Greenery (no effect on anything).
    TYPE_BROWN = 5;         // Tree bark and non destructible elements.
    TYPE_WATER = 6;         // Water.
    TYPE_CHARACTER = 7;     // Player character.
}

enum ColorEnum {
    COLOR_ERROR = 0;        // Error in the function?
    COLOR_NO = 1;           // No change of color.
    COLOR_YES = 2;          // Change of color.
    COLOR_CIRCLE = 3;       // Change of color in a circle.
}

// Vector 3 this store position or other 3 float values.
// Next: 4
message Vector3 {
    double x = 1;
    double y = 2;
    double z = 3;
}

// Vector 4 this is representing a quaternion (rotation).
// Next: 5
message Vector4 {
    double x = 1;
    double y = 2;
    double z = 3;
    double w = 4;
}

// Physical property of the element.
// Next: 7
message Physic {
    // Sphere radius.
    double radius = 1;
    // weight total.
    double mass = 2;
    // Sphere position.
    Vector3 position = 3;
    // Velocity the speed it has d(position)/dt.
    Vector3 position_dt = 5;
    // Sphere look direction.
    Vector4 orientation = 4;
    // Rotation d(orientation)/dt.
    Vector4 orientation_dt = 6;
}

// Sphere element in the world.
// Next: 5
message Element {
    string name = 1;
    // Material string.
    Vector3 color = 2;
    // Physic, position, speed etc...
    Physic physic = 3;
    // What type of element is it?
    TypeEnum type_enum = 4;
}

// Character it will be represented by a sphere on server.
// Next: 7
message Character {
    // Character name.
    string name = 1;
    // Color string.
    Vector3 color = 2;
    // Physic paramters.
    Physic physic = 3;
    // G force.
    Vector3 g_force = 4;
    // normal used by camera (is normalize(-gforce)).
    Vector3 normal = 5;
    // Status of the element.
    StatusEnum status_enum = 6;
}

// CharacterReport
// Next: 5
message CharacterReport {
    // Character name.
    string name = 1;
    // Radius (score).
    float radius = 2;
    // Status.
    VitalEnum vital_status = 3;
    // Color.
    Vector3 color = 4;
    // Last seen time.
    double last_seen = 5;
}

// PlayerParameter
// Next: 10
message PlayerParameter {
    // Vertical speed (jumping).
    double vertical_speed = 1;
    // Horizontal speed (running).
    double horizontal_speed = 2;
    // Player start mass.
    double start_mass = 3;
    // Player drop height (start at planet radius and add this value).
    double drop_height = 4;
    // Penalty for eating too similar to player color.
    double penalty = 5;
    // Dot product limit for penalty.
    double dot_penalty = 6;
    // Change color when you eat.
    ColorEnum change_color = 7;
    // Move cost in mass value.
    double move_cost = 8;
    // Friction (this will stop the move at a certain point).
    double friction = 9;
}

// WorldDatabase saved as a file.
// Next: 5
message WorldDatabase {
    // Elements list.
    repeated Element elements = 1;
    // Characters list.
    repeated Character characters = 2;
    // Present time on the server.
    double time = 3;
    // World parameter this will be moved to client at connection.
    PlayerParameter player_parameter = 4;
}

// UpdateRequest
// Next: 2
message UpdateRequest {
    // Ask for a named object.
    string name = 1;
}

// UpdateResponse
// Next: 4
message UpdateResponse {
    // Character list and position.
    repeated Character characters = 1;
    // Elements list and position.
    repeated Element elements = 2;
    // Present time on the server.
    double time = 3;
}

// ReportMovementRequest
// Next: 4
message ReportMovementRequest {
    // Character name.
    string name = 1;
    // New physic.
    Physic physic = 2;
    // Name of potential hit.
    string potential_hit = 3;
}

// ReportMovementResponse
// Next: 2
message ReportMovementResponse {
    // Return enum.
    ReturnEnum return_enum = 1;
}

// CreateCharacterRequest
// Next: 3
message CreateCharacterRequest {
    // Character name.
    string name = 1;
    // Character color.
    Vector3 color = 2;
}

// CreateCharacterResponse
// Next: 3
message CreateCharacterResponse {
    // Player parameter (used to set parameters).
    PlayerParameter player_parameter = 1;
    // Return enum.
    ReturnEnum return_enum = 2;
}

// PingRequest
// Next: 2
message PingRequest {
    // Value to check.
    int32 value = 1;
}

// PingResponse
// Next: 3
message PingResponse {
    // Returned value.
    int32 value = 1;
    // Present time on the server.
    double time = 2;
}

// DeathReportRequest
// Next: 3
message DeathReportRequest {
    // Character name.
    string name = 1;
    // Tocken.
    string session_tocken = 2;
}

// DeathReportResponse
// Next: 4
message DeathReportResponse {
    // Return enum.
    ReturnEnum return_enum = 1;
    // Present time on the server.
    double time = 2;
    // Report.
    repeated CharacterReport character_reports = 3;
}

// The darwin service.
service DarwinService {
    // Update the position of object in the world to the clients.
    rpc Update(UpdateRequest) returns (stream UpdateResponse);
    // Client report the change of position and speed of a player.
    rpc ReportMovement(ReportMovementRequest) returns (ReportMovementResponse);
    // Create a new character.
    rpc CreateCharacter(CreateCharacterRequest) returns (CreateCharacterResponse);
    // Ping the server.
    rpc Ping(PingRequest) returns (PingResponse);
    // Death report.
    rpc DeathReport(DeathReportRequest) returns (DeathReportResponse);
}
