syntax = "proto3";

package proto;

// Vector 3 this store position or other 3 float values.
// Next: 4
message Vector3 {
    double x = 1;
    double y = 2;
    double z = 3;
}

// Vector 4 this is representing a quaternion (rotation).
// Next: 5
message Vector4 {
    double x = 1;
    double y = 2;
    double z = 3;
    double w = 4;
}

// Physical property of the element.
// Next: 7
message Physic {
    // Sphere radius.
    double radius = 1;
    // weight total.
    double mass = 2;
    // Sphere position.
    Vector3 position = 3;
    // Velocity the speed it has d(position)/dt.
    Vector3 position_dt = 5;
    // Sphere look direction.
    Vector4 orientation = 4;
    // Rotation d(orientation)/dt.
    Vector4 orientation_dt = 6;
}

// Sphere element in the world.
// Next: 5
message Element {
    string name = 1;
    // Material string.
    string material = 2;
    // Physic, position, speed etc...
    Physic physic = 3;
    // What type of element is it?
    enum TypeEnum {
        UKNOWN = 0;     // Unknown this is an error!
        GROUND = 1;     // From where the gravity is generated.
        EXPLOSION = 2;  // Explosion that push stuff around.
        UPGRADE = 3;    // Upgrade to upgrade character.
        GREEN = 4;      // Greenery (no effect on anything).
        BROWN = 5;      // Tree bark and non destructible elements.
        WATER = 6;      // Water.
    }
    TypeEnum type_enum = 4;
}

// User
// Next: 4
message User {
    // User name.
    string name = 1;
    // Password this will be hashed and salted!
    string password = 2;
    // The password salt.
    string salt = 3;
    // Session tocken.
    string session_tocken = 4;
    // User id.
    int32 user_id = 5;
}

// Character it will be represented by a sphere on server.
// Next: 7
message Character {
    // Character name.
    string name = 1;
    // Material string.
    string material = 2;
    // Physic paramters.
    Physic physic = 3;
    // Local g axis (used for local camera angle).
    Vector3 g_normal = 4;
    // G force (used for local computation).
    double g_force = 5;
    // User parameters.
    int32 user_id = 6;
}

// UserDatabase
// Next: 3
message UserDatabase {
    // Features list.
    enum ParameterEnum {
        NONE = 0;
        ALLOW_USER_CREATION = 1;
    }
    // Enable features list.
    repeated ParameterEnum features = 1;
    // Users list.
    repeated User users = 2;
}

// WorldDatabase saved as a file.
// Next: 4
message WorldDatabase {
    // Elements list.
    repeated Element elements = 2;
    // Characters list.
    repeated Character characters = 3;
    // Present time on the server.
    double time = 4;
}

enum ReturnEnum {
    RETURN_ERROR = 0;
    RETURN_OK = 1;
    RETURN_REJECTED = 2;
}

// UpdateRequest
// Next: 2
message UpdateRequest {
    // Ask for a named object.
    string name = 1;
}

// UpdateResponse
// Next: 4
message UpdateResponse {
    // Character list and position.
    repeated Character characters = 1;
    // Elements list and position.
    repeated Element elements = 2;
    // Present time on the server.
    double time = 3;
}

// ReportMovementRequest
// Next: 4
message ReportMovementRequest {
    // Character name.
    string name = 1;
    // New physic.
    Physic physic = 2;
    // Tocken.
    string session_tocken = 3;
}

// ReportMovementResponse
// Next: 3
message ReportMovementResponse {
    // Return enum.
    ReturnEnum return_enum = 1;
    // Present time on the server.
    double time = 2;
}

// LoginRequest
// Next: 3
message LoginRequest {
    // Character name.
    string name = 1;
    // Password this will be hashed!
    string password = 2;
    // The password salt (if needed).
    string salt = 3;
}

// LoginResponse
// Next: 3
message LoginResponse {
    // Is the password correct?
    ReturnEnum return_enum = 1;
    // Session tocken.
    string session_tocken = 2;
}

// CreateCharacterRequest
// Next: 2
message CreateCharacterRequest {
    Vector3 color = 1;
}

// CreateCharacterResponse
// Next: 2
message CreateCharacterResponse {
    ReturnEnum return_enum = 1;
}

// PingRequest
// Next: 2
message PingRequest {
    // Value to check.
    int32 value = 1;
}

// PingResponse
// Next: 3
message PingResponse {
    // Returned value.
    int32 value = 1;
    // Present time on the server.
    double time = 2;
}

// The darwin service.
service DarwinService {
    // Update the position of object in the world to the clients.
    rpc Update(UpdateRequest) returns (stream UpdateResponse);
    // Client report the change of position and speed of a player.
    rpc ReportMovement(ReportMovementRequest) returns (ReportMovementResponse);
    // Try to log into a server.
    rpc Login(LoginRequest) returns (LoginResponse);
    // Create a new character.
    rpc CreateCharacter(CreateCharacterRequest) returns (CreateCharacterResponse);
    // Ping the server.
    rpc Ping(PingRequest) returns (PingResponse);
}
